diff -ur ./firecracker-control/local.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/firecracker-control/local.go
--- ./firecracker-control/local.go	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/firecracker-control/local.go	2022-02-25 13:37:31.107472996 +0800
@@ -596,3 +560,95 @@
 
 	return nil
 }
+
+// PauseVM Pauses a VM
+func (s *local) PauseVM(ctx context.Context, req *proto.PauseVMRequest) (*empty.Empty, error) {
+	client, err := s.shimFirecrackerClient(ctx, req.VMID)
+	if err != nil {
+		return nil, err
+	}
+
+	defer client.Close()
+
+	resp, err := client.PauseVM(ctx, req)
+	if err != nil {
+		s.logger.WithError(err).Error()
+		return nil, err
+	}
+
+	return resp, nil
+}
+
+// ResumeVM Resumes a VM
+func (s *local) ResumeVM(ctx context.Context, req *proto.ResumeVMRequest) (*empty.Empty, error) {
+	client, err := s.shimFirecrackerClient(ctx, req.VMID)
+	if err != nil {
+		return nil, err
+	}
+
+	defer client.Close()
+
+	resp, err := client.ResumeVM(ctx, req)
+	if err != nil {
+		s.logger.WithError(err).Error()
+		return nil, err
+	}
+
+	return resp, nil
+}
+
+// CreateSnapshot Creates a snapshot of a VM
+func (s *local) CreateSnapshot(ctx context.Context, req *proto.CreateSnapshotRequest) (*empty.Empty, error) {
+	client, err := s.shimFirecrackerClient(ctx, req.VMID)
+	if err != nil {
+		return nil, err
+	}
+
+	defer client.Close()
+
+	resp, err := client.CreateSnapshot(ctx, req)
+	if err != nil {
+		s.logger.WithError(err).Error()
+		return nil, err
+	}
+
+	return resp, nil
+}
+
+// LoadSnapshot Loads a snapshot of a VM
+func (s *local) LoadSnapshot(ctx context.Context, req *proto.LoadSnapshotRequest) (*proto.LoadResponse, error) {
+	client, err := s.shimFirecrackerClient(ctx, req.VMID)
+	if err != nil {
+		return nil, err
+	}
+
+	defer client.Close()
+
+	resp, err := client.LoadSnapshot(ctx, req)
+	if err != nil {
+		s.logger.WithError(err).Error()
+		return nil, err
+	}
+
+	return resp, nil
+}
+
+// Offload Shuts down a VM started through the firecracker go sdk and deletes
+// the corresponding firecracker socket. All of the other resources (shim, other sockets)
+// will persist.
+func (s *local) Offload(ctx context.Context, req *proto.OffloadRequest) (*empty.Empty, error) {
+	client, err := s.shimFirecrackerClient(ctx, req.VMID)
+	if err != nil {
+		return nil, err
+	}
+
+	defer client.Close()
+
+	resp, err := client.Offload(ctx, req)
+	if err != nil {
+		s.logger.WithError(err).Error()
+		return nil, err
+	}
+
+	return resp, nil
+}
diff -ur ./firecracker-control/service.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/firecracker-control/service.go
--- ./firecracker-control/service.go	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/firecracker-control/service.go	2022-02-25 13:37:31.107472996 +0800
@@ -126,3 +126,18 @@
 	log.G(ctx).Debug("Updating balloon device statistics polling interval")
 	return s.local.UpdateBalloonStats(ctx, req)
 }
+
+func (s *service) LoadSnapshot(ctx context.Context, req *proto.LoadSnapshotRequest) (*proto.LoadResponse, error) {
+	log.G(ctx).Debugf("load snapshot request: %+v", req)
+	return s.local.LoadSnapshot(ctx, req)
+}
+
+func (s *service) CreateSnapshot(ctx context.Context, req *proto.CreateSnapshotRequest) (*empty.Empty, error) {
+	log.G(ctx).Debugf("create snapshot request: %+v", req)
+	return s.local.CreateSnapshot(ctx, req)
+}
+
+func (s *service) Offload(ctx context.Context, req *proto.OffloadRequest) (*empty.Empty, error) {
+	log.G(ctx).Debugf("offload request: %+v", req)
+	return s.local.Offload(ctx, req)
+}
diff -ur ./proto/firecracker.pb.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/firecracker.pb.go
--- ./proto/firecracker.pb.go	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/firecracker.pb.go	2022-02-25 13:37:31.107472996 +0800
 type PauseVMRequest struct {
 	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,json=vMID,proto3" json:"VMID,omitempty"`
 	XXX_NoUnkeyedLiteral struct{} `json:"-"`
@@ -669,6 +685,198 @@
 	return ""
 }
 
+type CreateSnapshotRequest struct {
+	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,json=vMID,proto3" json:"VMID,omitempty"`
+	SnapshotFilePath     string   `protobuf:"bytes,2,opt,name=SnapshotFilePath,json=snapshotFilePath,proto3" json:"SnapshotFilePath,omitempty"`
+	MemFilePath          string   `protobuf:"bytes,3,opt,name=MemFilePath,json=memFilePath,proto3" json:"MemFilePath,omitempty"`
+	XXX_NoUnkeyedLiteral struct{} `json:"-"`
+	XXX_unrecognized     []byte   `json:"-"`
+	XXX_sizecache        int32    `json:"-"`
+}
+
+func (m *CreateSnapshotRequest) Reset()         { *m = CreateSnapshotRequest{} }
+func (m *CreateSnapshotRequest) String() string { return proto.CompactTextString(m) }
+func (*CreateSnapshotRequest) ProtoMessage()    {}
+func (*CreateSnapshotRequest) Descriptor() ([]byte, []int) {
+	return fileDescriptor_a73317e9fb8da571, []int{11}
+}
+func (m *CreateSnapshotRequest) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_CreateSnapshotRequest.Unmarshal(m, b)
+}
+func (m *CreateSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_CreateSnapshotRequest.Marshal(b, m, deterministic)
+}
+func (m *CreateSnapshotRequest) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_CreateSnapshotRequest.Merge(m, src)
+}
+func (m *CreateSnapshotRequest) XXX_Size() int {
+	return xxx_messageInfo_CreateSnapshotRequest.Size(m)
+}
+func (m *CreateSnapshotRequest) XXX_DiscardUnknown() {
+	xxx_messageInfo_CreateSnapshotRequest.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_CreateSnapshotRequest proto.InternalMessageInfo
+
+func (m *CreateSnapshotRequest) GetVMID() string {
+	if m != nil {
+		return m.VMID
+	}
+	return ""
+}
+
+func (m *CreateSnapshotRequest) GetSnapshotFilePath() string {
+	if m != nil {
+		return m.SnapshotFilePath
+	}
+	return ""
+}
+
+func (m *CreateSnapshotRequest) GetMemFilePath() string {
+	if m != nil {
+		return m.MemFilePath
+	}
+	return ""
+}
+
+type LoadSnapshotRequest struct {
+	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,json=vMID,proto3" json:"VMID,omitempty"`
+	SnapshotFilePath     string   `protobuf:"bytes,2,opt,name=SnapshotFilePath,json=snapshotFilePath,proto3" json:"SnapshotFilePath,omitempty"`
+	MemFilePath          string   `protobuf:"bytes,3,opt,name=MemFilePath,json=memFilePath,proto3" json:"MemFilePath,omitempty"`
+	EnableUserPF         bool     `protobuf:"varint,4,opt,name=EnableUserPF,json=enableUserPF,proto3" json:"EnableUserPF,omitempty"`
+	XXX_NoUnkeyedLiteral struct{} `json:"-"`
+	XXX_unrecognized     []byte   `json:"-"`
+	XXX_sizecache        int32    `json:"-"`
+}
+
+func (m *LoadSnapshotRequest) Reset()         { *m = LoadSnapshotRequest{} }
+func (m *LoadSnapshotRequest) String() string { return proto.CompactTextString(m) }
+func (*LoadSnapshotRequest) ProtoMessage()    {}
+func (*LoadSnapshotRequest) Descriptor() ([]byte, []int) {
+	return fileDescriptor_a73317e9fb8da571, []int{12}
+}
+func (m *LoadSnapshotRequest) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_LoadSnapshotRequest.Unmarshal(m, b)
+}
+func (m *LoadSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_LoadSnapshotRequest.Marshal(b, m, deterministic)
+}
+func (m *LoadSnapshotRequest) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_LoadSnapshotRequest.Merge(m, src)
+}
+func (m *LoadSnapshotRequest) XXX_Size() int {
+	return xxx_messageInfo_LoadSnapshotRequest.Size(m)
+}
+func (m *LoadSnapshotRequest) XXX_DiscardUnknown() {
+	xxx_messageInfo_LoadSnapshotRequest.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_LoadSnapshotRequest proto.InternalMessageInfo
+
+func (m *LoadSnapshotRequest) GetVMID() string {
+	if m != nil {
+		return m.VMID
+	}
+	return ""
+}
+
+func (m *LoadSnapshotRequest) GetSnapshotFilePath() string {
+	if m != nil {
+		return m.SnapshotFilePath
+	}
+	return ""
+}
+
+func (m *LoadSnapshotRequest) GetMemFilePath() string {
+	if m != nil {
+		return m.MemFilePath
+	}
+	return ""
+}
+
+func (m *LoadSnapshotRequest) GetEnableUserPF() bool {
+	if m != nil {
+		return m.EnableUserPF
+	}
+	return false
+}
+
+type LoadResponse struct {
+	FirecrackerPID       string   `protobuf:"bytes,1,opt,name=FirecrackerPID,json=firecrackerPID,proto3" json:"FirecrackerPID,omitempty"`
+	XXX_NoUnkeyedLiteral struct{} `json:"-"`
+	XXX_unrecognized     []byte   `json:"-"`
+	XXX_sizecache        int32    `json:"-"`
+}
+
+func (m *LoadResponse) Reset()         { *m = LoadResponse{} }
+func (m *LoadResponse) String() string { return proto.CompactTextString(m) }
+func (*LoadResponse) ProtoMessage()    {}
+func (*LoadResponse) Descriptor() ([]byte, []int) {
+	return fileDescriptor_a73317e9fb8da571, []int{13}
+}
+func (m *LoadResponse) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_LoadResponse.Unmarshal(m, b)
+}
+func (m *LoadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_LoadResponse.Marshal(b, m, deterministic)
+}
+func (m *LoadResponse) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_LoadResponse.Merge(m, src)
+}
+func (m *LoadResponse) XXX_Size() int {
+	return xxx_messageInfo_LoadResponse.Size(m)
+}
+func (m *LoadResponse) XXX_DiscardUnknown() {
+	xxx_messageInfo_LoadResponse.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_LoadResponse proto.InternalMessageInfo
+
+func (m *LoadResponse) GetFirecrackerPID() string {
+	if m != nil {
+		return m.FirecrackerPID
+	}
+	return ""
+}
+
+type OffloadRequest struct {
+	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,json=vMID,proto3" json:"VMID,omitempty"`
+	XXX_NoUnkeyedLiteral struct{} `json:"-"`
+	XXX_unrecognized     []byte   `json:"-"`
+	XXX_sizecache        int32    `json:"-"`
+}
+
+func (m *OffloadRequest) Reset()         { *m = OffloadRequest{} }
+func (m *OffloadRequest) String() string { return proto.CompactTextString(m) }
+func (*OffloadRequest) ProtoMessage()    {}
+func (*OffloadRequest) Descriptor() ([]byte, []int) {
+	return fileDescriptor_a73317e9fb8da571, []int{14}
+}
+func (m *OffloadRequest) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_OffloadRequest.Unmarshal(m, b)
+}
+func (m *OffloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_OffloadRequest.Marshal(b, m, deterministic)
+}
+func (m *OffloadRequest) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_OffloadRequest.Merge(m, src)
+}
+func (m *OffloadRequest) XXX_Size() int {
+	return xxx_messageInfo_OffloadRequest.Size(m)
+}
+func (m *OffloadRequest) XXX_DiscardUnknown() {
+	xxx_messageInfo_OffloadRequest.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_OffloadRequest proto.InternalMessageInfo
+
+func (m *OffloadRequest) GetVMID() string {
+	if m != nil {
+		return m.VMID
+	}
+	return ""
+}
+
 }
 func (m *UpdateBalloonStatsRequest) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_UpdateBalloonStatsRequest.Unmarshal(m, b)
@@ -1154,6 +1362,10 @@
 	proto.RegisterType((*UpdateVMMetadataRequest)(nil), "UpdateVMMetadataRequest")
 	proto.RegisterType((*GetVMMetadataRequest)(nil), "GetVMMetadataRequest")
 	proto.RegisterType((*GetVMMetadataResponse)(nil), "GetVMMetadataResponse")
+	proto.RegisterType((*CreateSnapshotRequest)(nil), "CreateSnapshotRequest")
+	proto.RegisterType((*LoadSnapshotRequest)(nil), "LoadSnapshotRequest")
+	proto.RegisterType((*LoadResponse)(nil), "LoadResponse")
+	proto.RegisterType((*OffloadRequest)(nil), "OffloadRequest")
 	proto.RegisterType((*JailerConfig)(nil), "JailerConfig")
 	proto.RegisterType((*UpdateBalloonRequest)(nil), "UpdateBalloonRequest")
 	proto.RegisterType((*GetBalloonConfigRequest)(nil), "GetBalloonConfigRequest")
diff -ur ./proto/firecracker.proto /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/firecracker.proto
--- ./proto/firecracker.proto	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/firecracker.proto	2022-02-25 13:37:31.107472996 +0800
@@ -49,6 +49,8 @@
     string LogFifoPath = 3;
     string MetricsFifoPath = 4;
     string CgroupPath = 5;
+    string UPFSockPath = 6;
+    string FirecrackerPID = 7;
 }
 
 message PauseVMRequest {
@@ -103,6 +105,28 @@
     BIND = 1;
 }
 
+message CreateSnapshotRequest {
+    string VMID = 1;
+    string SnapshotFilePath = 2;
+    string MemFilePath = 3;
+}
+
+message LoadSnapshotRequest {
+    string VMID = 1;
+    string SnapshotFilePath = 2;
+    string MemFilePath = 3;
+    bool EnableUserPF = 4;
+}
+
+message LoadResponse {
+    string FirecrackerPID = 1;
+}
+
+message OffloadRequest {
+    string VMID = 1;
+}
+
+
 message JailerConfig {
     string NetNS = 1;
     // List of the physical numbers of the CPUs on which processes in that
diff -ur ./proto/service/fccontrol/fccontrol.proto /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/service/fccontrol/fccontrol.proto
--- ./proto/service/fccontrol/fccontrol.proto	2022-02-11 11:21:52.617311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/service/fccontrol/fccontrol.proto	2022-02-25 13:37:31.107472996 +0800
@@ -15,7 +15,7 @@
 
     // Resumes a VM
     rpc ResumeVM(ResumeVMRequest) returns (google.protobuf.Empty);
-
+    
     // Stops existing Firecracker instance by VM ID
     rpc StopVM(StopVMRequest) returns (google.protobuf.Empty);
 
@@ -42,4 +42,13 @@
 
     // Updates a balloon device statistics polling interval.
     rpc UpdateBalloonStats(UpdateBalloonStatsRequest) returns(google.protobuf.Empty);
+
+    // Loads VM from snapshot
+    rpc LoadSnapshot(LoadSnapshotRequest) returns (LoadResponse);
+
+    // Make a snapshot of a VM
+    rpc CreateSnapshot(CreateSnapshotRequest) returns (google.protobuf.Empty);
+
+    // Offload a snapshotted VM
+    rpc Offload(OffloadRequest) returns (google.protobuf.Empty);
 }
diff -ur ./proto/service/fccontrol/ttrpc/fccontrol.pb.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/service/fccontrol/ttrpc/fccontrol.pb.go
--- ./proto/service/fccontrol/ttrpc/fccontrol.pb.go	2022-02-11 11:21:52.617311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/service/fccontrol/ttrpc/fccontrol.pb.go	2022-02-25 13:37:31.107472996 +0800
@@ -66,6 +69,9 @@
 	UpdateBalloon(ctx context.Context, req *proto1.UpdateBalloonRequest) (*empty.Empty, error)
 	GetBalloonStats(ctx context.Context, req *proto1.GetBalloonStatsRequest) (*proto1.GetBalloonStatsResponse, error)
 	UpdateBalloonStats(ctx context.Context, req *proto1.UpdateBalloonStatsRequest) (*empty.Empty, error)
+	LoadSnapshot(ctx context.Context, req *proto1.LoadSnapshotRequest) (*proto1.LoadResponse, error)
+	CreateSnapshot(ctx context.Context, req *proto1.CreateSnapshotRequest) (*empty.Empty, error)
+	Offload(ctx context.Context, req *proto1.OffloadRequest) (*empty.Empty, error)
 }
 
 func RegisterFirecrackerService(srv *github_com_containerd_ttrpc.Server, svc FirecrackerService) {
@@ -154,6 +160,27 @@
 			}
 			return svc.UpdateBalloonStats(ctx, &req)
 		},
+		"LoadSnapshot": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
+			var req proto1.LoadSnapshotRequest
+			if err := unmarshal(&req); err != nil {
+				return nil, err
+			}
+			return svc.LoadSnapshot(ctx, &req)
+		},
+		"CreateSnapshot": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
+			var req proto1.CreateSnapshotRequest
+			if err := unmarshal(&req); err != nil {
+				return nil, err
+			}
+			return svc.CreateSnapshot(ctx, &req)
+		},
+		"Offload": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
+			var req proto1.OffloadRequest
+			if err := unmarshal(&req); err != nil {
+				return nil, err
+			}
+			return svc.Offload(ctx, &req)
+		},
 	})
 }
 
@@ -261,4 +288,28 @@
 		return nil, err
 	}
 	return &resp, nil
+}
+
+func (c *firecrackerClient) LoadSnapshot(ctx context.Context, req *proto1.LoadSnapshotRequest) (*proto1.LoadResponse, error) {
+	var resp proto1.LoadResponse
+	if err := c.client.Call(ctx, "Firecracker", "LoadSnapshot", req, &resp); err != nil {
+		return nil, err
+	}
+	return &resp, nil
+}
+
+func (c *firecrackerClient) CreateSnapshot(ctx context.Context, req *proto1.CreateSnapshotRequest) (*empty.Empty, error) {
+	var resp empty.Empty
+	if err := c.client.Call(ctx, "Firecracker", "CreateSnapshot", req, &resp); err != nil {
+		return nil, err
+	}
+	return &resp, nil
+}
+
+func (c *firecrackerClient) Offload(ctx context.Context, req *proto1.OffloadRequest) (*empty.Empty, error) {
+	var resp empty.Empty
+	if err := c.client.Call(ctx, "Firecracker", "Offload", req, &resp); err != nil {
+		return nil, err
+	}
+	return &resp, nil
 }
diff -ur ./runtime/service.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/runtime/service.go
--- ./runtime/service.go	2022-02-11 11:21:52.617311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/runtime/service.go	2022-02-25 13:37:31.111472997 +0800
@@ -14,12 +14,15 @@
 package main
 
 import (
+	"bytes"
 	"context"
 	"encoding/json"
 	"fmt"
 	"math"
 	"net"
+	"net/http"
 	"os"
+	"os/exec"
 	"runtime/debug"
 	"strconv"
 	"strings"
@@ -64,6 +67,7 @@
 	drivemount "github.com/firecracker-microvm/firecracker-containerd/proto/service/drivemount/ttrpc"
 	fccontrolTtrpc "github.com/firecracker-microvm/firecracker-containerd/proto/service/fccontrol/ttrpc"
 	ioproxy "github.com/firecracker-microvm/firecracker-containerd/proto/service/ioproxy/ttrpc"
+	"github.com/tv42/httpunix"
 )
 
 func init() {
@@ -102,6 +106,13 @@
 	_ shim.Init           = NewService
 )
 
+type loadSnapReq struct {
+	SnapshotPath         string `json:"snapshot_path"`
+	MemFilePath          string `json:"mem_file_path"`
+	SendSockAddr         string `json:"sock_file_path"`
+	EnableUserPageFaults bool   `json:"enable_user_page_faults"`
+}
+
 // implements shimapi
 type service struct {
 	taskManager   vm.TaskManager
@@ -157,6 +168,11 @@
 	// fifos have stdio FIFOs containerd passed to the shim. The key is [taskID][execID].
 	fifos   map[string]map[string]cio.Config
 	fifosMu sync.Mutex
+
+	// httpControlClient is to send pause/resume/snapshot commands to the microVM
+	httpControlClient   *http.Client
+	firecrackerPid      int
+	taskDrivePathOnHost string
 }
 
 func shimOpts(shimCtx context.Context) (*shim.Opts, error) {
@@ -502,6 +522,8 @@
 	resp.MetricsFifoPath = s.machineConfig.MetricsFifo
 	resp.LogFifoPath = s.machineConfig.LogFifo
 	resp.SocketPath = s.shimDir.FirecrackerSockPath()
+	resp.FirecrackerPID = strconv.Itoa(s.firecrackerPid)
+	resp.UPFSockPath = s.shimDir.FirecrackerUPFSockPath()
 	if c, ok := s.jailer.(cgroupPather); ok {
 		resp.CgroupPath = c.CgroupPath()
 	}
@@ -620,7 +642,18 @@
 		return err
 	}
 
+	s.createHTTPControlClient()
+
+	pid, err := s.machine.PID()
+	if err != nil {
+		s.logger.WithError(err).Error("Failed to get PID of firecracker process")
+		return err
+	}
+
+	s.firecrackerPid = pid
+
 	s.logger.Info("successfully started the VM")
+
 	return nil
 }
 
@@ -1193,6 +1167,8 @@
 	}
 	rootfsMnt := request.Rootfs[0]
 
+	s.taskDrivePathOnHost = rootfsMnt.Source
+
 	err = s.containerStubHandler.Reserve(requestCtx, request.ID,
 		rootfsMnt.Source, vmBundleDir.RootfsPath(), "ext4", nil, s.driveMountClient, s.machine)
 	if err != nil {
@@ -1725,6 +1701,8 @@
 }
 
 // monitorVMExit watches the VM and cleanup resources when it terminates.
+// Comment out because unused
+/*
 func (s *service) monitorVMExit() {
 	// Block until the VM exits
 	if err := s.machine.Wait(s.shimCtx); err != nil && err != context.Canceled {
@@ -1735,3 +1713,315 @@
 		s.logger.WithError(err).Error("failed to clean up the VM")
 	}
 }
+*/
+
+func (s *service) createHTTPControlClient() {
+	u := &httpunix.Transport{
+		DialTimeout:           100 * time.Millisecond,
+		RequestTimeout:        10 * time.Second,
+		ResponseHeaderTimeout: 10 * time.Second,
+	}
+	u.RegisterLocation("firecracker", s.shimDir.FirecrackerSockPath())
+
+	t := &http.Transport{}
+	t.RegisterProtocol(httpunix.Scheme, u)
+
+	var client = http.Client{
+		Transport: t,
+	}
+
+	s.httpControlClient = &client
+}
+
+func formResumeReq() (*http.Request, error) {
+	var req *http.Request
+
+	data := map[string]string{
+		"state": "Resumed",
+	}
+	json, err := json.Marshal(data)
+	if err != nil {
+		logrus.WithError(err).Error("Failed to marshal json data")
+		return nil, err
+	}
+
+	req, err = http.NewRequest("PATCH", "http+unix://firecracker/vm", bytes.NewBuffer(json))
+	if err != nil {
+		logrus.WithError(err).Error("Failed to create new HTTP request in formResumeReq")
+		return nil, err
+	}
+	req.Header.Add("accept", "application/json")
+	req.Header.Add("Content-Type", "application/json")
+
+	return req, nil
+}
+
+func formPauseReq() (*http.Request, error) {
+	var req *http.Request
+
+	data := map[string]string{
+		"state": "Paused",
+	}
+	json, err := json.Marshal(data)
+	if err != nil {
+		logrus.WithError(err).Error("Failed to marshal json data")
+		return nil, err
+	}
+
+	req, err = http.NewRequest("PATCH", "http+unix://firecracker/vm", bytes.NewBuffer(json))
+	if err != nil {
+		logrus.WithError(err).Error("Failed to create new HTTP request in formPauseReq")
+		return nil, err
+	}
+	req.Header.Add("accept", "application/json")
+	req.Header.Add("Content-Type", "application/json")
+
+	return req, nil
+}
+
+func formLoadSnapReq(snapshotPath, memPath, sendSockAddr string, isUpf bool) (*http.Request, error) {
+	var req *http.Request
+
+	data := loadSnapReq{
+		SnapshotPath:         snapshotPath,
+		MemFilePath:          memPath,
+		SendSockAddr:         sendSockAddr,
+		EnableUserPageFaults: isUpf,
+	}
+
+	json, err := json.Marshal(data)
+	if err != nil {
+		logrus.WithError(err).Error("Failed to marshal json data")
+		return nil, err
+	}
+
+	req, err = http.NewRequest("PUT", "http+unix://firecracker/snapshot/load", bytes.NewBuffer(json))
+	if err != nil {
+		logrus.WithError(err).Error("Failed to create new HTTP request in formLoadSnapReq")
+		return nil, err
+	}
+	req.Header.Add("accept", "application/json")
+	req.Header.Add("Content-Type", "application/json")
+
+	return req, nil
+}
+
+func formCreateSnapReq(snapshotPath, memPath string) (*http.Request, error) {
+	var req *http.Request
+
+	data := map[string]string{
+		"snapshot_type": "Full",
+		"snapshot_path": snapshotPath,
+		"mem_file_path": memPath,
+	}
+	json, err := json.Marshal(data)
+	if err != nil {
+		logrus.WithError(err).Error("Failed to marshal json data")
+		return nil, err
+	}
+
+	req, err = http.NewRequest("PUT", "http+unix://firecracker/snapshot/create", bytes.NewBuffer(json))
+	if err != nil {
+		logrus.WithError(err).Error("Failed to create new HTTP request in formCreateSnapReq")
+		return nil, err
+	}
+	req.Header.Add("accept", "application/json")
+	req.Header.Add("Content-Type", "application/json")
+
+	return req, nil
+}
+
+func (s *service) startFirecrackerProcess() error {
+	firecPath, err := exec.LookPath("firecracker")
+	if err != nil {
+		logrus.WithError(err).Error("failed to look up firecracker binary")
+		return err
+	}
+
+	// TODO: Remove hardcoding and make a parameter
+	logFilePath := fmt.Sprintf("/tmp/log_%s_after.logs", s.vmID)
+	if err := os.RemoveAll(logFilePath); err != nil {
+		s.logger.WithError(err).Errorf("Failed to delete %s", logFilePath)
+		return err
+	}
+	if _, err := os.OpenFile(logFilePath, os.O_RDONLY|os.O_CREATE, 0600); err != nil {
+		s.logger.WithError(err).Errorf("Failed to create %s", logFilePath)
+		return err
+	}
+
+	args := []string{
+		"--api-sock", s.shimDir.FirecrackerSockPath(),
+		"--log-path", logFilePath,
+		"--level", s.config.DebugHelper.GetFirecrackerLogLevel(),
+		"--show-level",
+		"--show-log-origin",
+	}
+
+	firecrackerCmd := exec.Command(firecPath, args...)
+	firecrackerCmd.Dir = s.shimDir.RootPath()
+
+	if err := firecrackerCmd.Start(); err != nil {
+		logrus.WithError(err).Error("Failed to start firecracker process")
+	}
+
+	go firecrackerCmd.Wait()
+
+	s.firecrackerPid = firecrackerCmd.Process.Pid
+
+	return nil
+}
+
+func (s *service) dialFirecrackerSocket() error {
+	for {
+		var d net.Dialer
+		ctx, cancel := context.WithTimeout(context.Background(), 50*time.Millisecond)
+		defer cancel()
+
+		c, err := d.DialContext(ctx, "unix", s.shimDir.FirecrackerSockPath())
+		if err != nil {
+			if ctx.Err() != nil {
+				s.logger.WithError(ctx.Err()).Error("timed out while waiting for firecracker socket")
+				return ctx.Err()
+			}
+
+			time.Sleep(1 * time.Millisecond)
+			continue
+		}
+
+		c.Close()
+
+		break
+	}
+
+	return nil
+}
+
+// LoadSnapshot Loads a VM from a snapshot
+func (s *service) LoadSnapshot(ctx context.Context, req *proto.LoadSnapshotRequest) (*proto.LoadResponse, error) {
+	if err := s.startFirecrackerProcess(); err != nil {
+		s.logger.WithError(err).Error("startFirecrackerProcess returned an error")
+		return nil, err
+	}
+
+	if err := s.dialFirecrackerSocket(); err != nil {
+		s.logger.WithError(err).Error("Failed to wait for firecracker socket")
+	}
+	s.createHTTPControlClient()
+
+	sendSockAddr := s.shimDir.FirecrackerUPFSockPath()
+	if !req.EnableUserPF {
+		sendSockAddr = "dummy"
+	}
+
+	loadSnapReq, err := formLoadSnapReq(req.SnapshotFilePath, req.MemFilePath, sendSockAddr, req.EnableUserPF)
+	if err != nil {
+		s.logger.WithError(err).Error("Failed to create load snapshot request")
+		return nil, err
+	}
+
+	resp, err := s.httpControlClient.Do(loadSnapReq)
+	if err != nil {
+		s.logger.WithError(err).Error("Failed to send load snapshot request")
+		return nil, err
+	}
+	if !strings.Contains(resp.Status, "204") {
+		s.logger.WithError(err).Error("Failed to load VM from snapshot")
+		s.logger.WithError(err).Errorf("Status of request: %s", resp.Status)
+		return nil, errors.New("Failed to load VM from snapshot")
+	}
+
+	return &proto.LoadResponse{FirecrackerPID: strconv.Itoa(s.firecrackerPid)}, nil
+}
+
+// CreateSnapshot Creates a snapshot of a VM
+func (s *service) CreateSnapshot(ctx context.Context, req *proto.CreateSnapshotRequest) (*empty.Empty, error) {
+	createSnapReq, err := formCreateSnapReq(req.SnapshotFilePath, req.MemFilePath)
+	if err != nil {
+		s.logger.WithError(err).Error("Failed to create make snapshot request")
+		return nil, err
+	}
+
+	resp, err := s.httpControlClient.Do(createSnapReq)
+	if err != nil {
+		s.logger.WithError(err).Error("Failed to send make snapshot request")
+		return nil, err
+	}
+	if !strings.Contains(resp.Status, "204") {
+		s.logger.WithError(err).Error("Failed to make snapshot of VM")
+		return nil, errors.New("Failed to make snapshot of VM")
+	}
+
+	return &empty.Empty{}, nil
+}
+
+// Offload Shuts down a VM and deletes the corresponding firecracker socket
+// and vsock. All of the other resources will persist
+func (s *service) Offload(ctx context.Context, req *proto.OffloadRequest) (*empty.Empty, error) {
+	if err := syscall.Kill(s.firecrackerPid, 9); err != nil {
+		s.logger.WithError(err).Error("Failed to kill firecracker process")
+		return nil, err
+	}
+
+	if err := os.RemoveAll(s.shimDir.FirecrackerSockPath()); err != nil {
+		s.logger.WithError(err).Error("Failed to delete firecracker socket")
+		return nil, err
+	}
+
+	if err := os.RemoveAll(s.shimDir.FirecrackerVSockPath()); err != nil {
+		s.logger.WithError(err).Error("Failed to delete firecracker vsock")
+		return nil, err
+	}
+
+	if err := os.RemoveAll(s.shimDir.FirecrackerUPFSockPath()); err != nil {
+		s.logger.WithError(err).Error("Failed to delete firecracker UPF socket")
+		return nil, err
+	}
+
+	return &empty.Empty{}, nil
+}
