Only in ./agent: agent
Only in .: bin
diff -ur ./.buildkite/pipeline.yml /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/.buildkite/pipeline.yml
--- ./.buildkite/pipeline.yml	2022-02-11 11:21:52.609311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/.buildkite/pipeline.yml	2022-02-25 13:37:31.095472996 +0800
@@ -65,6 +65,18 @@
       - test -z "$(git status --porcelain)" && exit 0 || git status && echo -e '\nGenerated protobuf code differs from committed, please run "make proto" and commit the updated files.\n' && exit 1
     timeout_in_minutes: 1
 
+  - label: ":golang: go mod tidy"
+    agents:
+      queue: "${BUILDKITE_AGENT_META_DATA_QUEUE:-default}"
+      distro: "${BUILDKITE_AGENT_META_DATA_DISTRO}"
+      hostname: "${BUILDKITE_AGENT_META_DATA_HOSTNAME}"
+    env:
+      DOCKER_IMAGE_TAG: "$BUILDKITE_BUILD_NUMBER"
+    command:
+      - make tidy-in-docker
+      - test -z "$(git status --porcelain)" && exit 0 || git status && echo -e '\ngo.mod and/or go.sum differ from committed, please run "go mod tidy" and commit the updated files.\n' && exit 1
+    timeout_in_minutes: 1
+
   - label: ":gear: unit tests"
     agents:
       queue: "${BUILDKITE_AGENT_META_DATA_QUEUE:-default}"
@@ -91,7 +103,7 @@
       - "runtime/logs/*"
     command:
       - make -C runtime integ-test FICD_DM_POOL=build_${BUILDKITE_BUILD_NUMBER}_runtime
-    timeout_in_minutes: 30
+    timeout_in_minutes: 15
 
   - label: ":rotating_light: :exclamation: example tests"
     agents:
diff -ur ./.buildkite/setup_al2.sh /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/.buildkite/setup_al2.sh
--- ./.buildkite/setup_al2.sh	2022-02-11 11:21:52.609311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/.buildkite/setup_al2.sh	2022-02-25 13:37:31.095472996 +0800
@@ -21,14 +21,13 @@
      make install install-firecracker install-default-rootfs
 
 cat << EOF > $dir/config.toml
-version = 2
-disabled_plugins = ["io.containerd.grpc.v1.cri"]
+disabled_plugins = ["cri"]
 root = "$dir"
 state = "$state_path"
 [grpc]
   address = "$dir/containerd.sock"
 [plugins]
-  [plugins."io.containerd.snapshotter.v1.devmapper"]
+  [plugins.devmapper]
     pool_name = "fcci--vg-$unique_id"
     base_image_size = "10GB"
     root_path = "$devmapper_path"
@@ -43,7 +42,7 @@
 	"firecracker_binary_path": "$bin_path/firecracker",
 	"shim_base_dir": "$dir",
 	"kernel_image_path": "$dir/default-vmlinux.bin",
-	"kernel_args": "ro console=ttyS0 noapic reboot=k panic=1 pci=off nomodules systemd.unified_cgroup_hierarchy=0 systemd.journald.forward_to_console systemd.log_color=false systemd.unit=firecracker.target init=/sbin/overlay-init",
+	"kernel_args": "ro console=ttyS0 noapic reboot=k panic=1 pci=off nomodules systemd.journald.forward_to_console systemd.log_color=false systemd.unit=firecracker.target init=/sbin/overlay-init",
 	"log_levels": ["debug"],
 	"root_drive": "$dir/default-rootfs.img",
 	"jailer": {
diff -ur ./config/config.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/config/config.go
--- ./config/config.go	2022-02-11 11:21:52.609311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/config/config.go	2022-02-25 13:37:31.099472996 +0800
@@ -20,7 +20,6 @@
 
 	"github.com/pkg/errors"
 
-	"github.com/firecracker-microvm/firecracker-containerd/internal"
 	"github.com/firecracker-microvm/firecracker-containerd/internal/debug"
 	"github.com/firecracker-microvm/firecracker-containerd/proto"
 	models "github.com/firecracker-microvm/firecracker-go-sdk/client/models"
@@ -88,20 +87,13 @@
 		KernelArgs:      defaultKernelArgs,
 		KernelImagePath: defaultKernelPath,
 		RootDrive:       defaultRootfsPath,
+		CPUTemplate:     string(defaultCPUTemplate),
 		ShimBaseDir:     defaultShimBaseDir,
 		JailerConfig: JailerConfig{
 			RuncConfigPath: runcConfigPath,
 		},
 	}
 
-	flag, err := internal.SupportCPUTemplate()
-	if err != nil {
-		return nil, err
-	}
-	if flag {
-		cfg.CPUTemplate = string(defaultCPUTemplate)
-	}
-
 	if err := json.Unmarshal(data, cfg); err != nil {
 		return nil, errors.Wrapf(err, "failed to unmarshal config from %q", path)
 	}
diff -ur ./config/config_test.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/config/config_test.go
--- ./config/config_test.go	2022-02-11 11:21:52.609311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/config/config_test.go	2022-02-25 13:37:31.099472996 +0800
@@ -39,15 +39,17 @@
 	overrideKernelArgs := "OVERRIDE KERNEL ARGS"
 	overrideKernelPath := "OVERRIDE KERNEL PATH"
 	overrideRootfsPath := "OVERRIDE ROOTFS PATH"
+	overrideCPUCount := 42
 	overrideCPUTemplate := "OVERRIDE CPU TEMPLATE"
 	configContent := fmt.Sprintf(
 		`{
 			"kernel_args":"%s",
 			"kernel_image_path":"%s",
 			"root_drive":"%s",
-			"cpu_template": "%s",
+			"cpu_count": %d,
+            "cpu_template": "%s",
 			"log_levels": ["debug"]
-		}`, overrideKernelArgs, overrideKernelPath, overrideRootfsPath, overrideCPUTemplate)
+		}`, overrideKernelArgs, overrideKernelPath, overrideRootfsPath, overrideCPUCount, overrideCPUTemplate)
 	configFile, cleanup := createTempConfig(t, configContent)
 	defer cleanup()
 	cfg, err := LoadConfig(configFile)
Only in .: deps
diff -ur ./docs/getting-started.md /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/docs/getting-started.md
--- ./docs/getting-started.md	2022-02-11 11:21:52.609311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/docs/getting-started.md	2022-02-25 13:37:31.099472996 +0800
@@ -4,7 +4,7 @@
 project is currently in a very early state, and things are not yet as
 plug-and-play as we'd like.  This guide contains general instructions for
 getting started, but is more descriptive than a concrete set of step-by-step
-instructions.
+instructions. 
 
 If you prefer to follow a script, you can use the
 [quickstart guide](quickstart.md) instead.
@@ -16,12 +16,12 @@
 * A computer with a recent-enough version of Linux (4.14+), an Intel x86_64
   processor (AMD and Arm are on the roadmap, but not yet supported), and KVM
   enabled.  An i3.metal running Amazon Linux 2 is a good candidate.
-
+  
   <details>
-
+  
   <summary>Click here to see a bash script that will check if your system meets
   the basic requirements to run Firecracker.</summary>
-
+  
   ```bash
   #!/bin/bash
   err=""; \
@@ -35,9 +35,12 @@
     && echo "WARNING: you are running in a virtual machine. Firecracker is not well tested under nested virtualization."; \
   [ -z "$err" ] && echo "Your system looks ready for Firecracker!" || echo -e "$err"
   ```
-
+  
   </details>
 * git
+* A root filesystem image (you can use the one
+  [described here](https://github.com/firecracker-microvm/firecracker/blob/main/docs/getting-started.md#running-firecracker)
+  as `hello-rootfs.ext4`). 
 * A recent installation of [Docker CE](https://docker.com).
 * Go 1.13 or later, which you can download from [here](https://golang.org/dl/).
 
@@ -125,14 +128,13 @@
 We recommend a configuration like the following:
 
 ```toml
-version = 2
-disabled_plugins = ["io.containerd.grpc.v1.cri"]
+disabled_plugins = ["cri"]
 root = "/var/lib/firecracker-containerd/containerd"
 state = "/run/firecracker-containerd"
 [grpc]
   address = "/run/firecracker-containerd/containerd.sock"
 [plugins]
-  [plugins."io.containerd.snapshotter.v1.devmapper"]
+  [plugins.devmapper]
     pool_name = "fc-dev-thinpool"
     base_image_size = "10GB"
     root_path = "/var/lib/firecracker-containerd/snapshotter/devmapper"
@@ -224,6 +226,8 @@
 * `root_drive` (optional) - A path where the root drive image file is located. A
   fully-qualified path is recommended.  If left undefined, the runtime looks for
   a file named `/var/lib/firecracker-containerd/runtime/default-rootfs.img`.
+* `cpu_count` (optional) - The number of vCPUs to make available to a microVM.
+  If left undefined, the default is 1.
 * `cpu_template` (required) - The Firecracker CPU emulation template.  Supported
   values are "C3" and "T2".
 * `additional_drives` (unused)
@@ -291,7 +295,7 @@
   docker.io/library/busybox:latest busybox-test
 ```
 
-Alternatively you can specify `--runtime` and `--snapshotter` just once when
+Alternatively you can specify `--runtime` and `--snapshotter` just once when 
 creating a new namespace using containerd's default labels:
 
 ```bash
@@ -309,11 +313,11 @@
   docker.io/library/busybox:latest busybox-test
 ```
 
-## Networking support
-Firecracker-containerd supports the same networking options as provided by the
+## Networking support 
+Firecracker-containerd supports the same networking options as provided by the 
 Firecracker Go SDK, [documented here](https://github.com/firecracker-microvm/firecracker-go-sdk#network-configuration).
 This includes support for configuring VM network interfaces both with
-pre-created tap devices and with tap devices created automatically by
+pre-created tap devices and with tap devices created automatically by 
 [CNI](https://github.com/containernetworking/cni) plugins.
 
 ### CNI Setup
@@ -326,7 +330,7 @@
 to the specifics of the environment and workloads being hosting, with particular
 attention being given to network isolation between tasks.
 
-To install the required CNI dependencies, run the following make target from the
+To install the required CNI dependencies, run the following make target from the 
 previously cloned firecracker-containerd repository:
 
 ```bash
diff -ur ./docs/logging.md /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/docs/logging.md
--- ./docs/logging.md	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/docs/logging.md	2022-02-25 13:37:31.103472996 +0800
@@ -11,6 +11,7 @@
   "kernel_image_path": "/var/lib/firecracker-containerd/runtime/default-vmlinux.bin",
   "kernel_args": "ro console=ttyS0 noapic reboot=k panic=1 pci=off nomodules systemd.journald.forward_to_console systemd.unit=firecracker.target init=/sbin/overlay-init",
   "root_drive": "/var/lib/firecracker-containerd/runtime/default-rootfs.img",
+  "cpu_count": 1,
   "cpu_template": "T2",
   "log_levels": ["debug"],
   "jailer": {
@@ -39,7 +40,7 @@
 | firecracker-containerd:info    | Logs any error, warn, and info level logs                                       |
 | firecracker-containerd:debug   | Most verbose logging for firecracker-containerd                                 |
 
-The firecracker:XX are mutually exclusive with other firecracker-YY meaning only one of the log levels can be set at a time.
+The firecracker:XX are mutually exclusive with other firecracker-YY meaning only one of the log levels can be set at a time. 
 However, firecracker:output may be set with other firecracker:YY settings.
 The firecracker-containerd:XX are also mutually exclusive with other firecracker-containerd-YY levels
 info, error, warning, and debug are mutually exclusive and only one can be set at a time.
@@ -50,6 +51,7 @@
   "kernel_image_path": "/var/lib/firecracker-containerd/runtime/default-vmlinux.bin",
   "kernel_args": "ro console=ttyS0 noapic reboot=k panic=1 pci=off nomodules systemd.journald.forward_to_console systemd.unit=firecracker.target init=/sbin/overlay-init",
   "root_drive": "/var/lib/firecracker-containerd/runtime/default-rootfs.img",
+  "cpu_count": 1,
   "cpu_template": "T2",
   "log:levels": ["info","firecracker:debug","firecracker-containerd:error"],
   "jailer": {
diff -ur ./docs/quickstart.md /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/docs/quickstart.md
--- ./docs/quickstart.md	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/docs/quickstart.md	2022-02-25 13:37:31.103472996 +0800
@@ -137,14 +137,13 @@
 # shim from
 sudo mkdir -p /var/lib/firecracker-containerd
 sudo tee /etc/firecracker-containerd/config.toml <<EOF
-version = 2
-disabled_plugins = ["io.containerd.grpc.v1.cri"]
+disabled_plugins = ["cri"]
 root = "/var/lib/firecracker-containerd/containerd"
 state = "/run/firecracker-containerd"
 [grpc]
   address = "/run/firecracker-containerd/containerd.sock"
 [plugins]
-  [plugins."io.containerd.snapshotter.v1.devmapper"]
+  [plugins.devmapper]
     pool_name = "fc-dev-thinpool"
     base_image_size = "10GB"
     root_path = "/var/lib/firecracker-containerd/snapshotter/devmapper"
diff -ur ./examples/etc/containerd/firecracker-runtime.json /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/examples/etc/containerd/firecracker-runtime.json
--- ./examples/etc/containerd/firecracker-runtime.json	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/examples/etc/containerd/firecracker-runtime.json	2022-02-25 13:37:31.103472996 +0800
@@ -1,8 +1,9 @@
 {
   "firecracker_binary_path": "/usr/local/bin/firecracker",
   "kernel_image_path": "/var/lib/firecracker-containerd/runtime/default-vmlinux.bin",
-  "kernel_args": "ro console=ttyS0 noapic reboot=k panic=1 pci=off nomodules systemd.unified_cgroup_hierarchy=0 systemd.journald.forward_to_console systemd.unit=firecracker.target init=/sbin/overlay-init",
+  "kernel_args": "ro console=ttyS0 noapic reboot=k panic=1 pci=off nomodules systemd.journald.forward_to_console systemd.unit=firecracker.target init=/sbin/overlay-init",
   "root_drive": "/var/lib/firecracker-containerd/runtime/default-rootfs.img",
+  "cpu_count": 1,
   "cpu_template": "T2",
   "log_levels": ["debug"],
   "jailer": {
Only in ./examples: taskworkflow
Only in ./firecracker-control/cmd/containerd: firecracker-containerd
Only in ./firecracker-control/cmd/containerd: firecracker-ctr
Only in ./firecracker-control/cmd/containerd: gomod_test.go
diff -ur ./firecracker-control/cmd/containerd/main.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/firecracker-control/cmd/containerd/main.go
--- ./firecracker-control/cmd/containerd/main.go	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/firecracker-control/cmd/containerd/main.go	2022-02-25 13:37:31.107472996 +0800
@@ -50,9 +50,6 @@
 	_ "github.com/containerd/containerd/snapshots/devmapper/plugin"
 	_ "github.com/containerd/containerd/snapshots/overlay/plugin"
 
-	// Register cri plugin
-	_ "github.com/containerd/containerd/pkg/cri"
-
 	// Register fc-control plugin
 	_ "github.com/firecracker-microvm/firecracker-containerd/firecracker-control"
 )
diff -ur ./firecracker-control/cmd/containerd/Makefile /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/firecracker-control/cmd/containerd/Makefile
--- ./firecracker-control/cmd/containerd/Makefile	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/firecracker-control/cmd/containerd/Makefile	2022-02-25 13:37:31.107472996 +0800
@@ -29,7 +29,7 @@
 		-ldflags $(VERSION_LDFLAGS) -o firecracker-containerd
 
 firecracker-ctr: $(GOMOD) $(GOSUM)
-	GOBIN=$(CURDIR) go install $(EXTRAGOARGS) \
+	GOBIN=$(CURDIR) go install -tags=no_cri $(EXTRAGOARGS) \
 		-ldflags $(VERSION_LDFLAGS) github.com/containerd/containerd/cmd/ctr
 	mv ctr firecracker-ctr
 
diff -ur ./firecracker-control/local.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/firecracker-control/local.go
--- ./firecracker-control/local.go	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/firecracker-control/local.go	2022-02-25 13:37:31.107472996 +0800
@@ -248,42 +248,6 @@
 	return resp, multierror.Append(shimErr, waitErr).ErrorOrNil()
 }
 
-// PauseVM pauses a VM
-func (s *local) PauseVM(ctx context.Context, req *proto.PauseVMRequest) (*empty.Empty, error) {
-	client, err := s.shimFirecrackerClient(ctx, req.VMID)
-	if err != nil {
-		return nil, err
-	}
-
-	defer client.Close()
-
-	resp, err := client.PauseVM(ctx, req)
-	if err != nil {
-		s.logger.WithError(err).Error()
-		return nil, err
-	}
-
-	return resp, nil
-}
-
-// ResumeVM resumes a VM
-func (s *local) ResumeVM(ctx context.Context, req *proto.ResumeVMRequest) (*empty.Empty, error) {
-	client, err := s.shimFirecrackerClient(ctx, req.VMID)
-	if err != nil {
-		return nil, err
-	}
-
-	defer client.Close()
-
-	resp, err := client.ResumeVM(ctx, req)
-	if err != nil {
-		s.logger.WithError(err).Error()
-		return nil, err
-	}
-
-	return resp, nil
-}
-
 func (s *local) waitForShimToExit(ctx context.Context, vmID string) error {
 	socketAddr, err := shim.SocketAddress(ctx, s.containerdAddress, vmID)
 	if err != nil {
@@ -596,3 +560,95 @@
 
 	return nil
 }
+
+// PauseVM Pauses a VM
+func (s *local) PauseVM(ctx context.Context, req *proto.PauseVMRequest) (*empty.Empty, error) {
+	client, err := s.shimFirecrackerClient(ctx, req.VMID)
+	if err != nil {
+		return nil, err
+	}
+
+	defer client.Close()
+
+	resp, err := client.PauseVM(ctx, req)
+	if err != nil {
+		s.logger.WithError(err).Error()
+		return nil, err
+	}
+
+	return resp, nil
+}
+
+// ResumeVM Resumes a VM
+func (s *local) ResumeVM(ctx context.Context, req *proto.ResumeVMRequest) (*empty.Empty, error) {
+	client, err := s.shimFirecrackerClient(ctx, req.VMID)
+	if err != nil {
+		return nil, err
+	}
+
+	defer client.Close()
+
+	resp, err := client.ResumeVM(ctx, req)
+	if err != nil {
+		s.logger.WithError(err).Error()
+		return nil, err
+	}
+
+	return resp, nil
+}
+
+// CreateSnapshot Creates a snapshot of a VM
+func (s *local) CreateSnapshot(ctx context.Context, req *proto.CreateSnapshotRequest) (*empty.Empty, error) {
+	client, err := s.shimFirecrackerClient(ctx, req.VMID)
+	if err != nil {
+		return nil, err
+	}
+
+	defer client.Close()
+
+	resp, err := client.CreateSnapshot(ctx, req)
+	if err != nil {
+		s.logger.WithError(err).Error()
+		return nil, err
+	}
+
+	return resp, nil
+}
+
+// LoadSnapshot Loads a snapshot of a VM
+func (s *local) LoadSnapshot(ctx context.Context, req *proto.LoadSnapshotRequest) (*proto.LoadResponse, error) {
+	client, err := s.shimFirecrackerClient(ctx, req.VMID)
+	if err != nil {
+		return nil, err
+	}
+
+	defer client.Close()
+
+	resp, err := client.LoadSnapshot(ctx, req)
+	if err != nil {
+		s.logger.WithError(err).Error()
+		return nil, err
+	}
+
+	return resp, nil
+}
+
+// Offload Shuts down a VM started through the firecracker go sdk and deletes
+// the corresponding firecracker socket. All of the other resources (shim, other sockets)
+// will persist.
+func (s *local) Offload(ctx context.Context, req *proto.OffloadRequest) (*empty.Empty, error) {
+	client, err := s.shimFirecrackerClient(ctx, req.VMID)
+	if err != nil {
+		return nil, err
+	}
+
+	defer client.Close()
+
+	resp, err := client.Offload(ctx, req)
+	if err != nil {
+		s.logger.WithError(err).Error()
+		return nil, err
+	}
+
+	return resp, nil
+}
diff -ur ./firecracker-control/service.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/firecracker-control/service.go
--- ./firecracker-control/service.go	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/firecracker-control/service.go	2022-02-25 13:37:31.107472996 +0800
@@ -126,3 +126,18 @@
 	log.G(ctx).Debug("Updating balloon device statistics polling interval")
 	return s.local.UpdateBalloonStats(ctx, req)
 }
+
+func (s *service) LoadSnapshot(ctx context.Context, req *proto.LoadSnapshotRequest) (*proto.LoadResponse, error) {
+	log.G(ctx).Debugf("load snapshot request: %+v", req)
+	return s.local.LoadSnapshot(ctx, req)
+}
+
+func (s *service) CreateSnapshot(ctx context.Context, req *proto.CreateSnapshotRequest) (*empty.Empty, error) {
+	log.G(ctx).Debugf("create snapshot request: %+v", req)
+	return s.local.CreateSnapshot(ctx, req)
+}
+
+func (s *service) Offload(ctx context.Context, req *proto.OffloadRequest) (*empty.Empty, error) {
+	log.G(ctx).Debugf("offload request: %+v", req)
+	return s.local.Offload(ctx, req)
+}
Only in .: .git
Only in ./.github: CODEOWNERS
diff -ur ./.github/workflows/build.yaml /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/.github/workflows/build.yaml
--- ./.github/workflows/build.yaml	2022-02-11 11:21:52.609311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/.github/workflows/build.yaml	2022-02-25 13:37:31.095472996 +0800
@@ -11,15 +11,16 @@
     env:
       GO111MODULE: on
 
+    # Intentionally use 18.04 instead of "latest" to
+    # make this build reproducible.
+    runs-on: ubuntu-18.04
+
     strategy:
       matrix:
-        os: ['ubuntu-18.04', 'ubuntu-20.04']
-        go: ['1.13', '1.14', '1.15', '1.16', '1.17']
+        go: ['1.13', '1.14']
       # Build all variants regardless of failures
       fail-fast: false
-
-    name: ${{ matrix.os }} / Go ${{ matrix.go }}
-    runs-on: ${{ matrix.os }}
+    name: Go ${{ matrix.go }}
 
     steps:
       - uses: actions/checkout@v2
@@ -44,16 +45,3 @@
       - run: make
       - run: make lint
       - run: make test
-      - run: |
-          make tidy
-          git diff --exit-code
-        # opencontainers/selinux uses Go 1.16's io/fs package with "go1.16"
-        # build tag. However, since go mod tidy acts as like all build tags
-        # are enabled, the file below included in go mod tidy, even
-        # Go is < 1.16.
-        # https://github.com/opencontainers/selinux/blob/v1.9.1/go-selinux/rchcon.go
-        # https://golang.org/ref/mod
-        if: matrix.go >= '1.16'
-      - run: |
-          make proto
-          git diff --exit-code
diff -ur ./.gitmodules /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/.gitmodules
--- ./.gitmodules	2022-02-11 11:21:52.609311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/.gitmodules	2022-02-25 13:37:31.095472996 +0800
@@ -3,4 +3,4 @@
 	url = https://github.com/opencontainers/runc
 [submodule "firecracker"]
 	path = _submodules/firecracker
-	url = https://github.com/firecracker-microvm/firecracker.git
+	url = https://github.com/ease-lab/firecracker.git
diff -ur ./go.mod /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/go.mod
--- ./go.mod	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/go.mod	2022-02-25 13:37:31.107472996 +0800
@@ -1,57 +1,41 @@
 module github.com/firecracker-microvm/firecracker-containerd
 
 require (
-	github.com/Microsoft/go-winio v0.5.0 // indirect
 	github.com/StackExchange/wmi v0.0.0-20181212234831-e0a55b97c705 // indirect
 	github.com/awslabs/tc-redirect-tap v0.0.0-20200708224642-a0300978797d
-	github.com/bits-and-blooms/bitset v1.2.1 // indirect
-	github.com/containerd/containerd v1.5.9
-	github.com/containerd/continuity v0.2.0 // indirect
+	github.com/containerd/containerd v1.5.2
 	github.com/containerd/fifo v1.0.0
 	github.com/containerd/go-runc v1.0.0
-	github.com/containerd/ttrpc v1.1.0
+	github.com/containerd/ttrpc v1.0.2
 	github.com/containerd/typeurl v1.0.2
 	github.com/containernetworking/cni v0.8.1
 	github.com/containernetworking/plugins v0.9.1
 	github.com/firecracker-microvm/firecracker-go-sdk v0.22.1-0.20210520223842-abd0815b8bf9
 	github.com/go-ole/go-ole v1.2.4 // indirect
 	github.com/gofrs/uuid v3.3.0+incompatible
-	github.com/gogo/googleapis v1.4.1 // indirect
 	github.com/gogo/protobuf v1.3.2
-	github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect
-	github.com/golang/protobuf v1.5.2
-	github.com/google/uuid v1.3.0 // indirect
+	github.com/golang/protobuf v1.4.3
 	github.com/hashicorp/go-multierror v1.1.0
-	github.com/klauspost/compress v1.13.6 // indirect
-	github.com/mdlayher/vsock v1.0.1-0.20220205131902-375f3bbcc363
-	github.com/miekg/dns v1.1.25
-	github.com/opencontainers/runc v1.0.3
-	github.com/opencontainers/runtime-spec v1.0.3-0.20210910115017-0d6cc581aeea
-	github.com/opencontainers/selinux v1.8.5 // indirect
+	github.com/mdlayher/vsock v0.0.0-20190329173812-a92c53d5dcab
+	github.com/miekg/dns v1.1.16
+	github.com/opencontainers/runc v1.0.0-rc93
+	github.com/opencontainers/runtime-spec v1.0.3-0.20200929063507-e6143ca7d51d
 	github.com/pkg/errors v0.9.1
 	github.com/shirou/gopsutil v2.18.12+incompatible
 	github.com/shirou/w32 v0.0.0-20160930032740-bb4de0191aa4 // indirect
-	github.com/sirupsen/logrus v1.8.1
+	github.com/sirupsen/logrus v1.8.0
 	github.com/stretchr/testify v1.6.1
+	github.com/tv42/httpunix v0.0.0-20191220191345-2ba4b9c3382c
 	github.com/vishvananda/netlink v1.1.1-0.20201029203352-d40f9887b852
-	go.opencensus.io v0.23.0 // indirect
-	golang.org/x/net v0.0.0-20211005001312-d4b1ae081e3b // indirect
-	golang.org/x/sync v0.0.0-20210220032951-036812b2e83c
-	golang.org/x/sys v0.0.0-20220204135822-1c1b9b1eba6a
-	golang.org/x/text v0.3.7 // indirect
-	google.golang.org/genproto v0.0.0-20211005153810-c76a74d43a8e // indirect
-	google.golang.org/grpc v1.41.0
+	golang.org/x/sync v0.0.0-20201207232520-09787c993a3a
+	golang.org/x/sys v0.0.0-20210324051608-47abb6519492
+	google.golang.org/grpc v1.34.0
 )
 
 replace (
-	// Pin gPRC-related dependencies as like containerd v1.5.x.
+	// Pin gPRC-related dependencies as like containerd v1.5.1
 	github.com/gogo/googleapis => github.com/gogo/googleapis v1.3.2
 	github.com/golang/protobuf => github.com/golang/protobuf v1.3.5
-
-	// Upgrade mongo-driver before go-openapi packages update the package.
-	go.mongodb.org/mongo-driver => go.mongodb.org/mongo-driver v1.5.1
-
-	// Pin gPRC-related dependencies as like containerd v1.5.x.
 	google.golang.org/genproto => google.golang.org/genproto v0.0.0-20200224152610-e50cd9704f63
 	google.golang.org/grpc => google.golang.org/grpc v1.27.1
 )
diff -ur ./go.sum /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/go.sum
--- ./go.sum	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/go.sum	2022-02-25 13:37:31.107472996 +0800
@@ -1,5 +1,4 @@
 bazil.org/fuse v0.0.0-20160811212531-371fbbdaa898/go.mod h1:Xbm+BRKSBEpa4q4hTSxohYNQpsxXPbPry4JJWOB3LB8=
-bazil.org/fuse v0.0.0-20200407214033-5883e5a4b512/go.mod h1:FbcW6z/2VytnFDhZfumh8Ss8zxHE6qpMP5sHTRe0EaM=
 cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
 cloud.google.com/go v0.38.0/go.mod h1:990N+gfupTy94rShfmMCWGDn0LpTmnzTp2qbd1dvSRU=
 cloud.google.com/go v0.44.1/go.mod h1:iSa0KzasP4Uvy3f1mN/7PiObzGgflwredwwASm/v6AU=
@@ -44,17 +43,14 @@
 github.com/Microsoft/go-winio v0.4.17-0.20210211115548-6eac466e5fa3/go.mod h1:JPGBdM1cNvN/6ISo+n8V5iA4v8pBzdOpzfwIujj1a84=
 github.com/Microsoft/go-winio v0.4.17-0.20210324224401-5516f17a5958/go.mod h1:JPGBdM1cNvN/6ISo+n8V5iA4v8pBzdOpzfwIujj1a84=
 github.com/Microsoft/go-winio v0.4.17/go.mod h1:JPGBdM1cNvN/6ISo+n8V5iA4v8pBzdOpzfwIujj1a84=
-github.com/Microsoft/go-winio v0.5.0 h1:Elr9Wn+sGKPlkaBvwu4mTrxtmOp3F3yV9qhaHbXGjwU=
-github.com/Microsoft/go-winio v0.5.0/go.mod h1:JPGBdM1cNvN/6ISo+n8V5iA4v8pBzdOpzfwIujj1a84=
 github.com/Microsoft/hcsshim v0.8.6/go.mod h1:Op3hHsoHPAvb6lceZHDtd9OkTew38wNoXnJs8iY7rUg=
 github.com/Microsoft/hcsshim v0.8.7-0.20190325164909-8abdbb8205e4/go.mod h1:Op3hHsoHPAvb6lceZHDtd9OkTew38wNoXnJs8iY7rUg=
 github.com/Microsoft/hcsshim v0.8.7/go.mod h1:OHd7sQqRFrYd3RmSgbgji+ctCwkbq2wbEYNSzOYtcBQ=
 github.com/Microsoft/hcsshim v0.8.9/go.mod h1:5692vkUqntj1idxauYlpoINNKeqCiG6Sg38RRsjT5y8=
 github.com/Microsoft/hcsshim v0.8.14/go.mod h1:NtVKoYxQuTLx6gEq0L96c9Ju4JbRJ4nY2ow3VK6a9Lg=
 github.com/Microsoft/hcsshim v0.8.15/go.mod h1:x38A4YbHbdxJtc0sF6oIz+RG0npwSCAvn69iY6URG00=
+github.com/Microsoft/hcsshim v0.8.16 h1:8/auA4LFIZFTGrqfKhGBSXwM6/4X1fHa/xniyEHu8ac=
 github.com/Microsoft/hcsshim v0.8.16/go.mod h1:o5/SZqmR7x9JNKsW3pu+nqHm0MF8vbA+VxGOoXdC600=
-github.com/Microsoft/hcsshim v0.8.23 h1:47MSwtKGXet80aIn+7h4YI6fwPmwIghAnsx2aOUrG2M=
-github.com/Microsoft/hcsshim v0.8.23/go.mod h1:4zegtUJth7lAvFyc6cH2gGQ5B3OFQim01nnU2M8jKDg=
 github.com/Microsoft/hcsshim/test v0.0.0-20201218223536-d3e5debf77da/go.mod h1:5hlzMzRKMLyo42nCZ9oml8AdTlq/0cvIaBv6tK1RehU=
 github.com/Microsoft/hcsshim/test v0.0.0-20210227013316-43a75bb4edd3/go.mod h1:mw7qgWloBUl75W/gVH3cQszUg1+gUITj7D6NY7ywVnY=
 github.com/NYTimes/gziphandler v0.0.0-20170623195520-56545f4a5d46/go.mod h1:3wb06e3pkSAbeQ52E9H9iFoQsEEwGN64994WTCIhntQ=
@@ -65,7 +61,6 @@
 github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 h1:d+Bc7a5rLufV/sSk/8dngufqelfh6jnri85riMAaF/M=
 github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578/go.mod h1:uGdkoq3SwY9Y+13GIhn11/XLaGBb4BfwItxLd5jeuXE=
 github.com/Shopify/logrus-bugsnag v0.0.0-20171204204709-577dee27f20d/go.mod h1:HI8ITrYtUY+O+ZhtlqUnD8+KwNPOyugEhfP9fdUIaEQ=
-github.com/StackExchange/wmi v0.0.0-20181212234831-e0a55b97c705 h1:UUppSQnhf4Yc6xGxSkoQpPhb7RVzuv5Nb1mwJ5VId9s=
 github.com/StackExchange/wmi v0.0.0-20181212234831-e0a55b97c705/go.mod h1:3eOhrUMpNV+6aFIbp5/iudMxNCF27Vw2OZgy4xEx0Fg=
 github.com/agnivade/levenshtein v1.0.1/go.mod h1:CURSv5d9Uaml+FovSIICkLbAUZ9S4RqaHDIsdSBg7lM=
 github.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=
@@ -91,9 +86,6 @@
 github.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=
 github.com/bgentry/speakeasy v0.1.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=
 github.com/bitly/go-simplejson v0.5.0/go.mod h1:cXHtHw4XUPsvGaxgjIAn8PhEWG9NfngEKAMDJEczWVA=
-github.com/bits-and-blooms/bitset v1.2.0/go.mod h1:gIdJ4wp64HaoK2YrL1Q5/N7Y16edYb8uY+O0FJTyyDA=
-github.com/bits-and-blooms/bitset v1.2.1 h1:M+/hrU9xlMp7t4TyTDQW97d3tRPVuKFC6zBEK16QnXY=
-github.com/bits-and-blooms/bitset v1.2.1/go.mod h1:gIdJ4wp64HaoK2YrL1Q5/N7Y16edYb8uY+O0FJTyyDA=
 github.com/blang/semver v3.1.0+incompatible/go.mod h1:kRBLl5iJ+tD4TcOOxsy/0fnwebNt5EWlYSAyrTnjyyk=
 github.com/blang/semver v3.5.1+incompatible/go.mod h1:kRBLl5iJ+tD4TcOOxsy/0fnwebNt5EWlYSAyrTnjyyk=
 github.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869/go.mod h1:Ekp36dRnpXw/yCqJaO+ZrUyxD+3VXMFFr56k5XYrpB4=
@@ -102,23 +94,20 @@
 github.com/bugsnag/bugsnag-go v0.0.0-20141110184014-b1d153021fcd/go.mod h1:2oa8nejYd4cQ/b0hMIopN0lCRxU0bueqREvZLWFrtK8=
 github.com/bugsnag/osext v0.0.0-20130617224835-0dd3f918b21b/go.mod h1:obH5gd0BsqsP2LwDJ9aOkm/6J86V6lyAXCoQWGw3K50=
 github.com/bugsnag/panicwrap v0.0.0-20151223152923-e2c28503fcd0/go.mod h1:D/8v3kj0zr8ZAKg1AQ6crr+5VwKN5eIywRkfhyM/+dE=
-github.com/cenkalti/backoff/v4 v4.1.1/go.mod h1:scbssz8iZGpm3xbr14ovlUdkxfGXNInqkPWOWmG2CLw=
 github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
 github.com/cespare/xxhash v1.1.0 h1:a6HrQnmkObjyL+Gs60czilIUGqrzKutQD6XZog3p+ko=
 github.com/cespare/xxhash v1.1.0/go.mod h1:XrSqR1VqqWfGrhpAt58auRo0WTKS1nRRg3ghfAqPWnc=
 github.com/cespare/xxhash/v2 v2.1.1 h1:6MnRN8NT7+YBpUIWxHtefFZOKTAPgGjpQSxqLNn0+qY=
 github.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
 github.com/checkpoint-restore/go-criu/v4 v4.1.0/go.mod h1:xUQBLp4RLc5zJtWY++yjOoMoB5lihDt7fai+75m+rGw=
-github.com/checkpoint-restore/go-criu/v5 v5.0.0/go.mod h1:cfwC0EG7HMUenopBsUf9d89JlCLQIfgVcNsNN0t6T2M=
 github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=
 github.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=
 github.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=
 github.com/cilium/ebpf v0.0.0-20200110133405-4032b1d8aae3/go.mod h1:MA5e5Lr8slmEg9bt0VpxxWqJlO4iwu3FBdHUzV7wQVg=
 github.com/cilium/ebpf v0.0.0-20200702112145-1c8d4c9ef775/go.mod h1:7cR51M8ViRLIdUjrmSXlK9pkrsDlLHbO8jiB8X8JnOc=
 github.com/cilium/ebpf v0.2.0/go.mod h1:To2CFviqOWL/M0gIMsvSMlqe7em/l1ALkX1PyjrX2Qs=
+github.com/cilium/ebpf v0.4.0 h1:QlHdikaxALkqWasW8hAC1mfR0jdmvbfaBdBPFmRSglA=
 github.com/cilium/ebpf v0.4.0/go.mod h1:4tRaxcgiL706VnOzHOdBlY8IEAIdxINsQBcU4xJJXRs=
-github.com/cilium/ebpf v0.6.2 h1:iHsfF/t4aW4heW2YKfeHrVPGdtYTL4C4KocpM8KTSnI=
-github.com/cilium/ebpf v0.6.2/go.mod h1:4tRaxcgiL706VnOzHOdBlY8IEAIdxINsQBcU4xJJXRs=
 github.com/cockroachdb/datadriven v0.0.0-20190809214429-80d97fb3cbaa/go.mod h1:zn76sxSg3SzpJ0PPJaLDCu+Bu0Lg3sKTORVIj19EIF8=
 github.com/containerd/aufs v0.0.0-20200908144142-dab0cbea06f4/go.mod h1:nukgQABAEopAHvB6j7cnP5zJ+/3aVcE7hCYqvIwAHyE=
 github.com/containerd/aufs v0.0.0-20201003224125-76a6863f2989/go.mod h1:AkGGQs9NM2vtYHaUen+NljV0/baGCAPELGm2q9ZXpWU=
@@ -149,22 +138,20 @@
 github.com/containerd/containerd v1.4.0-beta.2.0.20200729163537-40b22ef07410/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=
 github.com/containerd/containerd v1.4.1/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=
 github.com/containerd/containerd v1.4.3/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=
-github.com/containerd/containerd v1.4.9/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=
 github.com/containerd/containerd v1.5.0-beta.1/go.mod h1:5HfvG1V2FsKesEGQ17k5/T7V960Tmcumvqn8Mc+pCYQ=
 github.com/containerd/containerd v1.5.0-beta.3/go.mod h1:/wr9AVtEM7x9c+n0+stptlo/uBBoBORwEx6ardVcmKU=
 github.com/containerd/containerd v1.5.0-beta.4/go.mod h1:GmdgZd2zA2GYIBZ0w09ZvgqEq8EfBp/m3lcVZIvPHhI=
 github.com/containerd/containerd v1.5.0-rc.0/go.mod h1:V/IXoMqNGgBlabz3tHD2TWDoTJseu1FGOKuoA4nNb2s=
-github.com/containerd/containerd v1.5.9 h1:rs6Xg1gtIxaeyG+Smsb/0xaSDu1VgFhOCKBXxMxbsF4=
-github.com/containerd/containerd v1.5.9/go.mod h1:fvQqCfadDGga5HZyn3j4+dx56qj2I9YwBrlSdalvJYQ=
+github.com/containerd/containerd v1.5.2 h1:MG/Bg1pbmMb61j3wHCFWPxESXHieiKr2xG64px/k8zQ=
+github.com/containerd/containerd v1.5.2/go.mod h1:0DOxVqwDy2iZvrZp2JUx/E+hS0UNTVn7dJnIOwtYR4g=
 github.com/containerd/continuity v0.0.0-20190426062206-aaeac12a7ffc/go.mod h1:GL3xCUCBDV3CZiTSEKksMWbLE66hEyuu9qyDOOqM47Y=
 github.com/containerd/continuity v0.0.0-20190815185530-f2a389ac0a02/go.mod h1:GL3xCUCBDV3CZiTSEKksMWbLE66hEyuu9qyDOOqM47Y=
 github.com/containerd/continuity v0.0.0-20191127005431-f65d91d395eb/go.mod h1:GL3xCUCBDV3CZiTSEKksMWbLE66hEyuu9qyDOOqM47Y=
 github.com/containerd/continuity v0.0.0-20200710164510-efbc4488d8fe/go.mod h1:cECdGN1O8G9bgKTlLhuPJimka6Xb/Gg7vYzCTNVxhvo=
 github.com/containerd/continuity v0.0.0-20201208142359-180525291bb7/go.mod h1:kR3BEg7bDFaEddKm54WSmrol1fKWDU1nKYkgrcgZT7Y=
 github.com/containerd/continuity v0.0.0-20210208174643-50096c924a4e/go.mod h1:EXlVlkqNba9rJe3j7w3Xa924itAMLgZH4UD/Q4PExuQ=
+github.com/containerd/continuity v0.1.0 h1:UFRRY5JemiAhPZrr/uE0n8fMTLcZsUvySPr1+D7pgr8=
 github.com/containerd/continuity v0.1.0/go.mod h1:ICJu0PwR54nI0yPEnJ6jcS+J7CZAUXrLh8lPo2knzsM=
-github.com/containerd/continuity v0.2.0 h1:j/9Wnn+hrEWjLvHuIxUU1YI5JjEjVlT2AA68cse9rwY=
-github.com/containerd/continuity v0.2.0/go.mod h1:wCYX+dRqZdImhGucXOqTQn05AhX6EUDaGEMUzTFFpLg=
 github.com/containerd/fifo v0.0.0-20180307165137-3d5202aec260/go.mod h1:ODA38xgv3Kuk8dQz2ZQXpnv/UZZUHUCL7pnLehbXgQI=
 github.com/containerd/fifo v0.0.0-20190226154929-a9fb20d87448/go.mod h1:ODA38xgv3Kuk8dQz2ZQXpnv/UZZUHUCL7pnLehbXgQI=
 github.com/containerd/fifo v0.0.0-20191213151349-ff969a566b00/go.mod h1:jPQ2IAeZRCYxpS/Cm1495vGFww6ecHmMk1YJH2Q5ln0=
@@ -185,19 +172,16 @@
 github.com/containerd/imgcrypt v1.0.1/go.mod h1:mdd8cEPW7TPgNG4FpuP3sGBiQ7Yi/zak9TYCG3juvb0=
 github.com/containerd/imgcrypt v1.0.4-0.20210301171431-0ae5c75f59ba/go.mod h1:6TNsg0ctmizkrOgXRNQjAPFWpMYRWuiB6dSF4Pfa5SA=
 github.com/containerd/imgcrypt v1.1.1-0.20210312161619-7ed62a527887/go.mod h1:5AZJNI6sLHJljKuI9IHnw1pWqo/F0nGDOuR9zgTs7ow=
-github.com/containerd/imgcrypt v1.1.1 h1:LBwiTfoUsdiEGAR1TpvxE+Gzt7469oVu87iR3mv3Byc=
 github.com/containerd/imgcrypt v1.1.1/go.mod h1:xpLnwiQmEUJPvQoAapeb2SNCxz7Xr6PJrXQb0Dpc4ms=
 github.com/containerd/nri v0.0.0-20201007170849-eb1350a75164/go.mod h1:+2wGSDGFYfE5+So4M5syatU0N0f0LbWpuqyMi4/BE8c=
 github.com/containerd/nri v0.0.0-20210316161719-dbaa18c31c14/go.mod h1:lmxnXF6oMkbqs39FiCt1s0R2HSMhcLel9vNL3m4AaeY=
-github.com/containerd/nri v0.1.0 h1:6QioHRlThlKh2RkRTR4kIT3PKAcrLo3gIWnjkM4dQmQ=
 github.com/containerd/nri v0.1.0/go.mod h1:lmxnXF6oMkbqs39FiCt1s0R2HSMhcLel9vNL3m4AaeY=
 github.com/containerd/ttrpc v0.0.0-20190828154514-0e0f228740de/go.mod h1:PvCDdDGpgqzQIzDW1TphrGLssLDZp2GuS+X5DkEJB8o=
 github.com/containerd/ttrpc v0.0.0-20190828172938-92c8520ef9f8/go.mod h1:PvCDdDGpgqzQIzDW1TphrGLssLDZp2GuS+X5DkEJB8o=
 github.com/containerd/ttrpc v0.0.0-20191028202541-4f1b8fe65a5c/go.mod h1:LPm1u0xBw8r8NOKoOdNMeVHSawSsltak+Ihv+etqsE8=
 github.com/containerd/ttrpc v1.0.1/go.mod h1:UAxOpgT9ziI0gJrmKvgcZivgxOp8iFPSk8httJEt98Y=
+github.com/containerd/ttrpc v1.0.2 h1:2/O3oTZN36q2xRolk0a2WWGgh7/Vf/liElg5hFYLX9U=
 github.com/containerd/ttrpc v1.0.2/go.mod h1:UAxOpgT9ziI0gJrmKvgcZivgxOp8iFPSk8httJEt98Y=
-github.com/containerd/ttrpc v1.1.0 h1:GbtyLRxb0gOLR0TYQWt3O6B0NvT8tMdorEHqIQo/lWI=
-github.com/containerd/ttrpc v1.1.0/go.mod h1:XX4ZTnoOId4HklF4edwc4DcqskFZuvXB1Evzy5KFQpQ=
 github.com/containerd/typeurl v0.0.0-20180627222232-a93fcdb778cd/go.mod h1:Cm3kwCdlkCfMSHURc+r6fwoGH6/F1hH3S4sg0rLFWPc=
 github.com/containerd/typeurl v0.0.0-20190911142611-5eb25027c9fd/go.mod h1:GeKYzf2pQcqv7tJ0AoCuuhtnqhva5LNU3U+OyKxxJpk=
 github.com/containerd/typeurl v1.0.1/go.mod h1:TB1hUtrpaiO88KEK56ijojHS1+NeF0izUACaJW2mdXg=
@@ -218,7 +202,6 @@
 github.com/containernetworking/plugins v0.9.1/go.mod h1:xP/idU2ldlzN6m4p5LmGiwRDjeJr6FLK6vuiUwoH7P8=
 github.com/containers/ocicrypt v1.0.1/go.mod h1:MeJDzk1RJHv89LjsH0Sp5KTY3ZYkjXO/C+bKAeWFIrc=
 github.com/containers/ocicrypt v1.1.0/go.mod h1:b8AOe0YR67uU8OqfVNcznfFpAzu3rdgUV4GP9qXPfu4=
-github.com/containers/ocicrypt v1.1.1 h1:prL8l9w3ntVqXvNH1CiNn5ENjcCnr38JqpSyvKKB4GI=
 github.com/containers/ocicrypt v1.1.1/go.mod h1:Dm55fwWm1YZAjYRaJ94z2mfZikIyIN4B0oB3dj3jFxY=
 github.com/coreos/bbolt v1.3.2/go.mod h1:iRUV2dpdMOn7Bo10OQBFzIJO9kkE559Wcmn+qkEiiKk=
 github.com/coreos/etcd v3.3.10+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=
@@ -232,9 +215,8 @@
 github.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e h1:Wf6HqHfScWJN9/ZjdUKyjop4mf3Qdd+1TvvltAvM3m8=
 github.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=
 github.com/coreos/go-systemd/v22 v22.0.0/go.mod h1:xO0FLkIi5MaZafQlIrOotqXZ90ih+1atmu1JpKERPPk=
+github.com/coreos/go-systemd/v22 v22.1.0 h1:kq/SbG2BCKLkDKkjQf5OWwKWUKj1lgs3lFI4PxnR5lg=
 github.com/coreos/go-systemd/v22 v22.1.0/go.mod h1:xO0FLkIi5MaZafQlIrOotqXZ90ih+1atmu1JpKERPPk=
-github.com/coreos/go-systemd/v22 v22.3.2 h1:D9/bQk5vlXQFZ6Kwuu6zaiXJ9oTPe68++AzAJc1DzSI=
-github.com/coreos/go-systemd/v22 v22.3.2/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=
 github.com/coreos/pkg v0.0.0-20160727233714-3ac0863d7acf/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=
 github.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=
 github.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=
@@ -268,15 +250,12 @@
 github.com/docker/go-units v0.4.0 h1:3uh0PgVws3nIA0Q+MwDC8yjEPf9zjRfZZWXZYDct3Tw=
 github.com/docker/go-units v0.4.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=
 github.com/docker/libtrust v0.0.0-20150114040149-fa567046d9b1/go.mod h1:cyGadeNEkKy96OOhEzfZl+yxihPEzKnqJwvfuSUqbZE=
-github.com/docker/spdystream v0.0.0-20160310174837-449fdfce4d96 h1:cenwrSVm+Z7QLSV/BsnenAOcDXdX4cMv4wP0B/5QbPg=
 github.com/docker/spdystream v0.0.0-20160310174837-449fdfce4d96/go.mod h1:Qh8CwZgvJUkLughtfhJv5dyTYa91l1fOUCrgjqmcifM=
 github.com/docopt/docopt-go v0.0.0-20180111231733-ee0de3bc6815/go.mod h1:WwZ+bS3ebgob9U8Nd0kOddGdZWjyMGR8Wziv+TBNwSE=
 github.com/dustin/go-humanize v0.0.0-20171111073723-bb3d318650d4/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=
 github.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=
-github.com/elazarl/goproxy v0.0.0-20180725130230-947c36da3153 h1:yUdfgN0XgIJw7foRItutHYUIhlcKzcSf5vDpdhQAKTc=
 github.com/elazarl/goproxy v0.0.0-20180725130230-947c36da3153/go.mod h1:/Zj4wYkgs4iZTTu3o/KG3Itv/qCCa8VVMlb3i9OVuzc=
 github.com/emicklei/go-restful v0.0.0-20170410110728-ff4f55a20633/go.mod h1:otzb+WCGbkyDHkqmQmT5YD2WR4BBwUdeQoFo8l/7tVs=
-github.com/emicklei/go-restful v2.9.5+incompatible h1:spTtZBk5DYEvbxMVutUuTyh1Ao2r4iyvLdACqsl/Ljk=
 github.com/emicklei/go-restful v2.9.5+incompatible/go.mod h1:otzb+WCGbkyDHkqmQmT5YD2WR4BBwUdeQoFo8l/7tVs=
 github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
@@ -285,10 +264,8 @@
 github.com/firecracker-microvm/firecracker-go-sdk v0.22.1-0.20210520223842-abd0815b8bf9 h1:IKjNicWBHpNyJ/vWO+yPYjFQ0ma2W6+hQrGkNGSzsIQ=
 github.com/firecracker-microvm/firecracker-go-sdk v0.22.1-0.20210520223842-abd0815b8bf9/go.mod h1:Dbh2OFp/p0Obqp7An+3ktnfC6/a5DKUkMQ5zA/Qmb+0=
 github.com/form3tech-oss/jwt-go v3.2.2+incompatible/go.mod h1:pbq4aXjuKjdthFRnoDwaVPLA+WlJuPGy+QneDUgJi2k=
-github.com/frankban/quicktest v1.11.3 h1:8sXhOn0uLys67V8EsXLc6eszDs8VXWxL3iRvebPhedY=
 github.com/frankban/quicktest v1.11.3/go.mod h1:wRf/ReqHper53s+kmmSZizM8NamnL3IM0I9ntUbOk+k=
 github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
-github.com/fsnotify/fsnotify v1.4.9 h1:hsms1Qyu0jgnwNXIxa+/V/PDsU6CfLf6CNO8H7IWoS4=
 github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=
 github.com/fullsailor/pkcs7 v0.0.0-20190404230743-d7302db945fa/go.mod h1:KnogPXtdwXqoenmZCw6S+25EAm2MkxbG0deNDu4cbSA=
 github.com/garyburd/redigo v0.0.0-20150301180006-535138d7bcd7/go.mod h1:NR3MbYisc3/PwhQ00EMzDiPmrwpPxAn5GI05/YaO1SY=
@@ -305,9 +282,7 @@
 github.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=
 github.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=
 github.com/go-logr/logr v0.1.0/go.mod h1:ixOQHD9gLJUVQQ2ZOR7zLEifBX6tGkNJF4QyIY7sIas=
-github.com/go-logr/logr v0.2.0 h1:QvGt2nLcHH0WK9orKa+ppBPAxREcH364nPUedEpK0TY=
 github.com/go-logr/logr v0.2.0/go.mod h1:z6/tIYblkpsD+a4lm/fGIIU9mZ+XfAiaFtq7xTgseGU=
-github.com/go-ole/go-ole v1.2.4 h1:nNBDSCOigTSiarFpYE9J/KtEA1IOW4CNeqT9TQDqCxI=
 github.com/go-ole/go-ole v1.2.4/go.mod h1:XCwSNxSkXRo4vlyPy93sltvi/qJq0jqQhjqQNIwKuxM=
 github.com/go-openapi/analysis v0.0.0-20180825180245-b006789cd277/go.mod h1:k70tL6pCuVxPJOHXQ+wIac1FUrvNkHolPie/cLEU6hI=
 github.com/go-openapi/analysis v0.17.0/go.mod h1:IowGgpVeD0vNm45So8nr+IcQ3pxVtpRoBWb8PVZO0ik=
@@ -410,9 +385,8 @@
 github.com/godbus/dbus v0.0.0-20180201030542-885f9cc04c9c/go.mod h1:/YcGZj5zSblfDWMMoOzV4fas9FZnQYTkDnsGvmh2Grw=
 github.com/godbus/dbus v0.0.0-20190422162347-ade71ed3457e h1:BWhy2j3IXJhjCbC68FptL43tDKIq8FladmaTs3Xs7Z8=
 github.com/godbus/dbus v0.0.0-20190422162347-ade71ed3457e/go.mod h1:bBOAhwG1umN6/6ZUMtDFBMQR8jRg9O75tm9K00oMsK4=
+github.com/godbus/dbus/v5 v5.0.3 h1:ZqHaoEF7TBzh4jzPmqVhE/5A1z9of6orkAe5uHoAeME=
 github.com/godbus/dbus/v5 v5.0.3/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=
-github.com/godbus/dbus/v5 v5.0.4 h1:9349emZab16e7zQvpmsbtjc18ykshndd8y2PG3sgJbA=
-github.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=
 github.com/gofrs/uuid v3.3.0+incompatible h1:8K4tyRfvU1CYPgJsveYFQMhpFd/wXNM7iK6rR7UHz84=
 github.com/gofrs/uuid v3.3.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=
 github.com/gogo/googleapis v1.3.2 h1:kX1es4djPJrsDhY7aZKJy7aZasdcB5oSOEphMjSB53c=
@@ -424,15 +398,12 @@
 github.com/gogo/protobuf v1.3.1/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=
 github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
 github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
-github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=
 github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
 github.com/golang/groupcache v0.0.0-20160516000752-02826c3e7903/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
 github.com/golang/groupcache v0.0.0-20190129154638-5b532d6fd5ef/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
 github.com/golang/groupcache v0.0.0-20190702054246-869f871628b6/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
 github.com/golang/groupcache v0.0.0-20191227052852-215e87163ea7/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
 github.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
-github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=
-github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
 github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
 github.com/golang/mock v1.2.0/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
 github.com/golang/mock v1.3.1/go.mod h1:sBzyDLLjw3U8JLTeZvSv8jJB+tU5PVekmnlKIyFUx0Y=
@@ -450,14 +421,8 @@
 github.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
-github.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
-github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
-github.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
-github.com/google/go-cmp v0.5.7 h1:81/ik6ipDQS2aGcBfIN5dHDB36BwrStyeAQquSYCV4o=
-github.com/google/go-cmp v0.5.7/go.mod h1:n+brtR0CgQNWTVd5ZUFpTBC8YFBDLK/h/bpaJ8/DtOE=
 github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
-github.com/google/gofuzz v1.1.0 h1:Hsa8mG0dQ46ij8Sl2AYJDUv1oA9/d6Vk+3LG99Oe02g=
 github.com/google/gofuzz v1.1.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
 github.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=
 github.com/google/pprof v0.0.0-20181206194817-3ea8567a2e57/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=
@@ -469,9 +434,8 @@
 github.com/google/uuid v1.0.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
+github.com/google/uuid v1.2.0 h1:qJYtXnJRWmpe7m/3XlyhrsLrEURqHRM2kxzoxXqyUDs=
 github.com/google/uuid v1.2.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
-github.com/google/uuid v1.3.0 h1:t6JiXgmwXMjEs8VusXIJk2BXHsn+wx8BZdTaoZ5fu7I=
-github.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=
 github.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=
 github.com/googleapis/gnostic v0.4.1/go.mod h1:LRhVm6pbyptWbWbuZ38d1eyptfvIytN3ir6b65WBswg=
@@ -503,9 +467,8 @@
 github.com/imdario/mergo v0.3.5/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=
 github.com/imdario/mergo v0.3.8/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=
 github.com/imdario/mergo v0.3.10/go.mod h1:jmQim1M+e3UYxmgPu/WyfjB3N3VflVyUjjjwH0dnCYA=
+github.com/imdario/mergo v0.3.11 h1:3tnifQM4i+fbajXKBHXWEH+KvNHqojZ778UH75j3bGA=
 github.com/imdario/mergo v0.3.11/go.mod h1:jmQim1M+e3UYxmgPu/WyfjB3N3VflVyUjjjwH0dnCYA=
-github.com/imdario/mergo v0.3.12 h1:b6R2BslTbIEToALKP7LxUvijTsNI9TAe80pLWN2g/HU=
-github.com/imdario/mergo v0.3.12/go.mod h1:jmQim1M+e3UYxmgPu/WyfjB3N3VflVyUjjjwH0dnCYA=
 github.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=
 github.com/j-keck/arping v0.0.0-20160618110441-2cf9dc699c56/go.mod h1:ymszkNOg6tORTn+6F6j+Jc8TOr5osrynvN6ivFWZ2GA=
 github.com/jmespath/go-jmespath v0.0.0-20160202185014-0b12d6b521d8/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=
@@ -518,7 +481,6 @@
 github.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=
 github.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=
 github.com/json-iterator/go v1.1.7/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
-github.com/json-iterator/go v1.1.10 h1:Kz6Cvnvv2wGdaG/V8yMvfkmNiXq9Ya2KUv4rouJJr68=
 github.com/json-iterator/go v1.1.10/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
 github.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=
 github.com/jstemmer/go-junit-report v0.9.1/go.mod h1:Brl9GWCQeLvo8nXZwPNNblvFj/XSXhF0NWZEnDohbsk=
@@ -532,22 +494,20 @@
 github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=
 github.com/klauspost/compress v1.9.5/go.mod h1:RyIbtBH6LamlWaDj8nUwkbUhJ87Yi3uG0guNDohfE1A=
 github.com/klauspost/compress v1.11.3/go.mod h1:aoV0uJVorq1K+umq18yTdKaF57EivdYsUV+/s2qKfXs=
+github.com/klauspost/compress v1.11.13 h1:eSvu8Tmq6j2psUJqJrLcWH6K3w5Dwc+qipbaA6eVEN4=
 github.com/klauspost/compress v1.11.13/go.mod h1:aoV0uJVorq1K+umq18yTdKaF57EivdYsUV+/s2qKfXs=
-github.com/klauspost/compress v1.13.6 h1:P76CopJELS0TiO2mebmnzgWaajssP/EszplttgQxcgc=
-github.com/klauspost/compress v1.13.6/go.mod h1:/3/Vjq9QcHkK5uEr5lBEmyoZ1iFhe47etQ6QUkpK6sk=
 github.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=
 github.com/konsorten/go-windows-terminal-sequences v1.0.2/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=
 github.com/konsorten/go-windows-terminal-sequences v1.0.3/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=
 github.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=
 github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
 github.com/kr/pretty v0.2.0/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=
-github.com/kr/pretty v0.2.1 h1:Fmg33tUaq4/8ym9TJN1x7sLJnHVwhP33CNkpYV/7rwI=
 github.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=
 github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
 github.com/kr/pty v1.1.5/go.mod h1:9r2w37qlBe7rQ6e1fg1S/9xpWHSnaqNdHD3WcMdbPDA=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
-github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
 github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
+github.com/magefile/mage v1.10.0 h1:3HiXzCUY12kh9bIuyXShaVe529fJfyqoVM42o/uom2g=
 github.com/magefile/mage v1.10.0/go.mod h1:z5UZb/iS3GoOSn0JgWuiw7dxlurVYTu+/jHXqQg881A=
 github.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=
 github.com/mailru/easyjson v0.0.0-20180823135443-60711f1a8329/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=
@@ -568,13 +528,10 @@
 github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=
 github.com/matttproud/golang_protobuf_extensions v1.0.2-0.20181231171920-c182affec369 h1:I0XW9+e1XWDxdcEniV4rQAIOPUGDq67JSCiRCgGCZLI=
 github.com/matttproud/golang_protobuf_extensions v1.0.2-0.20181231171920-c182affec369/go.mod h1:BSXmuO+STAnVfrANrmjBb36TMTDstsz7MSK+HVaYKv4=
-github.com/mdlayher/socket v0.1.2-0.20220205131734-36a46618b35a h1:kenKn9KmGI1nE4a6aWBnCDwg+eXXFALbbfORQL2Gm0o=
-github.com/mdlayher/socket v0.1.2-0.20220205131734-36a46618b35a/go.mod h1:QLlNPkFR88mRUNQIzRBMfXxwKal8H7u1h3bL1CV+f0E=
-github.com/mdlayher/vsock v1.0.1-0.20220205131902-375f3bbcc363 h1:KNFDl9t9uSOS+2Vm4/f4JHscZMv3Eb6TG9f5mjo1hs0=
-github.com/mdlayher/vsock v1.0.1-0.20220205131902-375f3bbcc363/go.mod h1:4M4Oe/yJ9RyKzRgA7DNVvNDyFni1n7K5CkWWemPEA+E=
-github.com/miekg/dns v1.1.25 h1:dFwPR6SfLtrSwgDcIq2bcU/gVutB4sNApq2HBdqcakg=
-github.com/miekg/dns v1.1.25/go.mod h1:bPDLeHnStXmXAq1m/Ch/hvfNHr14JKNPMBo3VZKjuso=
-github.com/miekg/pkcs11 v1.0.3 h1:iMwmD7I5225wv84WxIG/bmxz9AXjWvTWIbM/TYHvWtw=
+github.com/mdlayher/vsock v0.0.0-20190329173812-a92c53d5dcab h1:E28+3hGUcb3qollqPbcWwUeQqHI7DtBqQ2m9WG3zOpk=
+github.com/mdlayher/vsock v0.0.0-20190329173812-a92c53d5dcab/go.mod h1:D7ATxm5dbu8KgVaJHLbtcFfkt6/ERTpnCK7kVpGOqsk=
+github.com/miekg/dns v1.1.16 h1:iMEQ/IVHxPTtx2Q07JP/k4CKRvSjiAZjZ0hnhgYEDmE=
+github.com/miekg/dns v1.1.16/go.mod h1:YNV562EiewvSmpCB6/W4c6yqjK7Z+M/aIS1JHsIVeg8=
 github.com/miekg/pkcs11 v1.0.3/go.mod h1:XsNlhZGX73bx86s2hdc/FuaLm2CPZJemRLMA+WTFxgs=
 github.com/mistifyio/go-zfs v2.1.2-0.20190413222219-f784269be439+incompatible/go.mod h1:8AuVvqP/mXw1px98n46wfvcGfQ4ci2FwoAjKYxuo3Z4=
 github.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=
@@ -587,14 +544,11 @@
 github.com/moby/sys/mountinfo v0.4.0/go.mod h1:rEr8tzG/lsIZHBtN/JjGG+LMYx9eXgW2JI+6q0qou+A=
 github.com/moby/sys/mountinfo v0.4.1 h1:1O+1cHA1aujwEwwVMa2Xm2l+gIpUHyd3+D+d7LZh1kM=
 github.com/moby/sys/mountinfo v0.4.1/go.mod h1:rEr8tzG/lsIZHBtN/JjGG+LMYx9eXgW2JI+6q0qou+A=
-github.com/moby/sys/symlink v0.1.0 h1:MTFZ74KtNI6qQQpuBxU+uKCim4WtOMokr03hCfJcazE=
 github.com/moby/sys/symlink v0.1.0/go.mod h1:GGDODQmbFOjFsXvfLVn3+ZRxkch54RkSiGqsZeMYowQ=
 github.com/moby/term v0.0.0-20200312100748-672ec06f55cd/go.mod h1:DdlQx2hp0Ss5/fLikoLlEeIYiATotOjgB//nb973jeo=
 github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
-github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
 github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
 github.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=
-github.com/modern-go/reflect2 v1.0.1 h1:9f412s+6RmYXLWZSEzVVgPGK7C2PphHj5RJrvfx9AWI=
 github.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=
 github.com/montanaflynn/stats v0.0.0-20171201202039-1bf9dbcd8cbe/go.mod h1:wL8QJuTMNUDYhXwkmfOly8iTdp5TEcJFWZD2D7SIkUc=
 github.com/mrunalp/fileutils v0.5.0/go.mod h1:M1WthSahJixYnrXQl/DFQuteStB1weuxD2QJNHXfbSQ=
@@ -603,9 +557,7 @@
 github.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=
 github.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f/go.mod h1:ZdcZmHo+o7JKHSa8/e818NopupXU1YMK5fe1lsApnBw=
 github.com/ncw/swift v1.0.47/go.mod h1:23YIA4yWVnGwv2dQlN4bB7egfYX6YLn0Yo/S6zZO/ZM=
-github.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e h1:fD57ERR4JtEqsWbfPhv4DMiApHyliiK5xCTNVSPiaAs=
 github.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=
-github.com/nxadm/tail v1.4.4 h1:DQuhQpB1tVlglWS2hLQ5OV6B5r8aGxSrPc5Qo6uTN78=
 github.com/nxadm/tail v1.4.4/go.mod h1:kenIhsEOeOJmVchQTgglprH7qJGnHDVpk1VPCcaMI8A=
 github.com/oklog/ulid v1.3.1/go.mod h1:CirwcVhetQ6Lv90oh/F+FBtV6XMibvdAFo93nm5qn4U=
 github.com/olekukonko/tablewriter v0.0.0-20170122224234-a0225b3f23b5/go.mod h1:vsDQFd/mU46D+Z4whnwzcISnGGzXWMclvtLoiIKAKIo=
@@ -615,13 +567,11 @@
 github.com/onsi/ginkgo v1.10.1/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
 github.com/onsi/ginkgo v1.10.3/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
 github.com/onsi/ginkgo v1.11.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
-github.com/onsi/ginkgo v1.12.1 h1:mFwc4LvZ0xpSvDZ3E+k8Yte0hLOMxXUlP+yXtJqkYfQ=
 github.com/onsi/ginkgo v1.12.1/go.mod h1:zj2OWP4+oCPe1qIXoGWkgMRwljMUYCdkwsT2108oapk=
 github.com/onsi/gomega v0.0.0-20151007035656-2152b45fa28a/go.mod h1:C1qb7wdrVGGVU+Z6iS04AVkA3Q65CEZX59MT0QO5uiA=
 github.com/onsi/gomega v0.0.0-20170829124025-dcabb60a477c/go.mod h1:C1qb7wdrVGGVU+Z6iS04AVkA3Q65CEZX59MT0QO5uiA=
 github.com/onsi/gomega v1.7.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=
 github.com/onsi/gomega v1.7.1/go.mod h1:XdKZgCCFLUoM/7CFJVPcG8C1xQ1AJ0vpAezJrB7JYyY=
-github.com/onsi/gomega v1.10.3 h1:gph6h/qe9GSUw1NhH1gp+qb+h8rXD8Cy60Z32Qw3ELA=
 github.com/onsi/gomega v1.10.3/go.mod h1:V9xEwhxec5O8UDM77eCW8vLymOMltsqPVYWrpDsH8xc=
 github.com/opencontainers/go-digest v0.0.0-20170106003457-a6d0ee40d420/go.mod h1:cMLVZDEM3+U2I4VmLI6N8jQYUd2OVphdqWwCJHrFt2s=
 github.com/opencontainers/go-digest v0.0.0-20180430190053-c9281466c8b2/go.mod h1:cMLVZDEM3+U2I4VmLI6N8jQYUd2OVphdqWwCJHrFt2s=
@@ -630,35 +580,29 @@
 github.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=
 github.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=
 github.com/opencontainers/image-spec v1.0.0/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=
+github.com/opencontainers/image-spec v1.0.1 h1:JMemWkRwHx4Zj+fVxWoMCFm/8sYGGrUVojFA6h/TRcI=
 github.com/opencontainers/image-spec v1.0.1/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=
-github.com/opencontainers/image-spec v1.0.2 h1:9yCKha/T5XdGtO0q9Q9a6T5NUCsTn/DrBg0D7ufOcFM=
-github.com/opencontainers/image-spec v1.0.2/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=
 github.com/opencontainers/runc v0.0.0-20190115041553-12f6a991201f/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=
 github.com/opencontainers/runc v0.1.1/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=
 github.com/opencontainers/runc v1.0.0-rc8.0.20190926000215-3e425f80a8c9/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=
 github.com/opencontainers/runc v1.0.0-rc9/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=
+github.com/opencontainers/runc v1.0.0-rc93 h1:x2UMpOOVf3kQ8arv/EsDGwim8PTNqzL1/EYDr/+scOM=
 github.com/opencontainers/runc v1.0.0-rc93/go.mod h1:3NOsor4w32B2tC0Zbl8Knk4Wg84SM2ImC1fxBuqJ/H0=
-github.com/opencontainers/runc v1.0.2/go.mod h1:aTaHFFwQXuA71CiyxOdFFIorAoemI04suvGRQFzWTD0=
-github.com/opencontainers/runc v1.0.3 h1:1hbqejyQWCJBvtKAfdO0b1FmaEf2z/bxnjqbARass5k=
-github.com/opencontainers/runc v1.0.3/go.mod h1:aTaHFFwQXuA71CiyxOdFFIorAoemI04suvGRQFzWTD0=
 github.com/opencontainers/runtime-spec v0.1.2-0.20190507144316-5b71a03e2700/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=
 github.com/opencontainers/runtime-spec v1.0.1/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=
 github.com/opencontainers/runtime-spec v1.0.2-0.20190207185410-29686dbc5559/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=
 github.com/opencontainers/runtime-spec v1.0.2/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=
+github.com/opencontainers/runtime-spec v1.0.3-0.20200929063507-e6143ca7d51d h1:pNa8metDkwZjb9g4T8s+krQ+HRgZAkqnXml+wNir/+s=
 github.com/opencontainers/runtime-spec v1.0.3-0.20200929063507-e6143ca7d51d/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=
-github.com/opencontainers/runtime-spec v1.0.3-0.20210326190908-1c3f411f0417/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=
-github.com/opencontainers/runtime-spec v1.0.3-0.20210910115017-0d6cc581aeea h1:WmF5mV2OwWlHap/Ol8Z+iLZVlvLJrG7PzO/j8vwSLz8=
-github.com/opencontainers/runtime-spec v1.0.3-0.20210910115017-0d6cc581aeea/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=
 github.com/opencontainers/runtime-tools v0.0.0-20181011054405-1d69bd0f9c39/go.mod h1:r3f7wjNzSs2extwzU3Y+6pKfobzPh+kKFJ3ofN+3nfs=
 github.com/opencontainers/selinux v1.6.0/go.mod h1:VVGKuOLlE7v4PJyT6h7mNWvq1rzqiriPsEqVhc+svHE=
+github.com/opencontainers/selinux v1.8.0 h1:+77ba4ar4jsCbL1GLbFL8fFM57w6suPfSS9PDLDY7KM=
 github.com/opencontainers/selinux v1.8.0/go.mod h1:RScLhm78qiWa2gbVCcGkC7tCGdgk3ogry1nUQF8Evvo=
-github.com/opencontainers/selinux v1.8.2/go.mod h1:MUIHuUEvKB1wtJjQdOyYRgOnLD2xAPP8dBsCoU0KuF8=
-github.com/opencontainers/selinux v1.8.5 h1:OkT6bMHOQ1JQQO4ihjQ49sj0+wciDcjziSVTRn8VeTA=
-github.com/opencontainers/selinux v1.8.5/go.mod h1:HTvjPFoGMbpQsG886e3lQwnsRWtE4TC1OF3OUvG9FAo=
 github.com/opentracing/opentracing-go v1.2.0 h1:uEJPy/1a5RIPAJ0Ov+OIO8OxWu77jEv+1B0VhjKrZUs=
 github.com/opentracing/opentracing-go v1.2.0/go.mod h1:GxEUsuufX4nBwe+T+Wl9TAgYrxe9dPLANfrWvHYVTgc=
 github.com/pborman/uuid v1.2.0/go.mod h1:X/NO0urCmaxf9VXbdlT7C2Yzkj2IKimNn4k+gtPdI/k=
 github.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=
+github.com/pelletier/go-toml v1.4.0/go.mod h1:PN7xzY2wHTK0K9p34ErDQMlFxa51Fk0OUruD3k1mMwo=
 github.com/pelletier/go-toml v1.7.0/go.mod h1:vwGMzjaWMwyfHwgIBhI2YUM4fB6nL6lVAvS1LBMMhTE=
 github.com/pelletier/go-toml v1.8.1 h1:1Nf83orprkJyknT6h7zbuEGUEjcyVlCxSUGTENmNCRM=
 github.com/pelletier/go-toml v1.8.1/go.mod h1:T2/BmBdy8dvIRq1a/8aqjN41wvWlN4lrapLU/GW4pbc=
@@ -711,13 +655,11 @@
 github.com/russross/blackfriday/v2 v2.0.1 h1:lPqVAte+HuHNfhJ/0LC98ESWRz8afy9tM/0RK8m9o+Q=
 github.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
 github.com/safchain/ethtool v0.0.0-20190326074333-42ed695e3de8/go.mod h1:Z0q5wiBQGYcxhMZ6gUqHn6pYNLypFAvaL3UvgZLR0U4=
-github.com/satori/go.uuid v1.2.0 h1:0uYX9dsZ2yD7q2RtLRtPSdGDWzjeM3TbMJP9utgA0ww=
 github.com/satori/go.uuid v1.2.0/go.mod h1:dA0hQrYB0VpLJoorglMZABFdXlWrHn1NEOzdhQKdks0=
 github.com/seccomp/libseccomp-golang v0.9.1/go.mod h1:GbW5+tmTXfcxTToHLXlScSlAvWlF4P2Ca7zGrPiEpWo=
 github.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=
 github.com/shirou/gopsutil v2.18.12+incompatible h1:1eaJvGomDnH74/5cF4CTmTbLHAriGFsTZppLXDX93OM=
 github.com/shirou/gopsutil v2.18.12+incompatible/go.mod h1:5b4v6he4MtMOwMlS0TUMTu2PcXUg8+E1lC7eC3UO/RA=
-github.com/shirou/w32 v0.0.0-20160930032740-bb4de0191aa4 h1:udFKJ0aHUL60LboW/A+DfgoHVedieIzIXE8uylPue0U=
 github.com/shirou/w32 v0.0.0-20160930032740-bb4de0191aa4/go.mod h1:qsXQc7+bwAM3Q1u/4XEfrquwF8Lw7D7y5cD8CuHnfIc=
 github.com/shurcooL/sanitized_anchor_name v1.0.0 h1:PdmoCO6wvbs+7yrJyMORt4/BmY5IYyJwS/kOiWx8mHo=
 github.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=
@@ -729,14 +671,12 @@
 github.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=
 github.com/sirupsen/logrus v1.6.0/go.mod h1:7uNnSEd1DgxDLC74fIahvMZmmYsHGZGEOFrfsX/uA88=
 github.com/sirupsen/logrus v1.7.0/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=
+github.com/sirupsen/logrus v1.8.0 h1:nfhvjKcUMhBMVqbKHJlk5RPrrfYr/NMo3692g0dwfWU=
 github.com/sirupsen/logrus v1.8.0/go.mod h1:4GuYW9TZmE769R5STWrRakJc4UqQ3+QQ95fyz7ENv1A=
-github.com/sirupsen/logrus v1.8.1 h1:dJKuHgqk1NNQlqoA6BTlM1Wf9DOH3NBjQyu0h9+AZZE=
-github.com/sirupsen/logrus v1.8.1/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=
 github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=
 github.com/smartystreets/goconvey v0.0.0-20190330032615-68dc04aab96a/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=
 github.com/soheilhy/cmux v0.1.4/go.mod h1:IM3LyeVVIOuxMH7sFAkER9+bJ4dT7Ms6E4xg4kGIyLM=
 github.com/spaolacci/murmur3 v0.0.0-20180118202830-f09979ecbc72/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=
-github.com/sparrc/go-ping v0.0.0-20190613174326-4e5b6552494c h1:gqEdF4VwBu3lTKGHS9rXE9x1/pEaSwCXRLOZRF6qtlw=
 github.com/sparrc/go-ping v0.0.0-20190613174326-4e5b6552494c/go.mod h1:eMyUVp6f/5jnzM+3zahzl7q6UXLbgSc3MKg/+ow9QW0=
 github.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=
 github.com/spf13/afero v1.2.2/go.mod h1:9ZxEEn6pIJ8Rxe320qSDBk6AsU0r9pR7Q4OcevTdifk=
@@ -749,15 +689,12 @@
 github.com/spf13/pflag v1.0.1-0.20171106142849-4c012f6dcd95/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=
 github.com/spf13/pflag v1.0.1/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=
 github.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=
-github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
 github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
 github.com/spf13/viper v1.4.0/go.mod h1:PTJ7Z/lr49W6bUbkmS1V3by4uWynFiR9p7+dSq/yZzE=
-github.com/stefanberger/go-pkcs11uri v0.0.0-20201008174630-78d3cae3a980 h1:lIOOHPEbXzO3vnmx2gok1Tfs31Q8GQqKLc8vVqyQq/I=
 github.com/stefanberger/go-pkcs11uri v0.0.0-20201008174630-78d3cae3a980/go.mod h1:AO3tvPzVZ/ayst6UlUKUv6rcPQInYe3IknH3jYhAKu8=
 github.com/stretchr/objx v0.0.0-20180129172003-8a3f7159479f/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
 github.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
-github.com/stretchr/objx v0.2.0 h1:Hbg2NidpLE8veEBkEZTL3CvlkUIVzuU9jDplZO54c48=
 github.com/stretchr/objx v0.2.0/go.mod h1:qt09Ya8vawLte6SNmTgCsAVtYtaKzEcn8ATUoHMkEqE=
 github.com/stretchr/testify v0.0.0-20180303142811-b89eecf5ca5d/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
 github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
@@ -768,12 +705,11 @@
 github.com/syndtr/gocapability v0.0.0-20170704070218-db04d3cc01c8/go.mod h1:hkRG7XYTFWNJGYcbNJQlaLq0fg1yr4J4t/NcTQtrfww=
 github.com/syndtr/gocapability v0.0.0-20180916011248-d98352740cb2/go.mod h1:hkRG7XYTFWNJGYcbNJQlaLq0fg1yr4J4t/NcTQtrfww=
 github.com/syndtr/gocapability v0.0.0-20200815063812-42c35b437635/go.mod h1:hkRG7XYTFWNJGYcbNJQlaLq0fg1yr4J4t/NcTQtrfww=
-github.com/tchap/go-patricia v2.2.6+incompatible h1:JvoDL7JSoIP2HDE8AbDH3zC8QBPxmzYe32HHy5yQ+Ck=
 github.com/tchap/go-patricia v2.2.6+incompatible/go.mod h1:bmLyhP68RS6kStMGxByiQ23RP/odRBOTVjwp2cDyi6I=
-github.com/tidwall/pretty v1.0.0 h1:HsD+QiTn7sK6flMKIvNmpqz1qrpP3Ps6jOKIKMooyg4=
 github.com/tidwall/pretty v1.0.0/go.mod h1:XNkn88O1ChpSDQmQeStsy+sBenx6DDtFZJxhVysOjyk=
 github.com/tmc/grpc-websocket-proxy v0.0.0-20170815181823-89b8d40f7ca8/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=
 github.com/tmc/grpc-websocket-proxy v0.0.0-20190109142713-0ad062ec5ee5/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=
+github.com/tv42/httpunix v0.0.0-20191220191345-2ba4b9c3382c h1:u6SKchux2yDvFQnDHS3lPnIRmfVJ5Sxy3ao2SIdysLQ=
 github.com/tv42/httpunix v0.0.0-20191220191345-2ba4b9c3382c/go.mod h1:hzIxponao9Kjc7aWznkXaL4U4TWaDSs8zcsY4Ka08nM=
 github.com/ugorji/go v1.1.4/go.mod h1:uQMGLiO92mf5W77hV/PUCpI3pbzQx3CRekS0kk+RGrc=
 github.com/urfave/cli v0.0.0-20171014202726-7bc6a0acffa5/go.mod h1:70zkFmudgCuE/ngEzBv17Jvp/497gISqfk5gWijbERA=
@@ -791,16 +727,15 @@
 github.com/vishvananda/netns v0.0.0-20200728191858-db3c7e526aae h1:4hwBBUfQCFe3Cym0ZtKyq7L16eZUtYKs+BaHDN6mAns=
 github.com/vishvananda/netns v0.0.0-20200728191858-db3c7e526aae/go.mod h1:DD4vA1DwXk04H54A1oHXtwZmA0grkVMdPxx/VGLCah0=
 github.com/willf/bitset v1.1.11-0.20200630133818-d5bec3311243/go.mod h1:RjeCKbqT1RxIR/KWY6phxZiaY1IyutSBfGjNPySAYV4=
+github.com/willf/bitset v1.1.11 h1:N7Z7E9UvjW+sGsEl7k/SJrvY2reP1A07MrGuCjIOjRE=
 github.com/willf/bitset v1.1.11/go.mod h1:83CECat5yLh5zVOf4P1ErAgKA5UDvKtgyUABdr3+MjI=
-github.com/xdg-go/pbkdf2 v1.0.0/go.mod h1:jrpuAogTd400dnrH08LKmI/xc1MbPOebTwRqcT5RDeI=
-github.com/xdg-go/scram v1.0.2/go.mod h1:1WAq6h33pAW+iRreB34OORO2Nf7qel3VV3fjBj+hCSs=
-github.com/xdg-go/stringprep v1.0.2/go.mod h1:8F9zXuvzgwmyT5DUm4GUfZGDdT3W+LCvS6+da4O5kxM=
+github.com/xdg/scram v0.0.0-20180814205039-7eeb5667e42c/go.mod h1:lB8K/P019DLNhemzwFU4jHLhdvlE6uDZjXFejJXr49I=
+github.com/xdg/stringprep v0.0.0-20180714160509-73f8eece6fdc/go.mod h1:Jhud4/sHMO4oL310DaZAKk9ZaJ08SJfe+sJh0HrGL1Y=
 github.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=
 github.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415/go.mod h1:GwrjFmJcFw6At/Gs6z4yjiIwzuJ1/+UwLxMQDVQXShQ=
 github.com/xeipuuv/gojsonschema v0.0.0-20180618132009-1d523034197f/go.mod h1:5yf86TLmAcydyeJq5YvxkGPE2fm/u4myDekKRoLuqhs=
 github.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2/go.mod h1:UETIi67q53MR2AWcXfiuqkDkRtnGDLqkBTpCHuJHxtU=
 github.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=
-github.com/youmark/pkcs8 v0.0.0-20181117223130-1be2e3e5546d/go.mod h1:rHwXgn7JulP+udvsHwJoVG1YGAP6VLg4y9I5dyZdqmA=
 github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yvasiyarov/go-metrics v0.0.0-20140926110328-57bccd1ccd43/go.mod h1:aX5oPXxHm3bOH+xeAttToC8pqch2ScQN/JoXYupl6xs=
@@ -811,34 +746,35 @@
 go.etcd.io/bbolt v1.3.5 h1:XAzx9gjCb0Rxj7EoqcClPD1d5ZBxZJk0jbuoPHenBt0=
 go.etcd.io/bbolt v1.3.5/go.mod h1:G5EMThwa9y8QZGBClrRx5EY+Yw9kAhnjy3bSjsnlVTQ=
 go.etcd.io/etcd v0.5.0-alpha.5.0.20200910180754-dd1b699fc489/go.mod h1:yVHk9ub3CSBatqGNg7GRmsnfLWtoW60w4eDYfh7vHDg=
-go.mongodb.org/mongo-driver v1.5.1 h1:9nOVLGDfOaZ9R0tBumx/BcuqkbFpyTCU2r/Po7A2azI=
-go.mongodb.org/mongo-driver v1.5.1/go.mod h1:gRXCHX4Jo7J0IJ1oDQyUxF7jfy19UfxniMS4xxMmUqw=
-go.mozilla.org/pkcs7 v0.0.0-20200128120323-432b2356ecb1 h1:A/5uWzF44DlIgdm/PQFwfMkW0JX+cIcQi/SwLAmZP5M=
+go.mongodb.org/mongo-driver v1.0.3/go.mod h1:u7ryQJ+DOzQmeO7zB6MHyr8jkEQvC8vH7qLUO4lqsUM=
+go.mongodb.org/mongo-driver v1.1.1/go.mod h1:u7ryQJ+DOzQmeO7zB6MHyr8jkEQvC8vH7qLUO4lqsUM=
+go.mongodb.org/mongo-driver v1.3.0/go.mod h1:MSWZXKOynuguX+JSvwP8i+58jYCXxbia8HS3gZBapIE=
+go.mongodb.org/mongo-driver v1.3.4/go.mod h1:MSWZXKOynuguX+JSvwP8i+58jYCXxbia8HS3gZBapIE=
+go.mongodb.org/mongo-driver v1.4.2 h1:WlnEglfTg/PfPq4WXs2Vkl/5ICC6hoG8+r+LraPmGk4=
+go.mongodb.org/mongo-driver v1.4.2/go.mod h1:WcMNYLx/IlOxLe6JRJiv2uXuCz6zBLndR4SoGjYphSc=
 go.mozilla.org/pkcs7 v0.0.0-20200128120323-432b2356ecb1/go.mod h1:SNgMg+EgDFwmvSmLRTNKC5fegJjB7v23qTQ0XLGUNHk=
 go.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=
 go.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=
 go.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
 go.opencensus.io v0.22.3/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
-go.opencensus.io v0.23.0 h1:gqCw0LfLxScz8irSi8exQc7fyQ0fKQU/qnC/X8+V/1M=
-go.opencensus.io v0.23.0/go.mod h1:XItmlyltB5F7CS4xOC1DcqMoFqwtC6OG2xF7mCv7P7E=
 go.uber.org/atomic v1.3.2/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=
 go.uber.org/atomic v1.4.0/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=
 go.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=
 go.uber.org/zap v1.10.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=
 golang.org/x/crypto v0.0.0-20171113213409-9f005a07e0d3/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
 golang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
+golang.org/x/crypto v0.0.0-20181001203147-e3636079e1a4/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
 golang.org/x/crypto v0.0.0-20181009213950-7c1a557ab941/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20190320223903-b7391e95e576/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20190422162423-af44ce270edf/go.mod h1:WFFai1msRO1wXaEeE5yQxYXgSfI8pQAWXbQop6sCtWE=
 golang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
+golang.org/x/crypto v0.0.0-20190530122614-20be4c3c3ed5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20190605123033-f99c8df09eb5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20190611184440-5c40567a22f8/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20190617133340-57b3e21c3d56/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
-golang.org/x/crypto v0.0.0-20190923035154-9ee001bba392/go.mod h1:/lpIB1dKB+9EgE3H3cr1v9wB50oz8l4C4h62xy7jSTY=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
-golang.org/x/crypto v0.0.0-20200302210943-78000ba7a073/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200728195943-123391ffb6de/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20201002170205-7f63de1d35b0/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
@@ -874,6 +810,7 @@
 golang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20180926154720-4dfa2610cdf3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20181005035420-146acd28ed58/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20181011144130-49bb7cea24b1/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
@@ -881,6 +818,7 @@
 golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190320064053-1272bf9dcd53/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
+golang.org/x/net v0.0.0-20190328230028-74de082e2cca/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
@@ -892,7 +830,6 @@
 golang.org/x/net v0.0.0-20190724013045-ca1201d0de80/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20190813141303-74dc4d7220e7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20190827160401-ba9fcec4b297/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
-golang.org/x/net v0.0.0-20190923162816-aa69164e4478/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20191004110552-13f9640d40b9/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20191209160850-c0dbc17a3553/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200114155413-6afb5195e5aa/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
@@ -907,14 +844,12 @@
 golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
 golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
 golang.org/x/net v0.0.0-20201224014010-6772e930b67b/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
+golang.org/x/net v0.0.0-20210226172049-e18ecbb05110 h1:qWPm9rbaAMKs8Bq/9LRpbMqxWRVUAQwMI9fVrssnTfw=
 golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
-golang.org/x/net v0.0.0-20211005001312-d4b1ae081e3b h1:SXy8Ld8oKlcogOvUAh0J5Pm5RKzgYBMMxLxt6n5XW50=
-golang.org/x/net v0.0.0-20211005001312-d4b1ae081e3b/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/oauth2 v0.0.0-20191202225959-858c2ad4c8b6/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
-golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d h1:TzXSXBo42m9gQenoE3b9BGiEpg5IG2JkU5FkPIawgtw=
 golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -925,16 +860,17 @@
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20200625203802-6e8e738ad208/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20201207232520-09787c993a3a h1:DcqTD9SDLc+1P/r1EmRBwnVsrOwW+kk2vWf9n+1sGhs=
 golang.org/x/sync v0.0.0-20201207232520-09787c993a3a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.0.0-20210220032951-036812b2e83c h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=
-golang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20180928133829-e4b3c5e90611/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20181107165924-66b7b1311ac8/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190321052220-f7bb7a8bee54/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190329044733-9eb1bfa1ce65/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190403152447-81d4e9dc473e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190419153524-e8e3143a4f4a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -955,8 +891,6 @@
 golang.org/x/sys v0.0.0-20190826190057-c7b8b68b1456/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190922100055-0a153f010e69/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190924154521-2837fb4f24fe/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191001151750-bb3f8db39f24/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191022100944-742c48ecaeb7/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -991,29 +925,20 @@
 golang.org/x/sys v0.0.0-20201201145000-ef89a241ccb3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20201202213521-69691e467435/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210324051608-47abb6519492 h1:Paq34FxTluEPvVyayQqMPgHm+vTOrIifmcYxFBx9TLg=
 golang.org/x/sys v0.0.0-20210324051608-47abb6519492/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20210426230700-d19ff857e887/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20210927094055-39ccf1dd6fa6/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.0.0-20220204135822-1c1b9b1eba6a h1:ppl5mZgokTT8uPkmYOyEUmPTr3ypaKkg5eFOGrAmxxE=
-golang.org/x/sys v0.0.0-20220204135822-1c1b9b1eba6a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1 h1:v+OssWQX+hTHEmOBgwxdZxK4zHq3yOs8F9J7mk0PY8E=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+golang.org/x/text v0.3.4 h1:0YWbFKbhXG/wIiuHDSKpS0Iy7FSA+u45VtBMfQcFTTc=
 golang.org/x/text v0.3.4/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
-golang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
-golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
-golang.org/x/text v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=
-golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
 golang.org/x/time v0.0.0-20180412165947-fbb02b2291d2/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
-golang.org/x/time v0.0.0-20200630173020-3af7569d3a1e h1:EHBhcS0mlXEAVwNyO2dLfjToGsyY4j24pTs2ScHnX7s=
 golang.org/x/time v0.0.0-20200630173020-3af7569d3a1e/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/tools v0.0.0-20180221164845-07fd8470d635/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
@@ -1037,7 +962,6 @@
 golang.org/x/tools v0.0.0-20190624222133-a101b041ded4/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
 golang.org/x/tools v0.0.0-20190628153133-6cdbf07be9d0/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
 golang.org/x/tools v0.0.0-20190816200558-6889da9d5479/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
-golang.org/x/tools v0.0.0-20190907020128-2ca718005c18/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20190911174233-4f2ddba30aff/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191012152004-8de300cfc20a/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191113191852-77e3bb0ad9e7/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
@@ -1060,7 +984,6 @@
 golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
-golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=
 golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 google.golang.org/api v0.0.0-20160322025152-9bf6e6e569ff/go.mod h1:4mhQ8q/RsB7i+udVvVy5NUi08OU8ZlA0gRVgrF7VFY0=
 google.golang.org/api v0.4.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=
@@ -1076,38 +999,30 @@
 google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
 google.golang.org/appengine v1.5.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
 google.golang.org/appengine v1.6.1/go.mod h1:i06prIuMbXzDqacNJfV5OdTW448YApPu5ww/cMBSeb0=
-google.golang.org/appengine v1.6.5 h1:tycE03LOZYQNhDpS27tcQdAzLCVMaj7QT2SXxebnpCM=
 google.golang.org/appengine v1.6.5/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=
 google.golang.org/cloud v0.0.0-20151119220103-975617b05ea8/go.mod h1:0H1ncTHf11KCFhTc/+EFRbzSCOZx+VUbRMk55Yv5MYk=
 google.golang.org/genproto v0.0.0-20200224152610-e50cd9704f63 h1:YzfoEYWbODU5Fbt37+h7X16BWQbad7Q4S6gclTKFXM8=
 google.golang.org/genproto v0.0.0-20200224152610-e50cd9704f63/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
 google.golang.org/grpc v1.27.1 h1:zvIju4sqAGvwKspUQOhwnpcqSbzi7/H6QomNNjTL4sk=
 google.golang.org/grpc v1.27.1/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
-google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
-google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
 gopkg.in/airbrake/gobrake.v2 v2.0.9/go.mod h1:/h5ZAUhDkGaJfjzjKLSjv6zCL6O0LLBxU4K+aSYdM/U=
 gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20141024133853-64131543e789/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
-gopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f h1:BLraFXnmrev5lT+xlilqcH8XK9/i0At2xKjWk4p6zsU=
 gopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/cheggaaa/pb.v1 v1.0.25/go.mod h1:V/YB90LKu/1FcN3WVnfiiE5oMCibMjukxqG/qStrOgw=
 gopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=
 gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=
 gopkg.in/gemnasium/logrus-airbrake-hook.v2 v2.1.2/go.mod h1:Xk6kEKp8OKb+X14hQBKWaSkCsqBpgog8nAV2xsGOxlo=
-gopkg.in/inf.v0 v0.9.1 h1:73M5CoZyi3ZLMOyDlQh031Cx6N9NDJ2Vvfl76EDAgDc=
 gopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=
 gopkg.in/natefinch/lumberjack.v2 v2.0.0/go.mod h1:l0ndWWf7gzL7RNwBG7wST/UCcT4T24xpD6X8LsfU/+k=
 gopkg.in/resty.v1 v1.12.0/go.mod h1:mDo4pnntr5jdWRML875a/NmxYqAlA73dVijT2AXvQQo=
 gopkg.in/square/go-jose.v2 v2.2.2/go.mod h1:M9dMgbHiYLoDGQrXy7OpJDJWiKiU//h+vD76mk0e1AI=
 gopkg.in/square/go-jose.v2 v2.3.1/go.mod h1:M9dMgbHiYLoDGQrXy7OpJDJWiKiU//h+vD76mk0e1AI=
-gopkg.in/square/go-jose.v2 v2.5.1 h1:7odma5RETjNHWJnR32wx8t+Io4djHE1PqxCFx3iiZ2w=
 gopkg.in/square/go-jose.v2 v2.5.1/go.mod h1:M9dMgbHiYLoDGQrXy7OpJDJWiKiU//h+vD76mk0e1AI=
-gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=
 gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=
 gopkg.in/yaml.v2 v2.0.0-20170812160011-eb3733d160e7/go.mod h1:JAlM8MvJe8wmxCU4Bli9HhUf9+ttbYbLASfIpnQbh74=
 gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
@@ -1122,10 +1037,8 @@
 gopkg.in/yaml.v3 v3.0.0-20200605160147-a5ece683394c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.0-20200615113413-eeeca48fe776 h1:tQIYjPdBoyREyB9XMu+nnTclpTYkz2zFM+lzLJFO4gQ=
 gopkg.in/yaml.v3 v3.0.0-20200615113413-eeeca48fe776/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
-gotest.tools v2.2.0+incompatible h1:VsBPFP1AI068pPrMxtb/S8Zkgf9xEmTLJjfM+P5UIEo=
 gotest.tools v2.2.0+incompatible/go.mod h1:DsYFclhRJ6vuDpmuTbkuFWG+y2sxOXAzmJt81HFBacw=
 gotest.tools/v3 v3.0.2/go.mod h1:3SzNCllyD9/Y+b5r9JIKQ474KzkZyqLqEfYqMsX94Bk=
-gotest.tools/v3 v3.0.3 h1:4AuOwCGf4lLR9u3YOe2awrHygurzhO/HeQ6laiA6Sx0=
 gotest.tools/v3 v3.0.3/go.mod h1:Z7Lb0S5l+klDB31fvDQX8ss/FlKDxtlFlw3Oa8Ymbl8=
 honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
 honnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
@@ -1135,19 +1048,15 @@
 honnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=
 k8s.io/api v0.20.1/go.mod h1:KqwcCVogGxQY3nBlRpwt+wpAMF/KjaCc7RpywacvqUo=
 k8s.io/api v0.20.4/go.mod h1:++lNL1AJMkDymriNniQsWRkMDzRaX2Y/POTUi8yvqYQ=
-k8s.io/api v0.20.6 h1:bgdZrW++LqgrLikWYNruIKAtltXbSCX2l5mJu11hrVE=
 k8s.io/api v0.20.6/go.mod h1:X9e8Qag6JV/bL5G6bU8sdVRltWKmdHsFUGS3eVndqE8=
 k8s.io/apimachinery v0.20.1/go.mod h1:WlLqWAHZGg07AeltaI0MV5uk1Omp8xaN0JGLY6gkRpU=
 k8s.io/apimachinery v0.20.4/go.mod h1:WlLqWAHZGg07AeltaI0MV5uk1Omp8xaN0JGLY6gkRpU=
-k8s.io/apimachinery v0.20.6 h1:R5p3SlhaABYShQSO6LpPsYHjV05Q+79eBUR0Ut/f4tk=
 k8s.io/apimachinery v0.20.6/go.mod h1:ejZXtW1Ra6V1O5H8xPBGz+T3+4gfkTCeExAHKU57MAc=
 k8s.io/apiserver v0.20.1/go.mod h1:ro5QHeQkgMS7ZGpvf4tSMx6bBOgPfE+f52KwvXfScaU=
 k8s.io/apiserver v0.20.4/go.mod h1:Mc80thBKOyy7tbvFtB4kJv1kbdD0eIH8k8vianJcbFM=
-k8s.io/apiserver v0.20.6 h1:NnVriMMOpqQX+dshbDoZixqmBhfgrPk2uOh2fzp9vHE=
 k8s.io/apiserver v0.20.6/go.mod h1:QIJXNt6i6JB+0YQRNcS0hdRHJlMhflFmsBDeSgT1r8Q=
 k8s.io/client-go v0.20.1/go.mod h1:/zcHdt1TeWSd5HoUe6elJmHSQ6uLLgp4bIJHVEuy+/Y=
 k8s.io/client-go v0.20.4/go.mod h1:LiMv25ND1gLUdBeYxBIwKpkSC5IsozMMmOOeSJboP+k=
-k8s.io/client-go v0.20.6 h1:nJZOfolnsVtDtbGJNCxzOtKUAu7zvXjB8+pMo9UNxZo=
 k8s.io/client-go v0.20.6/go.mod h1:nNQMnOvEUEsOzRRFIIkdmYOjAZrC8bgq0ExboWSU1I0=
 k8s.io/component-base v0.20.1/go.mod h1:guxkoJnNoh8LNrbtiQOlyp2Y2XFCZQmrcg2n/DeYNLk=
 k8s.io/component-base v0.20.4/go.mod h1:t4p9EdiagbVCJKrQ1RsA5/V4rFQNDfRlevJajlGwgjI=
@@ -1155,15 +1064,12 @@
 k8s.io/cri-api v0.17.3/go.mod h1:X1sbHmuXhwaHs9xxYffLqJogVsnI+f6cPRcgPel7ywM=
 k8s.io/cri-api v0.20.1/go.mod h1:2JRbKt+BFLTjtrILYVqQK5jqhI+XNdF6UiGMgczeBCI=
 k8s.io/cri-api v0.20.4/go.mod h1:2JRbKt+BFLTjtrILYVqQK5jqhI+XNdF6UiGMgczeBCI=
-k8s.io/cri-api v0.20.6 h1:iXX0K2pRrbR8yXbZtDK/bSnmg/uSqIFiVJK1x4LUOMc=
 k8s.io/cri-api v0.20.6/go.mod h1:ew44AjNXwyn1s0U4xCKGodU7J1HzBeZ1MpGrpa5r8Yc=
 k8s.io/gengo v0.0.0-20200413195148-3a45101e95ac/go.mod h1:ezvh/TsK7cY6rbqRK0oQQ8IAqLxYwwyPxAX1Pzy0ii0=
 k8s.io/klog/v2 v2.0.0/go.mod h1:PBfzABfn139FHAV07az/IF9Wp1bkk3vpT2XSJ76fSDE=
-k8s.io/klog/v2 v2.4.0 h1:7+X0fUguPyrKEC4WjH8iGDg3laWgMo5tMnRTIGTTxGQ=
 k8s.io/klog/v2 v2.4.0/go.mod h1:Od+F08eJP+W3HUb4pSrPpgp9DGU4GzlpG/TmITuYh/Y=
 k8s.io/kube-openapi v0.0.0-20201113171705-d219536bb9fd/go.mod h1:WOJ3KddDSol4tAGcJo0Tvi+dK12EcqSLqcWsryKMpfM=
 k8s.io/kubernetes v1.13.0/go.mod h1:ocZa8+6APFNC2tX1DZASIbocyYT5jHzqFVsY5aoB7Jk=
-k8s.io/utils v0.0.0-20201110183641-67b214c5f920 h1:CbnUZsM497iRC5QMVkHwyl8s2tB3g7yaSHkYPkpgelw=
 k8s.io/utils v0.0.0-20201110183641-67b214c5f920/go.mod h1:jPW/WVKK9YHAvNhRxK0md/EJ228hCsBRufyofKtW8HA=
 rsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=
 rsc.io/quote/v3 v3.1.0/go.mod h1:yEA65RcK8LyAZtP9Kv3t0HmxON59tX3rD+tICJqUlj0=
@@ -1171,8 +1077,6 @@
 sigs.k8s.io/apiserver-network-proxy/konnectivity-client v0.0.14/go.mod h1:LEScyzhFmoF5pso/YSeBstl57mOzx9xlU9n85RGrDQg=
 sigs.k8s.io/apiserver-network-proxy/konnectivity-client v0.0.15/go.mod h1:LEScyzhFmoF5pso/YSeBstl57mOzx9xlU9n85RGrDQg=
 sigs.k8s.io/structured-merge-diff/v4 v4.0.2/go.mod h1:bJZC9H9iH24zzfZ/41RGcq60oK1F7G282QMXDPYydCw=
-sigs.k8s.io/structured-merge-diff/v4 v4.0.3 h1:4oyYo8NREp49LBBhKxEqCulFjg26rawYKrnCmg+Sr6c=
 sigs.k8s.io/structured-merge-diff/v4 v4.0.3/go.mod h1:bJZC9H9iH24zzfZ/41RGcq60oK1F7G282QMXDPYydCw=
 sigs.k8s.io/yaml v1.1.0/go.mod h1:UJmg0vDUVViEyp3mgSv9WPwZCDxu4rQW1olrI1uml+o=
-sigs.k8s.io/yaml v1.2.0 h1:kr/MCeFWJWTwyaHoR9c8EjH9OumOmoF9YGiZd7lFm/Q=
 sigs.k8s.io/yaml v1.2.0/go.mod h1:yfXDCHCao9+ENCvLSE62v9VSji2MKu5jeNfTrofGhJc=
diff -ur ./internal/common.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/internal/common.go
--- ./internal/common.go	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/internal/common.go	2022-02-25 13:37:31.107472996 +0800
@@ -34,6 +34,8 @@
 	// FirecrackerVSockName is the name of the Firecracker VSock unix path used for communication
 	// between the runtime and the agent
 	FirecrackerVSockName = "firecracker.vsock"
+	// FirecrackerUPFSockName is the name of the Firecracker UPF socket
+	FirecrackerUPFSockName = "firecracker.upfsock"
 	// FirecrackerLogFifoName is the name of the Firecracker VMM log FIFO
 	FirecrackerLogFifoName = "fc-logs.fifo"
 	// FirecrackerMetricsFifoName is the name of the Firecracker VMM metrics FIFO
Only in ./internal: cpu_template.go
Only in ./internal: cpu_template_test.go
diff -ur ./internal/fsutil.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/internal/fsutil.go
--- ./internal/fsutil.go	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/internal/fsutil.go	2022-02-25 13:37:31.107472996 +0800
@@ -27,15 +27,13 @@
 	"github.com/stretchr/testify/require"
 )
 
-const mib = 1024 * 1024
-
 // CreateFSImg will create a file containing a filesystem image of the provided type containing
 // the provided files. It returns the path at which the image file can be found.
 func CreateFSImg(ctx context.Context, t *testing.T, fsType string, testFiles ...FSImgFile) string {
 	t.Helper()
 
 	switch fsType {
-	case "ext4":
+	case "ext3", "ext4":
 		return createTestExtImg(ctx, t, fsType, testFiles...)
 	default:
 		require.FailNowf(t, "unsupported fs type %q", fsType)
@@ -74,39 +72,6 @@
 	return imgFile.Name()
 }
 
-// CreateBlockDevice creates a block device, or block special file for testing
-func CreateBlockDevice(ctx context.Context, t *testing.T) (string, func()) {
-	t.Helper()
-
-	f, err := ioutil.TempFile("", "")
-	require.NoError(t, err)
-
-	err = f.Truncate(32 * mib)
-	require.NoError(t, err)
-
-	out, err := exec.CommandContext(ctx, "mkfs.ext4", "-v", f.Name()).CombinedOutput()
-	require.NoErrorf(t, err, "failed to create ext img, command out:%s \n", string(out))
-
-	err = f.Close()
-	require.NoError(t, err)
-
-	out, err = exec.CommandContext(ctx, "losetup", "--show", "--find", f.Name()).CombinedOutput()
-	require.NoError(t, err)
-
-	device := strings.TrimRight(string(out), "\n")
-
-	err = os.Chmod(device, 0600)
-	require.NoError(t, err, "failed to change file mode for the new created block device")
-
-	return device, func() {
-		out, err := exec.CommandContext(ctx, "losetup", "--detach", device).CombinedOutput()
-		if len(out) > 0 {
-			t.Logf("losetup --detach: %s", out)
-		}
-		require.NoError(t, err)
-	}
-}
-
 // MountInfo holds data parsed from a line of /proc/mounts
 type MountInfo struct {
 	SourcePath string
diff -ur ./internal/vm/dir.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/internal/vm/dir.go
--- ./internal/vm/dir.go	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/internal/vm/dir.go	2022-02-25 13:37:31.107472996 +0800
@@ -49,7 +49,7 @@
 		return "", errors.Wrapf(err, "failed evaluating any symlinks in path %q", varRunDir)
 	}
 
-	return Dir(filepath.Join(resolvedVarRunDir, namespace+"#"+vmID)), nil
+	return Dir(filepath.Join(resolvedVarRunDir, namespace, vmID)), nil
 }
 
 // Dir represents the root of a firecracker-containerd VM directory, which
@@ -95,6 +95,12 @@
 	return relPathTo(d.FirecrackerSockPath())
 }
 
+// FirecrackerUPFSockPath returns the path to the user page faults
+// socket of the firecracker process
+func (d Dir) FirecrackerUPFSockPath() string {
+	return filepath.Join(d.RootPath(), internal.FirecrackerUPFSockName)
+}
+
 // FirecrackerVSockPath returns the path to the vsock unix socket that the runtime uses
 // to communicate with the VM agent.
 func (d Dir) FirecrackerVSockPath() string {
diff -ur ./internal/vm/dir_test.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/internal/vm/dir_test.go
--- ./internal/vm/dir_test.go	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/internal/vm/dir_test.go	2022-02-25 13:37:31.107472996 +0800
@@ -48,11 +48,9 @@
 		{name: "id with ?", ns: "test", id: "?", outErr: `invalid vm id: identifier "?" must match`},
 		{name: "id with *", ns: "test", id: "*", outErr: `invalid vm id: identifier "*" must match`},
 		{name: "id with ,", ns: "test", id: ",", outErr: `invalid vm id: identifier "," must match`},
-		{name: "valid", ns: "ns", id: "1", outDir: "ns#1"},
-		{name: "valid with dashes", ns: "test-123", id: "123-456", outDir: "test-123#123-456"},
-		{name: "valid with dots", ns: "test.123", id: "123.456", outDir: "test.123#123.456"},
-		{name: "ns with aaa", ns: "aaa", id: "bbb-ccc", outDir: "aaa#bbb-ccc"},
-		{name: "ns with aaa-bbb", ns: "aaa-bbb", id: "ccc", outDir: "aaa-bbb#ccc"},
+		{name: "valid", ns: "ns", id: "1", outDir: "ns/1"},
+		{name: "valid with dashes", ns: "test-123", id: "123-456", outDir: "test-123/123-456"},
+		{name: "valid with dots", ns: "test.123", id: "123.456", outDir: "test.123/123.456"},
 	}
 
 	for _, tc := range tests {
diff -ur ./internal/vm/vsock.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/internal/vm/vsock.go
--- ./internal/vm/vsock.go	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/internal/vm/vsock.go	2022-02-25 13:37:31.107472996 +0800
@@ -76,7 +76,7 @@
 // VSockListener returns a net.Listener implementation for guest-side Firecracker vsock
 // connections.
 func VSockListener(ctx context.Context, logger *logrus.Entry, port uint32) (net.Listener, error) {
-	listener, err := vsock.Listen(port, nil)
+	listener, err := vsock.Listen(port)
 	if err != nil {
 		return nil, err
 	}
diff -ur ./Makefile /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/Makefile
--- ./Makefile	2022-02-11 11:21:52.609311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/Makefile	2022-02-25 13:37:31.095472996 +0800
@@ -31,20 +31,9 @@
 FIRECRACKER_CONTAINERD_BUILDER_IMAGE?=golang:1.13-buster
 export FIRECRACKER_CONTAINERD_TEST_IMAGE?=localhost/firecracker-containerd-test
 export GO_CACHE_VOLUME_NAME?=gocache
-export ROOTFS_CACHE_VOLUME_NAME ?= rootfscache
-
-# This Makefile uses Firecracker's pre-build Linux kernels for x86_64 and aarch64.
-host_arch=$(shell arch)
-ifeq ($(host_arch),x86_64)
-	kernel_sha256sum="ea5e7d5cf494a8c4ba043259812fc018b44880d70bcbbfc4d57d2760631b1cd6"
-else ifeq ($(host_arch),aarch64)
-	kernel_sha256sum="e2d7c3d6cc123de9e6052d1f434ca7b47635a1f630d63f7fcc1b7164958375e4"
-else
-$(error "$(host_arch) is not supported by Firecracker")
-endif
-FIRECRACKER_TARGET?=$(host_arch)-unknown-linux-musl
 
 FIRECRACKER_DIR=$(SUBMODULES)/firecracker
+FIRECRACKER_TARGET?=x86_64-unknown-linux-musl
 FIRECRACKER_BIN=$(FIRECRACKER_DIR)/build/cargo_target/$(FIRECRACKER_TARGET)/release/firecracker
 FIRECRACKER_BUILDER_NAME?=firecracker-builder
 CARGO_CACHE_VOLUME_NAME?=cargocache
@@ -99,10 +88,8 @@
 	$(MAKE) -C tools/image-builder distclean
 	$(call rmi-if-exists,localhost/$(RUNC_BUILDER_NAME):$(DOCKER_IMAGE_TAG))
 	$(call rmi-if-exists,localhost/$(FIRECRACKER_BUILDER_NAME):$(DOCKER_IMAGE_TAG))
-	docker volume rm -f \
-		$(CARGO_CACHE_VOLUME_NAME) \
-		$(GO_CACHE_VOLUME_NAME) \
-		$(ROOTFS_CACHE_VOLUME_NAME)
+	docker volume rm -f $(CARGO_CACHE_VOLUME_NAME)
+	docker volume rm -f $(GO_CACHE_VOLUME_NAME)
 	$(call rmi-if-exists,$(FIRECRACKER_CONTAINERD_TEST_IMAGE):$(DOCKER_IMAGE_TAG))
 	$(call rmi-if-exists,localhost/$(PROTO_BUILDER_NAME):$(DOCKER_IMAGE_TAG))
 
@@ -184,8 +171,8 @@
 DEFAULT_VMLINUX_NAME?=default-vmlinux.bin
 $(DEFAULT_VMLINUX_NAME):
 	curl --silent --show-error --retry 3 --max-time 30 --output $@ \
-		"https://s3.amazonaws.com/spec.ccfc.min/img/quickstart_guide/$(host_arch)/kernels/vmlinux.bin"
-	echo "$(kernel_sha256sum) $@" | sha256sum -c -
+		"https://s3.amazonaws.com/spec.ccfc.min/img/quickstart_guide/x86_64/kernels/vmlinux.bin"
+	echo "bc7e2dbf12cf7038937abf42056f6bcd405d3eef4d27aaa3016f0ba15069ae4b $@" | sha256sum -c -
 	chmod 0400 $@
 
 DEFAULT_VMLINUX_INSTALLPATH=$(FIRECRACKER_CONTAINERD_RUNTIME_DIR)/$(DEFAULT_VMLINUX_NAME)
@@ -294,7 +281,8 @@
 # Firecracker submodule
 ##########################
 .PHONY: firecracker
-firecracker: $(FIRECRACKER_BIN)
+firecracker:
+	_submodules/firecracker/tools/devtool build --release
 
 .PHONY: install-firecracker
 install-firecracker: firecracker
@@ -303,14 +291,31 @@
 $(FIRECRACKER_DIR)/Cargo.toml:
 	git submodule update --init --recursive $(FIRECRACKER_DIR)
 
-$(FIRECRACKER_BIN): $(FIRECRACKER_DIR)/Cargo.toml
-	$(FIRECRACKER_DIR)/tools/devtool -y build --release && \
-		$(FIRECRACKER_DIR)/tools/devtool strip
+tools/firecracker-builder-stamp: tools/docker/Dockerfile.firecracker-builder
+	docker build \
+		-t localhost/$(FIRECRACKER_BUILDER_NAME):$(DOCKER_IMAGE_TAG) \
+		-f tools/docker/Dockerfile.firecracker-builder \
+		tools/docker
+	touch $@
+
+$(FIRECRACKER_BIN): $(FIRECRACKER_DIR)/Cargo.toml tools/firecracker-builder-stamp
+	docker run --rm -it --user $(UID) \
+		--volume $(CURDIR)/$(FIRECRACKER_DIR):/src \
+		--volume $(CARGO_CACHE_VOLUME_NAME):/usr/local/cargo/registry \
+		-e HOME=/tmp \
+		--workdir /src \
+		localhost/$(FIRECRACKER_BUILDER_NAME):$(DOCKER_IMAGE_TAG) \
+		cargo build --release --target $(FIRECRACKER_TARGET)
 
 .PHONY: firecracker-clean
 firecracker-clean:
-	- $(FIRECRACKER_DIR)/tools/devtool distclean
-	- rm $(FIRECRACKER_BIN)
+	rm -f $(FIRECRACKER_BIN)
+	- docker run --rm -it --user $(UID) \
+		--volume $(CURDIR)/$(FIRECRACKER_DIR):/src \
+		-e HOME=/tmp \
+		--workdir /src \
+		localhost/$(FIRECRACKER_BUILDER_NAME):$(DOCKER_IMAGE_TAG) \
+		cargo clean
 
 ##########################
 # RunC submodule
diff -ur ./proto/firecracker.pb.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/firecracker.pb.go
--- ./proto/firecracker.pb.go	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/firecracker.pb.go	2022-02-25 13:37:31.107472996 +0800
@@ -207,6 +207,8 @@
 	LogFifoPath          string   `protobuf:"bytes,3,opt,name=LogFifoPath,json=logFifoPath,proto3" json:"LogFifoPath,omitempty"`
 	MetricsFifoPath      string   `protobuf:"bytes,4,opt,name=MetricsFifoPath,json=metricsFifoPath,proto3" json:"MetricsFifoPath,omitempty"`
 	CgroupPath           string   `protobuf:"bytes,5,opt,name=CgroupPath,json=cgroupPath,proto3" json:"CgroupPath,omitempty"`
+	UPFSockPath          string   `protobuf:"bytes,6,opt,name=UPFSockPath,json=uPFSockPath,proto3" json:"UPFSockPath,omitempty"`
+	FirecrackerPID       string   `protobuf:"bytes,7,opt,name=FirecrackerPID,json=firecrackerPID,proto3" json:"FirecrackerPID,omitempty"`
 	XXX_NoUnkeyedLiteral struct{} `json:"-"`
 	XXX_unrecognized     []byte   `json:"-"`
 	XXX_sizecache        int32    `json:"-"`
@@ -271,6 +273,20 @@
 	return ""
 }
 
+func (m *CreateVMResponse) GetUPFSockPath() string {
+	if m != nil {
+		return m.UPFSockPath
+	}
+	return ""
+}
+
+func (m *CreateVMResponse) GetFirecrackerPID() string {
+	if m != nil {
+		return m.FirecrackerPID
+	}
+	return ""
+}
+
 type PauseVMRequest struct {
 	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,json=vMID,proto3" json:"VMID,omitempty"`
 	XXX_NoUnkeyedLiteral struct{} `json:"-"`
@@ -669,6 +685,198 @@
 	return ""
 }
 
+type CreateSnapshotRequest struct {
+	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,json=vMID,proto3" json:"VMID,omitempty"`
+	SnapshotFilePath     string   `protobuf:"bytes,2,opt,name=SnapshotFilePath,json=snapshotFilePath,proto3" json:"SnapshotFilePath,omitempty"`
+	MemFilePath          string   `protobuf:"bytes,3,opt,name=MemFilePath,json=memFilePath,proto3" json:"MemFilePath,omitempty"`
+	XXX_NoUnkeyedLiteral struct{} `json:"-"`
+	XXX_unrecognized     []byte   `json:"-"`
+	XXX_sizecache        int32    `json:"-"`
+}
+
+func (m *CreateSnapshotRequest) Reset()         { *m = CreateSnapshotRequest{} }
+func (m *CreateSnapshotRequest) String() string { return proto.CompactTextString(m) }
+func (*CreateSnapshotRequest) ProtoMessage()    {}
+func (*CreateSnapshotRequest) Descriptor() ([]byte, []int) {
+	return fileDescriptor_a73317e9fb8da571, []int{11}
+}
+func (m *CreateSnapshotRequest) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_CreateSnapshotRequest.Unmarshal(m, b)
+}
+func (m *CreateSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_CreateSnapshotRequest.Marshal(b, m, deterministic)
+}
+func (m *CreateSnapshotRequest) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_CreateSnapshotRequest.Merge(m, src)
+}
+func (m *CreateSnapshotRequest) XXX_Size() int {
+	return xxx_messageInfo_CreateSnapshotRequest.Size(m)
+}
+func (m *CreateSnapshotRequest) XXX_DiscardUnknown() {
+	xxx_messageInfo_CreateSnapshotRequest.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_CreateSnapshotRequest proto.InternalMessageInfo
+
+func (m *CreateSnapshotRequest) GetVMID() string {
+	if m != nil {
+		return m.VMID
+	}
+	return ""
+}
+
+func (m *CreateSnapshotRequest) GetSnapshotFilePath() string {
+	if m != nil {
+		return m.SnapshotFilePath
+	}
+	return ""
+}
+
+func (m *CreateSnapshotRequest) GetMemFilePath() string {
+	if m != nil {
+		return m.MemFilePath
+	}
+	return ""
+}
+
+type LoadSnapshotRequest struct {
+	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,json=vMID,proto3" json:"VMID,omitempty"`
+	SnapshotFilePath     string   `protobuf:"bytes,2,opt,name=SnapshotFilePath,json=snapshotFilePath,proto3" json:"SnapshotFilePath,omitempty"`
+	MemFilePath          string   `protobuf:"bytes,3,opt,name=MemFilePath,json=memFilePath,proto3" json:"MemFilePath,omitempty"`
+	EnableUserPF         bool     `protobuf:"varint,4,opt,name=EnableUserPF,json=enableUserPF,proto3" json:"EnableUserPF,omitempty"`
+	XXX_NoUnkeyedLiteral struct{} `json:"-"`
+	XXX_unrecognized     []byte   `json:"-"`
+	XXX_sizecache        int32    `json:"-"`
+}
+
+func (m *LoadSnapshotRequest) Reset()         { *m = LoadSnapshotRequest{} }
+func (m *LoadSnapshotRequest) String() string { return proto.CompactTextString(m) }
+func (*LoadSnapshotRequest) ProtoMessage()    {}
+func (*LoadSnapshotRequest) Descriptor() ([]byte, []int) {
+	return fileDescriptor_a73317e9fb8da571, []int{12}
+}
+func (m *LoadSnapshotRequest) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_LoadSnapshotRequest.Unmarshal(m, b)
+}
+func (m *LoadSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_LoadSnapshotRequest.Marshal(b, m, deterministic)
+}
+func (m *LoadSnapshotRequest) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_LoadSnapshotRequest.Merge(m, src)
+}
+func (m *LoadSnapshotRequest) XXX_Size() int {
+	return xxx_messageInfo_LoadSnapshotRequest.Size(m)
+}
+func (m *LoadSnapshotRequest) XXX_DiscardUnknown() {
+	xxx_messageInfo_LoadSnapshotRequest.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_LoadSnapshotRequest proto.InternalMessageInfo
+
+func (m *LoadSnapshotRequest) GetVMID() string {
+	if m != nil {
+		return m.VMID
+	}
+	return ""
+}
+
+func (m *LoadSnapshotRequest) GetSnapshotFilePath() string {
+	if m != nil {
+		return m.SnapshotFilePath
+	}
+	return ""
+}
+
+func (m *LoadSnapshotRequest) GetMemFilePath() string {
+	if m != nil {
+		return m.MemFilePath
+	}
+	return ""
+}
+
+func (m *LoadSnapshotRequest) GetEnableUserPF() bool {
+	if m != nil {
+		return m.EnableUserPF
+	}
+	return false
+}
+
+type LoadResponse struct {
+	FirecrackerPID       string   `protobuf:"bytes,1,opt,name=FirecrackerPID,json=firecrackerPID,proto3" json:"FirecrackerPID,omitempty"`
+	XXX_NoUnkeyedLiteral struct{} `json:"-"`
+	XXX_unrecognized     []byte   `json:"-"`
+	XXX_sizecache        int32    `json:"-"`
+}
+
+func (m *LoadResponse) Reset()         { *m = LoadResponse{} }
+func (m *LoadResponse) String() string { return proto.CompactTextString(m) }
+func (*LoadResponse) ProtoMessage()    {}
+func (*LoadResponse) Descriptor() ([]byte, []int) {
+	return fileDescriptor_a73317e9fb8da571, []int{13}
+}
+func (m *LoadResponse) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_LoadResponse.Unmarshal(m, b)
+}
+func (m *LoadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_LoadResponse.Marshal(b, m, deterministic)
+}
+func (m *LoadResponse) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_LoadResponse.Merge(m, src)
+}
+func (m *LoadResponse) XXX_Size() int {
+	return xxx_messageInfo_LoadResponse.Size(m)
+}
+func (m *LoadResponse) XXX_DiscardUnknown() {
+	xxx_messageInfo_LoadResponse.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_LoadResponse proto.InternalMessageInfo
+
+func (m *LoadResponse) GetFirecrackerPID() string {
+	if m != nil {
+		return m.FirecrackerPID
+	}
+	return ""
+}
+
+type OffloadRequest struct {
+	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,json=vMID,proto3" json:"VMID,omitempty"`
+	XXX_NoUnkeyedLiteral struct{} `json:"-"`
+	XXX_unrecognized     []byte   `json:"-"`
+	XXX_sizecache        int32    `json:"-"`
+}
+
+func (m *OffloadRequest) Reset()         { *m = OffloadRequest{} }
+func (m *OffloadRequest) String() string { return proto.CompactTextString(m) }
+func (*OffloadRequest) ProtoMessage()    {}
+func (*OffloadRequest) Descriptor() ([]byte, []int) {
+	return fileDescriptor_a73317e9fb8da571, []int{14}
+}
+func (m *OffloadRequest) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_OffloadRequest.Unmarshal(m, b)
+}
+func (m *OffloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_OffloadRequest.Marshal(b, m, deterministic)
+}
+func (m *OffloadRequest) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_OffloadRequest.Merge(m, src)
+}
+func (m *OffloadRequest) XXX_Size() int {
+	return xxx_messageInfo_OffloadRequest.Size(m)
+}
+func (m *OffloadRequest) XXX_DiscardUnknown() {
+	xxx_messageInfo_OffloadRequest.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_OffloadRequest proto.InternalMessageInfo
+
+func (m *OffloadRequest) GetVMID() string {
+	if m != nil {
+		return m.VMID
+	}
+	return ""
+}
+
 type JailerConfig struct {
 	NetNS string `protobuf:"bytes,1,opt,name=NetNS,json=netNS,proto3" json:"NetNS,omitempty"`
 	// List of the physical numbers of the CPUs on which processes in that
@@ -709,7 +917,7 @@
 func (m *JailerConfig) String() string { return proto.CompactTextString(m) }
 func (*JailerConfig) ProtoMessage()    {}
 func (*JailerConfig) Descriptor() ([]byte, []int) {
-	return fileDescriptor_a73317e9fb8da571, []int{11}
+	return fileDescriptor_a73317e9fb8da571, []int{15}
 }
 func (m *JailerConfig) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_JailerConfig.Unmarshal(m, b)
@@ -790,7 +998,7 @@
 func (m *UpdateBalloonRequest) String() string { return proto.CompactTextString(m) }
 func (*UpdateBalloonRequest) ProtoMessage()    {}
 func (*UpdateBalloonRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_a73317e9fb8da571, []int{12}
+	return fileDescriptor_a73317e9fb8da571, []int{16}
 }
 func (m *UpdateBalloonRequest) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_UpdateBalloonRequest.Unmarshal(m, b)
@@ -835,7 +1043,7 @@
 func (m *GetBalloonConfigRequest) String() string { return proto.CompactTextString(m) }
 func (*GetBalloonConfigRequest) ProtoMessage()    {}
 func (*GetBalloonConfigRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_a73317e9fb8da571, []int{13}
+	return fileDescriptor_a73317e9fb8da571, []int{17}
 }
 func (m *GetBalloonConfigRequest) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_GetBalloonConfigRequest.Unmarshal(m, b)
@@ -873,7 +1081,7 @@
 func (m *GetBalloonConfigResponse) String() string { return proto.CompactTextString(m) }
 func (*GetBalloonConfigResponse) ProtoMessage()    {}
 func (*GetBalloonConfigResponse) Descriptor() ([]byte, []int) {
-	return fileDescriptor_a73317e9fb8da571, []int{14}
+	return fileDescriptor_a73317e9fb8da571, []int{18}
 }
 func (m *GetBalloonConfigResponse) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_GetBalloonConfigResponse.Unmarshal(m, b)
@@ -911,7 +1119,7 @@
 func (m *GetBalloonStatsRequest) String() string { return proto.CompactTextString(m) }
 func (*GetBalloonStatsRequest) ProtoMessage()    {}
 func (*GetBalloonStatsRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_a73317e9fb8da571, []int{15}
+	return fileDescriptor_a73317e9fb8da571, []int{19}
 }
 func (m *GetBalloonStatsRequest) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_GetBalloonStatsRequest.Unmarshal(m, b)
@@ -977,7 +1185,7 @@
 func (m *GetBalloonStatsResponse) String() string { return proto.CompactTextString(m) }
 func (*GetBalloonStatsResponse) ProtoMessage()    {}
 func (*GetBalloonStatsResponse) Descriptor() ([]byte, []int) {
-	return fileDescriptor_a73317e9fb8da571, []int{16}
+	return fileDescriptor_a73317e9fb8da571, []int{20}
 }
 func (m *GetBalloonStatsResponse) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_GetBalloonStatsResponse.Unmarshal(m, b)
@@ -1107,7 +1315,7 @@
 func (m *UpdateBalloonStatsRequest) String() string { return proto.CompactTextString(m) }
 func (*UpdateBalloonStatsRequest) ProtoMessage()    {}
 func (*UpdateBalloonStatsRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_a73317e9fb8da571, []int{17}
+	return fileDescriptor_a73317e9fb8da571, []int{21}
 }
 func (m *UpdateBalloonStatsRequest) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_UpdateBalloonStatsRequest.Unmarshal(m, b)
@@ -1154,6 +1362,10 @@
 	proto.RegisterType((*UpdateVMMetadataRequest)(nil), "UpdateVMMetadataRequest")
 	proto.RegisterType((*GetVMMetadataRequest)(nil), "GetVMMetadataRequest")
 	proto.RegisterType((*GetVMMetadataResponse)(nil), "GetVMMetadataResponse")
+	proto.RegisterType((*CreateSnapshotRequest)(nil), "CreateSnapshotRequest")
+	proto.RegisterType((*LoadSnapshotRequest)(nil), "LoadSnapshotRequest")
+	proto.RegisterType((*LoadResponse)(nil), "LoadResponse")
+	proto.RegisterType((*OffloadRequest)(nil), "OffloadRequest")
 	proto.RegisterType((*JailerConfig)(nil), "JailerConfig")
 	proto.RegisterType((*UpdateBalloonRequest)(nil), "UpdateBalloonRequest")
 	proto.RegisterType((*GetBalloonConfigRequest)(nil), "GetBalloonConfigRequest")
@@ -1166,70 +1378,77 @@
 func init() { proto.RegisterFile("firecracker.proto", fileDescriptor_a73317e9fb8da571) }
 
 var fileDescriptor_a73317e9fb8da571 = []byte{
-	// 1032 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xdf, 0x6e, 0xdb, 0xb6,
-	0x17, 0xfe, 0xa9, 0xb2, 0x93, 0xf8, 0x38, 0x76, 0x62, 0x22, 0x69, 0xd5, 0xa2, 0x08, 0x0c, 0xe1,
-	0xb7, 0xce, 0x28, 0xb6, 0x00, 0x4b, 0x76, 0x31, 0xec, 0x66, 0x75, 0xec, 0x3a, 0x55, 0x3b, 0xa5,
-	0x06, 0x9d, 0x04, 0xd8, 0x76, 0xc5, 0xc8, 0xc7, 0x8a, 0x6a, 0x49, 0xf4, 0x44, 0x2a, 0x6d, 0x5e,
-	0x6b, 0xbb, 0xd9, 0x73, 0xec, 0x5d, 0x76, 0x3f, 0x90, 0x92, 0x2d, 0xd9, 0xc9, 0xdc, 0x00, 0xbb,
-	0xda, 0x95, 0xcd, 0xef, 0x7c, 0xe4, 0xf9, 0xf3, 0x1d, 0x1e, 0x0a, 0x5a, 0x93, 0x20, 0x41, 0x2f,
-	0x61, 0xde, 0x14, 0x93, 0xc3, 0x59, 0xc2, 0x25, 0x7f, 0x56, 0x97, 0xb7, 0x33, 0x14, 0xd9, 0xc2,
-	0xfe, 0xa3, 0x0a, 0x3b, 0xbd, 0x04, 0x99, 0xc4, 0x4b, 0x97, 0xe2, 0xaf, 0x29, 0x0a, 0x49, 0x08,
-	0x54, 0x2e, 0x5d, 0xa7, 0x6f, 0x19, 0x6d, 0xa3, 0x53, 0xa3, 0x95, 0x1b, 0xd7, 0xe9, 0x93, 0x57,
-	0x00, 0x2e, 0xf3, 0xae, 0x83, 0x18, 0x7b, 0x13, 0xdf, 0x7a, 0xd4, 0x36, 0x3a, 0xf5, 0xa3, 0xf6,
-	0xe1, 0xa0, 0x38, 0x7c, 0x6e, 0xe5, 0xf1, 0x24, 0xf0, 0xd3, 0x84, 0xc9, 0x80, 0xc7, 0x14, 0xa2,
-	0xc5, 0x1e, 0xd2, 0x81, 0x9d, 0x77, 0x98, 0xc4, 0x18, 0x3a, 0x11, 0xf3, 0x71, 0xc8, 0xe4, 0xb5,
-	0x65, 0x6a, 0x07, 0x3b, 0xd3, 0x65, 0x98, 0x1c, 0x00, 0x64, 0xcc, 0x6e, 0xe2, 0x0b, 0xab, 0xa2,
-	0x49, 0x30, 0x5d, 0x20, 0xe4, 0x18, 0x6a, 0x94, 0x73, 0xd9, 0x4f, 0x82, 0x1b, 0xb4, 0xaa, 0x3a,
-	0x94, 0xfd, 0x72, 0x28, 0x0b, 0x23, 0xad, 0x25, 0xf3, 0xbf, 0xe4, 0x3b, 0xa8, 0xeb, 0x3f, 0x2e,
-	0x4f, 0x63, 0x29, 0xac, 0x8d, 0xb6, 0xd9, 0xa9, 0x1f, 0x3d, 0x2e, 0x6f, 0x2b, 0xcc, 0xb4, 0x3e,
-	0x2e, 0xa8, 0xe4, 0x2d, 0xb4, 0xce, 0x50, 0x7e, 0xe4, 0xc9, 0xd4, 0x89, 0x25, 0x26, 0x13, 0xe6,
-	0xa1, 0xb0, 0x36, 0xf5, 0xfe, 0xe7, 0xe5, 0xfd, 0xab, 0x24, 0xda, 0x8a, 0x57, 0xb7, 0x91, 0x17,
-	0xd0, 0xec, 0xf1, 0x58, 0xb2, 0x20, 0xc6, 0xa4, 0xa7, 0x8e, 0xb7, 0xb6, 0xda, 0x46, 0xa7, 0x4a,
-	0x9b, 0xde, 0x12, 0x4a, 0xbe, 0x07, 0xeb, 0xf5, 0xa7, 0x40, 0x76, 0x27, 0x12, 0x93, 0x6e, 0x18,
-	0x9e, 0x33, 0x31, 0x15, 0x7d, 0x0c, 0x51, 0xe2, 0xd8, 0xaa, 0xb5, 0x8d, 0xce, 0x16, 0xb5, 0xf0,
-	0x1f, 0xec, 0xe4, 0x1b, 0xd8, 0x7e, 0xcb, 0x82, 0x50, 0x1d, 0xa5, 0xb4, 0xb0, 0x40, 0x57, 0xa8,
-	0x71, 0x58, 0x06, 0xe9, 0xf6, 0x87, 0xd2, 0x4a, 0x85, 0x75, 0x1e, 0x44, 0xc8, 0x53, 0x39, 0x42,
-	0x8f, 0xc7, 0x63, 0x61, 0xd5, 0xdb, 0x46, 0xa7, 0x41, 0x9b, 0x72, 0x09, 0x25, 0x6d, 0xa8, 0xff,
-	0xc8, 0xfd, 0x41, 0x30, 0xe1, 0x5a, 0xbf, 0x6d, 0x2d, 0x4d, 0x3d, 0x2c, 0x20, 0xa5, 0xb2, 0x8b,
-	0x32, 0x09, 0x3c, 0xb1, 0x60, 0x35, 0x32, 0x95, 0xa3, 0x65, 0x98, 0xfc, 0x00, 0x8d, 0x13, 0x16,
-	0x86, 0x9c, 0xc7, 0x7d, 0xbc, 0x09, 0x3c, 0xb4, 0x9a, 0x3a, 0xce, 0xa7, 0xe5, 0x92, 0x2e, 0x11,
-	0x68, 0xe3, 0xaa, 0xbc, 0xb4, 0x7f, 0x33, 0x60, 0xb7, 0x68, 0x5d, 0x31, 0xe3, 0xb1, 0xc0, 0x7b,
-	0x7b, 0xf7, 0x00, 0x60, 0xc4, 0xbd, 0x29, 0x4a, 0x1d, 0xce, 0xa3, 0xac, 0x9f, 0xc4, 0x02, 0x59,
-	0xcd, 0xca, 0x7c, 0x50, 0x56, 0x95, 0xfb, 0xb3, 0x3a, 0x00, 0xe8, 0xf9, 0x09, 0x4f, 0x67, 0x9a,
-	0x54, 0xcd, 0x7c, 0x79, 0x0b, 0xc4, 0xfe, 0x3f, 0x34, 0x87, 0x2c, 0x15, 0xeb, 0x6f, 0x9b, 0xfd,
-	0x05, 0xec, 0x50, 0x14, 0x69, 0xf4, 0x19, 0xda, 0x3b, 0x68, 0x8c, 0x24, 0x9f, 0xad, 0xbf, 0xb9,
-	0x77, 0xb5, 0x7d, 0x74, 0x9f, 0xb6, 0xf6, 0x0b, 0xd8, 0x3d, 0x45, 0x79, 0xe9, 0x3a, 0xf1, 0x84,
-	0xaf, 0x73, 0xfa, 0xbb, 0x01, 0xad, 0x12, 0xf1, 0x3f, 0x52, 0xf7, 0x01, 0xec, 0x8d, 0x54, 0xd0,
-	0x2e, 0x4a, 0x36, 0x66, 0x92, 0xad, 0xab, 0xd8, 0x33, 0xd8, 0x9a, 0xd3, 0xf2, 0xa8, 0xb7, 0xa2,
-	0x7c, 0x6d, 0x3b, 0xf0, 0xe4, 0x62, 0x36, 0xd6, 0x3d, 0xf7, 0x6f, 0x8f, 0x7a, 0x09, 0x7b, 0xa7,
-	0x0f, 0x0c, 0xc9, 0x3e, 0x86, 0xfd, 0x15, 0x6e, 0x5e, 0xf7, 0xb2, 0x03, 0x63, 0xc5, 0xc1, 0x9f,
-	0xc6, 0xf2, 0x24, 0x20, 0x7b, 0x50, 0x3d, 0x43, 0x79, 0x36, 0xca, 0x99, 0xd5, 0x58, 0x2d, 0x94,
-	0xbf, 0xde, 0xf0, 0x42, 0xe4, 0xf1, 0x55, 0xbc, 0xe1, 0x85, 0x50, 0x98, 0x8b, 0x91, 0xc8, 0x35,
-	0xa9, 0x44, 0x18, 0x09, 0xb2, 0x0b, 0xe6, 0x85, 0xd3, 0xd7, 0x02, 0x34, 0xa8, 0x99, 0x3a, 0x7d,
-	0x85, 0x9c, 0x3a, 0x7d, 0x5d, 0xed, 0x06, 0x35, 0xfd, 0x4c, 0xf2, 0x92, 0x0c, 0x1b, 0xab, 0x32,
-	0x90, 0x57, 0xd0, 0xd2, 0x63, 0xf6, 0xf5, 0xa7, 0x19, 0x17, 0x38, 0xe4, 0x61, 0xe0, 0xdd, 0x5a,
-	0x9b, 0x6d, 0xa3, 0xd3, 0x3c, 0x22, 0x87, 0x77, 0x2c, 0xb4, 0x35, 0x5e, 0x85, 0xec, 0x37, 0xb0,
-	0x97, 0x09, 0x90, 0xcf, 0x86, 0x75, 0xd5, 0x7f, 0x0e, 0xb5, 0x6e, 0xa4, 0xe6, 0xa9, 0x1b, 0x5c,
-	0xe9, 0xf4, 0x4c, 0x5a, 0x63, 0x73, 0xc0, 0xfe, 0x1a, 0x9e, 0x9c, 0xa2, 0xcc, 0x8f, 0xc9, 0xc7,
-	0xe2, 0x1a, 0x09, 0x7e, 0x01, 0xeb, 0x2e, 0x3d, 0x57, 0xa1, 0x98, 0x65, 0xf9, 0xcc, 0x35, 0x1e,
-	0x3a, 0xcb, 0x32, 0xbe, 0xfd, 0x15, 0x3c, 0x2e, 0x0e, 0x1f, 0x49, 0x26, 0xc5, 0xba, 0x50, 0xfe,
-	0x32, 0xcb, 0xa1, 0xe7, 0xf4, 0x3c, 0x14, 0x95, 0xb3, 0x27, 0x53, 0x16, 0xaa, 0x9c, 0x8d, 0x3c,
-	0xe7, 0x39, 0xa0, 0xae, 0x5c, 0x66, 0x1d, 0x32, 0x1f, 0x45, 0x5e, 0x93, 0x3a, 0x2b, 0x20, 0x75,
-	0xe5, 0xba, 0x37, 0x2c, 0x08, 0xd9, 0x55, 0x88, 0x2e, 0x46, 0x3c, 0xb9, 0xd5, 0x4d, 0x60, 0xd2,
-	0x1d, 0xb6, 0x0c, 0x2b, 0xad, 0xfb, 0x81, 0x98, 0xf6, 0x98, 0x77, 0x8d, 0xd9, 0x33, 0x6d, 0x52,
-	0x18, 0x2f, 0x10, 0x65, 0x1f, 0x24, 0x38, 0x3f, 0xa4, 0x9a, 0xd9, 0x27, 0x0b, 0x84, 0x1c, 0x02,
-	0x79, 0x93, 0xfa, 0x28, 0xc3, 0xab, 0x6e, 0x18, 0x72, 0x4f, 0x7f, 0x31, 0x08, 0xdd, 0x33, 0x26,
-	0x25, 0xd7, 0x77, 0x2c, 0x2a, 0xb2, 0x9c, 0x3f, 0x60, 0x41, 0x98, 0x26, 0xfa, 0x15, 0xd6, 0x91,
-	0x5d, 0x2f, 0xc3, 0x2a, 0x4b, 0x97, 0x7d, 0xe0, 0xc9, 0x80, 0xa5, 0xa1, 0x14, 0xfa, 0x89, 0x35,
-	0x69, 0x3d, 0x2a, 0x20, 0xcd, 0x08, 0xe2, 0x05, 0xa3, 0x96, 0x33, 0x0a, 0x88, 0x3c, 0x86, 0x8d,
-	0xd1, 0x47, 0x36, 0x73, 0x62, 0xfd, 0x7e, 0x9a, 0x74, 0x43, 0xe8, 0x15, 0xb1, 0x60, 0x53, 0xe1,
-	0xef, 0x53, 0xa9, 0xdf, 0x48, 0x93, 0x6e, 0x8a, 0x6c, 0xa9, 0x2a, 0x7f, 0xce, 0x12, 0x1f, 0x75,
-	0xb7, 0x6d, 0x67, 0x95, 0x97, 0x73, 0x40, 0x79, 0xcc, 0xac, 0x59, 0xe5, 0x1b, 0x99, 0x47, 0x59,
-	0x40, 0x9a, 0xc1, 0x25, 0x0b, 0xf3, 0x82, 0x35, 0x73, 0x46, 0x01, 0xd9, 0x08, 0x4f, 0x97, 0x7a,
-	0xff, 0x73, 0x8d, 0x42, 0xbe, 0x85, 0x7d, 0xcd, 0x19, 0xf2, 0x30, 0x0c, 0x62, 0x5f, 0x7f, 0x88,
-	0xdc, 0xb0, 0x70, 0x2e, 0xfc, 0xbe, 0xb8, 0xcf, 0xf8, 0xf2, 0xcb, 0x7b, 0x2e, 0x29, 0xd9, 0x82,
-	0x4a, 0xef, 0xfd, 0xf0, 0xa7, 0xdd, 0xff, 0xa9, 0x7f, 0x27, 0xce, 0x59, 0x7f, 0xd7, 0x38, 0xd9,
-	0xfc, 0xb9, 0xaa, 0xbf, 0x22, 0xaf, 0x36, 0xf4, 0xcf, 0xf1, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
-	0x28, 0xec, 0xce, 0x6b, 0x6e, 0x0a, 0x00, 0x00,
+	// 1150 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xdd, 0x8e, 0xda, 0x46,
+	0x1b, 0xfe, 0x1c, 0xc3, 0xee, 0xf2, 0xf2, 0xb3, 0xec, 0x7c, 0xbb, 0x89, 0x13, 0x45, 0x11, 0xb2,
+	0xda, 0x14, 0x45, 0xed, 0x4a, 0x4d, 0xaa, 0xaa, 0xea, 0x49, 0x43, 0x20, 0x6c, 0x9c, 0xc4, 0x1b,
+	0x34, 0x84, 0x48, 0x6d, 0x8f, 0x66, 0xcd, 0x0b, 0x38, 0xd8, 0x1e, 0xea, 0x19, 0x6f, 0xb2, 0xd7,
+	0xd2, 0xcb, 0xe8, 0x49, 0xaf, 0xa3, 0xf7, 0xd2, 0xb3, 0x1e, 0x54, 0x33, 0x36, 0xd8, 0xc0, 0x86,
+	0x44, 0xaa, 0x54, 0xa9, 0x47, 0x78, 0x9e, 0xf7, 0x99, 0x79, 0xff, 0x9e, 0xf9, 0x01, 0x8e, 0x26,
+	0x7e, 0x8c, 0x5e, 0xcc, 0xbc, 0x39, 0xc6, 0xa7, 0x8b, 0x98, 0x4b, 0x7e, 0xa7, 0x2a, 0xaf, 0x16,
+	0x28, 0xd2, 0x81, 0xfd, 0x7b, 0x19, 0x0e, 0xbb, 0x31, 0x32, 0x89, 0x6f, 0x5c, 0x8a, 0xbf, 0x24,
+	0x28, 0x24, 0x21, 0x50, 0x7a, 0xe3, 0x3a, 0x3d, 0xcb, 0x68, 0x19, 0xed, 0x0a, 0x2d, 0x5d, 0xba,
+	0x4e, 0x8f, 0x3c, 0x06, 0x70, 0x99, 0x37, 0xf3, 0x23, 0xec, 0x4e, 0xa6, 0xd6, 0x8d, 0x96, 0xd1,
+	0xae, 0x3e, 0x6c, 0x9d, 0xf6, 0xf3, 0xc5, 0x97, 0x56, 0x1e, 0x4d, 0xfc, 0x69, 0x12, 0x33, 0xe9,
+	0xf3, 0x88, 0x42, 0xb8, 0x9a, 0x43, 0xda, 0x70, 0xf8, 0x02, 0xe3, 0x08, 0x03, 0x27, 0x64, 0x53,
+	0x1c, 0x30, 0x39, 0xb3, 0x4c, 0xed, 0xe0, 0x70, 0xbe, 0x0e, 0x93, 0x7b, 0x00, 0x29, 0xb3, 0x13,
+	0x4f, 0x85, 0x55, 0xd2, 0x24, 0x98, 0xaf, 0x10, 0xf2, 0x08, 0x2a, 0x94, 0x73, 0xd9, 0x8b, 0xfd,
+	0x4b, 0xb4, 0xca, 0x3a, 0x94, 0x93, 0x62, 0x28, 0x2b, 0x23, 0xad, 0xc4, 0xcb, 0x4f, 0xf2, 0x1d,
+	0x54, 0xf5, 0x87, 0xcb, 0x93, 0x48, 0x0a, 0x6b, 0xaf, 0x65, 0xb6, 0xab, 0x0f, 0x6f, 0x16, 0xa7,
+	0xe5, 0x66, 0x5a, 0x1d, 0xe7, 0x54, 0xf2, 0x1c, 0x8e, 0xce, 0x51, 0xbe, 0xe3, 0xf1, 0xdc, 0x89,
+	0x24, 0xc6, 0x13, 0xe6, 0xa1, 0xb0, 0xf6, 0xf5, 0xfc, 0xbb, 0xc5, 0xf9, 0x9b, 0x24, 0x7a, 0x14,
+	0x6d, 0x4e, 0x23, 0xf7, 0xa1, 0xd1, 0xe5, 0x91, 0x64, 0x7e, 0x84, 0x71, 0x57, 0x2d, 0x6f, 0x1d,
+	0xb4, 0x8c, 0x76, 0x99, 0x36, 0xbc, 0x35, 0x94, 0x7c, 0x0f, 0xd6, 0xd3, 0xf7, 0xbe, 0xec, 0x4c,
+	0x24, 0xc6, 0x9d, 0x20, 0x78, 0xcd, 0xc4, 0x5c, 0xf4, 0x30, 0x40, 0x89, 0x63, 0xab, 0xd2, 0x32,
+	0xda, 0x07, 0xd4, 0xc2, 0x0f, 0xd8, 0xc9, 0xd7, 0x50, 0x7b, 0xce, 0xfc, 0x40, 0x2d, 0xa5, 0x7a,
+	0x61, 0x81, 0xae, 0x50, 0xfd, 0xb4, 0x08, 0xd2, 0xda, 0xdb, 0xc2, 0x48, 0x85, 0xf5, 0xda, 0x0f,
+	0x91, 0x27, 0x72, 0x88, 0x1e, 0x8f, 0xc6, 0xc2, 0xaa, 0xb6, 0x8c, 0x76, 0x9d, 0x36, 0xe4, 0x1a,
+	0x4a, 0x5a, 0x50, 0x7d, 0xc9, 0xa7, 0x7d, 0x7f, 0xc2, 0x75, 0xff, 0x6a, 0xba, 0x35, 0xd5, 0x20,
+	0x87, 0x54, 0x97, 0x5d, 0x94, 0xb1, 0xef, 0x89, 0x15, 0xab, 0x9e, 0x76, 0x39, 0x5c, 0x87, 0xc9,
+	0x0f, 0x50, 0x7f, 0xc2, 0x82, 0x80, 0xf3, 0xa8, 0x87, 0x97, 0xbe, 0x87, 0x56, 0x43, 0xc7, 0x79,
+	0xbb, 0x58, 0xd2, 0x35, 0x02, 0xad, 0x5f, 0x14, 0x87, 0xf6, 0x5f, 0x06, 0x34, 0x73, 0xe9, 0x8a,
+	0x05, 0x8f, 0x04, 0x5e, 0xab, 0xdd, 0x7b, 0x00, 0x43, 0xee, 0xcd, 0x51, 0xea, 0x70, 0x6e, 0xa4,
+	0x7a, 0x12, 0x2b, 0x64, 0x33, 0x2b, 0xf3, 0x93, 0xb2, 0x2a, 0x5d, 0x9f, 0xd5, 0x3d, 0x80, 0xee,
+	0x34, 0xe6, 0xc9, 0x42, 0x93, 0xca, 0xa9, 0x2f, 0x6f, 0x85, 0x28, 0x5f, 0xa3, 0x41, 0x5f, 0x85,
+	0xa3, 0x09, 0x7b, 0xa9, 0xaf, 0x24, 0x87, 0x54, 0x2f, 0x0a, 0x15, 0x18, 0x38, 0x3d, 0x6b, 0x5f,
+	0x93, 0x1a, 0x93, 0x35, 0xd4, 0xfe, 0x0c, 0x1a, 0x03, 0x96, 0x88, 0xdd, 0xfb, 0xd6, 0xfe, 0x1c,
+	0x0e, 0x29, 0x8a, 0x24, 0xfc, 0x08, 0xed, 0x05, 0xd4, 0x87, 0x92, 0x2f, 0x76, 0x9f, 0x01, 0xdb,
+	0x2a, 0xb9, 0x71, 0x9d, 0x4a, 0xec, 0xfb, 0xd0, 0x3c, 0x43, 0xf9, 0xc6, 0x75, 0xa2, 0x09, 0xdf,
+	0xe5, 0xf4, 0x37, 0x03, 0x8e, 0x0a, 0xc4, 0xff, 0x46, 0x07, 0xed, 0x3e, 0x1c, 0x0f, 0x55, 0xd0,
+	0x2e, 0x4a, 0x36, 0x66, 0x92, 0xed, 0xaa, 0xd8, 0x1d, 0x38, 0x58, 0xd2, 0xb2, 0xa8, 0x0f, 0xc2,
+	0x6c, 0x6c, 0x3b, 0x70, 0x6b, 0xb4, 0x18, 0x6b, 0xf5, 0xfe, 0xd3, 0xa5, 0x1e, 0xc0, 0xf1, 0xd9,
+	0x27, 0x86, 0x64, 0x3f, 0x82, 0x93, 0x0d, 0x6e, 0x56, 0xf7, 0xa2, 0x03, 0x63, 0xc3, 0xc1, 0x15,
+	0x9c, 0xa4, 0x3b, 0x6d, 0x18, 0xb1, 0x85, 0x98, 0x71, 0xb9, 0x2b, 0xd2, 0x07, 0xd0, 0x5c, 0xd2,
+	0xfa, 0x7e, 0x80, 0x85, 0x96, 0x35, 0xc5, 0x06, 0xae, 0x1a, 0xe7, 0x62, 0xb8, 0xa2, 0x65, 0x8d,
+	0x0b, 0x73, 0xc8, 0xfe, 0xd5, 0x80, 0xff, 0xbf, 0xe4, 0x6c, 0xfc, 0xaf, 0x7b, 0x26, 0x36, 0xd4,
+	0x9e, 0x46, 0xec, 0x22, 0xc0, 0x91, 0xc0, 0x78, 0xd0, 0xd7, 0x7a, 0x39, 0xa0, 0x35, 0x2c, 0x60,
+	0xf6, 0xb7, 0x50, 0x53, 0xc1, 0xad, 0x8a, 0xb8, 0xbd, 0x79, 0x8d, 0x0f, 0x6d, 0xde, 0x57, 0x93,
+	0x49, 0xa0, 0xa7, 0x7e, 0xb8, 0x57, 0x7f, 0x18, 0xeb, 0x47, 0x39, 0x39, 0x86, 0xf2, 0x39, 0xca,
+	0xf3, 0x61, 0xc6, 0x2a, 0x47, 0x6a, 0xa0, 0xa6, 0x76, 0x07, 0x23, 0x91, 0xa5, 0x5a, 0xf2, 0x06,
+	0x23, 0xa1, 0x30, 0x17, 0x43, 0x91, 0xe5, 0x55, 0x0a, 0x31, 0x14, 0xa4, 0x09, 0xe6, 0xc8, 0xe9,
+	0xe9, 0x3c, 0xea, 0xd4, 0x4c, 0x9c, 0x9e, 0x42, 0xce, 0x9c, 0x9e, 0x16, 0x79, 0x9d, 0x9a, 0xd3,
+	0x74, 0xa7, 0x15, 0xd4, 0xbf, 0xb7, 0x75, 0x7e, 0x3d, 0x86, 0x23, 0x7d, 0x4f, 0x3e, 0x7d, 0xbf,
+	0xe0, 0x02, 0x07, 0x3c, 0xf0, 0xbd, 0x2b, 0x7d, 0x40, 0x35, 0x1e, 0x92, 0xd3, 0x2d, 0x0b, 0x3d,
+	0x1a, 0x6f, 0x42, 0xf6, 0x33, 0x38, 0x4e, 0x75, 0x9f, 0x1d, 0xee, 0xbb, 0x1a, 0x7a, 0x17, 0x2a,
+	0x9d, 0x50, 0x5d, 0x88, 0xae, 0x7f, 0xa1, 0xd3, 0x33, 0x69, 0x85, 0x2d, 0x01, 0xfb, 0x2b, 0xb8,
+	0x75, 0x86, 0x32, 0x5b, 0x26, 0xbb, 0xd7, 0x76, 0x54, 0xf3, 0x67, 0xb0, 0xb6, 0xe9, 0x59, 0xdf,
+	0xf2, 0xcb, 0x28, 0xbb, 0x34, 0x8d, 0x4f, 0xbd, 0x8c, 0x52, 0xbe, 0xfd, 0x25, 0xdc, 0xcc, 0x17,
+	0x1f, 0x4a, 0x26, 0xc5, 0xae, 0x50, 0xfe, 0x34, 0x8b, 0xa1, 0x67, 0xf4, 0x2c, 0x14, 0x95, 0xb3,
+	0x27, 0x13, 0x16, 0xa8, 0x9c, 0x8d, 0x2c, 0xe7, 0x25, 0xa0, 0x64, 0x9b, 0x5a, 0x07, 0x6c, 0x8a,
+	0x22, 0xab, 0x49, 0x95, 0xe5, 0x90, 0x3a, 0xe9, 0x3a, 0x97, 0xcc, 0x0f, 0x94, 0x4a, 0x5d, 0x0c,
+	0x79, 0x7c, 0xa5, 0x45, 0x60, 0xd2, 0x43, 0xb6, 0x0e, 0xab, 0x5e, 0xf7, 0x7c, 0x31, 0xef, 0x32,
+	0x6f, 0x86, 0xe9, 0x3b, 0xcb, 0xa4, 0x30, 0x5e, 0x21, 0xca, 0xde, 0x8f, 0x71, 0xb9, 0x48, 0x39,
+	0xb5, 0x4f, 0x56, 0x08, 0x39, 0x05, 0xf2, 0x2c, 0x99, 0xa2, 0x0c, 0x2e, 0x3a, 0x41, 0xc0, 0x3d,
+	0xfd, 0xe4, 0x13, 0x5a, 0x33, 0x26, 0x25, 0xb3, 0x2d, 0x8b, 0x8a, 0x2c, 0xe3, 0xf7, 0x99, 0x1f,
+	0x24, 0xb1, 0x7e, 0x46, 0xe9, 0xc8, 0x66, 0xeb, 0xb0, 0xde, 0x9c, 0xec, 0x2d, 0x8f, 0xfb, 0x2c,
+	0x09, 0xa4, 0xd0, 0x6f, 0x24, 0x93, 0x56, 0xc3, 0x1c, 0xd2, 0x0c, 0x3f, 0x5a, 0x31, 0x2a, 0x19,
+	0x23, 0x87, 0xc8, 0x4d, 0xd8, 0x1b, 0xbe, 0x63, 0x0b, 0x27, 0xd2, 0x0f, 0x20, 0x93, 0xee, 0x09,
+	0x3d, 0x22, 0x16, 0xec, 0x2b, 0xfc, 0x55, 0x22, 0xf5, 0x23, 0xc7, 0xa4, 0xfb, 0x22, 0x1d, 0xaa,
+	0xca, 0xbf, 0x66, 0xf1, 0x14, 0xb5, 0xda, 0x6a, 0x69, 0xe5, 0xe5, 0x12, 0x50, 0x1e, 0x53, 0x6b,
+	0x5a, 0xf9, 0x7a, 0xea, 0x51, 0xe6, 0x90, 0x66, 0x70, 0xc9, 0x82, 0xac, 0x60, 0x8d, 0x8c, 0x91,
+	0x43, 0x36, 0xc2, 0xed, 0x35, 0xed, 0x7f, 0x4c, 0x28, 0xe4, 0x1b, 0x38, 0xd1, 0x9c, 0x01, 0x0f,
+	0x02, 0x3f, 0x9a, 0xea, 0x97, 0xe4, 0x25, 0x0b, 0x96, 0x8d, 0x3f, 0x11, 0xd7, 0x19, 0x1f, 0x7c,
+	0x71, 0xcd, 0x26, 0x25, 0x07, 0x50, 0xea, 0xbe, 0x1a, 0xfc, 0xd8, 0xfc, 0x9f, 0xfa, 0x7a, 0xe2,
+	0x9c, 0xf7, 0x9a, 0xc6, 0x93, 0xfd, 0x9f, 0xca, 0xfa, 0x6f, 0xc0, 0xc5, 0x9e, 0xfe, 0x79, 0xf4,
+	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x48, 0x23, 0x18, 0xaf, 0x2f, 0x0c, 0x00, 0x00,
 }
diff -ur ./proto/firecracker.proto /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/firecracker.proto
--- ./proto/firecracker.proto	2022-02-11 11:21:52.613311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/firecracker.proto	2022-02-25 13:37:31.107472996 +0800
@@ -49,6 +49,8 @@
     string LogFifoPath = 3;
     string MetricsFifoPath = 4;
     string CgroupPath = 5;
+    string UPFSockPath = 6;
+    string FirecrackerPID = 7;
 }
 
 message PauseVMRequest {
@@ -103,6 +105,28 @@
     BIND = 1;
 }
 
+message CreateSnapshotRequest {
+    string VMID = 1;
+    string SnapshotFilePath = 2;
+    string MemFilePath = 3;
+}
+
+message LoadSnapshotRequest {
+    string VMID = 1;
+    string SnapshotFilePath = 2;
+    string MemFilePath = 3;
+    bool EnableUserPF = 4;
+}
+
+message LoadResponse {
+    string FirecrackerPID = 1;
+}
+
+message OffloadRequest {
+    string VMID = 1;
+}
+
+
 message JailerConfig {
     string NetNS = 1;
     // List of the physical numbers of the CPUs on which processes in that
diff -ur ./proto/service/fccontrol/fccontrol.proto /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/service/fccontrol/fccontrol.proto
--- ./proto/service/fccontrol/fccontrol.proto	2022-02-11 11:21:52.617311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/service/fccontrol/fccontrol.proto	2022-02-25 13:37:31.107472996 +0800
@@ -15,7 +15,7 @@
 
     // Resumes a VM
     rpc ResumeVM(ResumeVMRequest) returns (google.protobuf.Empty);
-
+    
     // Stops existing Firecracker instance by VM ID
     rpc StopVM(StopVMRequest) returns (google.protobuf.Empty);
 
@@ -42,4 +42,13 @@
 
     // Updates a balloon device statistics polling interval.
     rpc UpdateBalloonStats(UpdateBalloonStatsRequest) returns(google.protobuf.Empty);
+
+    // Loads VM from snapshot
+    rpc LoadSnapshot(LoadSnapshotRequest) returns (LoadResponse);
+
+    // Make a snapshot of a VM
+    rpc CreateSnapshot(CreateSnapshotRequest) returns (google.protobuf.Empty);
+
+    // Offload a snapshotted VM
+    rpc Offload(OffloadRequest) returns (google.protobuf.Empty);
 }
diff -ur ./proto/service/fccontrol/ttrpc/fccontrol.pb.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/service/fccontrol/ttrpc/fccontrol.pb.go
--- ./proto/service/fccontrol/ttrpc/fccontrol.pb.go	2022-02-11 11:21:52.617311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/proto/service/fccontrol/ttrpc/fccontrol.pb.go	2022-02-25 13:37:31.107472996 +0800
@@ -27,30 +27,33 @@
 func init() { proto.RegisterFile("fccontrol.proto", fileDescriptor_b99f53e2bf82c5ef) }
 
 var fileDescriptor_b99f53e2bf82c5ef = []byte{
-	// 357 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x3f, 0x4f, 0xf2, 0x50,
-	0x14, 0xc6, 0xe9, 0xf0, 0xf2, 0xc2, 0x35, 0x08, 0xdc, 0x04, 0x45, 0x4c, 0xba, 0xb8, 0x1f, 0x0c,
-	0x3a, 0x33, 0x80, 0x5a, 0x1d, 0x9a, 0x18, 0x88, 0x0c, 0x6e, 0x97, 0x72, 0x4a, 0x88, 0xa5, 0xb7,
-	0xb6, 0xa7, 0x83, 0x9b, 0x1f, 0x8f, 0xd1, 0xd1, 0x51, 0xba, 0xfb, 0x1d, 0x0c, 0xb4, 0x97, 0x3f,
-	0x85, 0xe4, 0x6e, 0xcf, 0xf9, 0x9d, 0x9e, 0xe7, 0x3c, 0xf7, 0x24, 0x65, 0x55, 0xd7, 0x71, 0xa4,
-	0x4f, 0xa1, 0xf4, 0x20, 0x08, 0x25, 0xc9, 0xd6, 0xe5, 0x54, 0xca, 0xa9, 0x87, 0xed, 0x75, 0x35,
-	0x8e, 0xdd, 0x36, 0xce, 0x03, 0xfa, 0xc8, 0x9a, 0x75, 0x77, 0x16, 0xa2, 0x13, 0x0a, 0xe7, 0x0d,
-	0xc3, 0x14, 0x75, 0x7e, 0xff, 0xb1, 0x93, 0x87, 0x2d, 0xe5, 0x6d, 0x56, 0xea, 0x87, 0x28, 0x08,
-	0x47, 0x36, 0xaf, 0x81, 0x92, 0x03, 0x7c, 0x8f, 0x31, 0xa2, 0x56, 0x7d, 0x87, 0x44, 0x81, 0xf4,
-	0x23, 0xe4, 0x1d, 0xf6, 0xff, 0x59, 0xc4, 0xd1, 0xea, 0xfb, 0x2a, 0x64, 0x4a, 0x7d, 0x7e, 0x06,
-	0x69, 0x1a, 0x50, 0x69, 0xe0, 0x7e, 0x95, 0x86, 0xdf, 0xb2, 0xd2, 0x00, 0xa3, 0x78, 0x9e, 0x2e,
-	0x51, 0x52, 0x37, 0x75, 0xcd, 0x8a, 0x43, 0x92, 0xc1, 0xc8, 0xe6, 0xa7, 0x90, 0x0a, 0xdd, 0x44,
-	0x87, 0x95, 0x2d, 0xa4, 0x91, 0xfd, 0xe4, 0xbb, 0x92, 0xd7, 0x61, 0xa3, 0xd5, 0x1c, 0xdf, 0x45,
-	0xd9, 0x7b, 0xba, 0xac, 0x32, 0x5c, 0x41, 0x1b, 0x49, 0x4c, 0x04, 0x09, 0xde, 0x80, 0xbd, 0x5a,
-	0xb7, 0xf3, 0x8e, 0xd5, 0x5e, 0x82, 0xc9, 0xfa, 0x46, 0x1b, 0x8b, 0x26, 0xe4, 0x91, 0xce, 0xa5,
-	0xcb, 0x2a, 0x56, 0x2e, 0x85, 0x75, 0x3c, 0x45, 0x0e, 0x67, 0xaf, 0xb0, 0x58, 0xcd, 0x42, 0xea,
-	0x09, 0xcf, 0x93, 0xd2, 0xef, 0x4b, 0xdf, 0x9d, 0x4d, 0x79, 0x13, 0xf2, 0x48, 0xb9, 0x5c, 0x1c,
-	0xe9, 0x6c, 0xcf, 0x91, 0x66, 0xcf, 0xda, 0xbc, 0x01, 0x7b, 0xb5, 0xfe, 0x1c, 0xd5, 0xad, 0xf7,
-	0x90, 0x04, 0x45, 0xfc, 0x1c, 0x72, 0x44, 0x79, 0x34, 0x0f, 0x1b, 0x59, 0x8a, 0x47, 0xc6, 0xf7,
-	0xb6, 0xa6, 0x46, 0x2d, 0x38, 0x84, 0x9a, 0x3c, 0xbd, 0xab, 0xc5, 0xd2, 0x2c, 0x7c, 0x2f, 0xcd,
-	0xc2, 0x67, 0x62, 0x1a, 0x8b, 0xc4, 0x34, 0xbe, 0x12, 0xd3, 0xf8, 0x49, 0x4c, 0xe3, 0xb5, 0xbc,
-	0xf9, 0x95, 0xc6, 0xc5, 0xf5, 0xd0, 0xcd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x66, 0x43, 0x0c,
-	0x39, 0x5e, 0x03, 0x00, 0x00,
+	// 406 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xbf, 0x6e, 0xe2, 0x40,
+	0x10, 0xc6, 0x71, 0xc3, 0x9f, 0xbd, 0x03, 0xc3, 0xea, 0xe0, 0x38, 0x4e, 0x72, 0x73, 0xfd, 0x70,
+	0x82, 0xab, 0xd1, 0x09, 0xee, 0xe2, 0x44, 0x8a, 0x95, 0x08, 0x2b, 0x14, 0xe9, 0x16, 0x7b, 0x4d,
+	0x50, 0x8c, 0xd7, 0xb1, 0xd7, 0x45, 0xba, 0x3c, 0x46, 0x1e, 0x89, 0x32, 0x65, 0xca, 0xe0, 0x27,
+	0x89, 0xb0, 0xbd, 0x06, 0x1b, 0xa4, 0xed, 0x66, 0x7e, 0xe3, 0xef, 0x9b, 0x6f, 0x57, 0x6b, 0xa4,
+	0x3a, 0x96, 0xc5, 0x3c, 0x1e, 0x30, 0x17, 0xfc, 0x80, 0x71, 0x36, 0xf8, 0xb9, 0x62, 0x6c, 0xe5,
+	0xd2, 0x61, 0xd2, 0x2d, 0x23, 0x67, 0x48, 0x37, 0x3e, 0x7f, 0xce, 0x86, 0x1d, 0x67, 0x1d, 0x50,
+	0x2b, 0x20, 0xd6, 0x23, 0x0d, 0x52, 0x34, 0x7a, 0xad, 0xa1, 0x2f, 0x17, 0x07, 0x8a, 0x87, 0xa8,
+	0x3e, 0x0b, 0x28, 0xe1, 0x74, 0x61, 0xe0, 0x36, 0x88, 0x72, 0x4e, 0x9f, 0x22, 0x1a, 0xf2, 0x41,
+	0xe7, 0x88, 0x84, 0x3e, 0xf3, 0x42, 0x8a, 0x47, 0xa8, 0x76, 0x4b, 0xa2, 0x70, 0xff, 0xbd, 0x0a,
+	0x59, 0x25, 0x3e, 0xef, 0x41, 0x9a, 0x06, 0x44, 0x1a, 0xf8, 0xbf, 0x4f, 0x83, 0xff, 0xa0, 0xfa,
+	0x9c, 0x86, 0xd1, 0x26, 0x5d, 0x22, 0x4a, 0x99, 0xea, 0x37, 0xaa, 0x9a, 0x9c, 0xf9, 0x0b, 0x03,
+	0xb7, 0x20, 0x2d, 0x64, 0x8a, 0x11, 0x6a, 0xe8, 0x94, 0x2f, 0x8c, 0x2b, 0xcf, 0x61, 0xb8, 0x03,
+	0x79, 0x2d, 0x74, 0xf8, 0x18, 0x65, 0xe7, 0x99, 0xa0, 0xa6, 0xb9, 0x87, 0x06, 0xe5, 0xc4, 0x26,
+	0x9c, 0xe0, 0x2e, 0x14, 0x7a, 0xd9, 0xce, 0x7f, 0xa8, 0x7d, 0xe7, 0xdb, 0xc9, 0x1d, 0xe5, 0x16,
+	0x7d, 0x28, 0x23, 0x99, 0xcb, 0x04, 0x35, 0xf5, 0x52, 0x0a, 0xfd, 0x7c, 0x8a, 0x12, 0xce, 0x4e,
+	0xa1, 0xa3, 0xb6, 0x4e, 0xf9, 0x94, 0xb8, 0x2e, 0x63, 0xde, 0x8c, 0x79, 0xce, 0x7a, 0x85, 0xfb,
+	0x50, 0x46, 0xc2, 0xe5, 0xc7, 0x99, 0xc9, 0xe1, 0x3a, 0xd2, 0xec, 0xd9, 0x18, 0x77, 0xa1, 0xd0,
+	0xcb, 0xaf, 0x43, 0x3d, 0x78, 0x9b, 0x9c, 0xf0, 0x10, 0x7f, 0x87, 0x12, 0x11, 0x1e, 0xfd, 0xd3,
+	0x41, 0x96, 0xe2, 0x12, 0xe1, 0xc2, 0xd6, 0xd4, 0x68, 0x00, 0xa7, 0x50, 0x96, 0x67, 0x8c, 0xbe,
+	0x5e, 0x33, 0x62, 0x9b, 0x1e, 0xf1, 0xc3, 0x07, 0xc6, 0xf1, 0x37, 0x38, 0x6e, 0x85, 0xba, 0x99,
+	0xd0, 0x7c, 0xfd, 0x5f, 0xd4, 0x4a, 0xdf, 0x7d, 0x2e, 0xeb, 0x41, 0x11, 0xc8, 0x5f, 0x62, 0xed,
+	0xc6, 0x71, 0x5c, 0x46, 0x6c, 0xac, 0x42, 0x56, 0x49, 0x34, 0xd3, 0x5f, 0xdb, 0x9d, 0x56, 0x79,
+	0xdf, 0x69, 0x95, 0x97, 0x58, 0x53, 0xb6, 0xb1, 0xa6, 0xbc, 0xc5, 0x9a, 0xf2, 0x11, 0x6b, 0xca,
+	0x7d, 0x23, 0xff, 0xeb, 0x97, 0xd5, 0x44, 0x34, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x3e,
+	0x14, 0xd9, 0x09, 0x04, 0x00, 0x00,
 }
 
 type FirecrackerService interface {
@@ -66,6 +69,9 @@
 	UpdateBalloon(ctx context.Context, req *proto1.UpdateBalloonRequest) (*empty.Empty, error)
 	GetBalloonStats(ctx context.Context, req *proto1.GetBalloonStatsRequest) (*proto1.GetBalloonStatsResponse, error)
 	UpdateBalloonStats(ctx context.Context, req *proto1.UpdateBalloonStatsRequest) (*empty.Empty, error)
+	LoadSnapshot(ctx context.Context, req *proto1.LoadSnapshotRequest) (*proto1.LoadResponse, error)
+	CreateSnapshot(ctx context.Context, req *proto1.CreateSnapshotRequest) (*empty.Empty, error)
+	Offload(ctx context.Context, req *proto1.OffloadRequest) (*empty.Empty, error)
 }
 
 func RegisterFirecrackerService(srv *github_com_containerd_ttrpc.Server, svc FirecrackerService) {
@@ -154,6 +160,27 @@
 			}
 			return svc.UpdateBalloonStats(ctx, &req)
 		},
+		"LoadSnapshot": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
+			var req proto1.LoadSnapshotRequest
+			if err := unmarshal(&req); err != nil {
+				return nil, err
+			}
+			return svc.LoadSnapshot(ctx, &req)
+		},
+		"CreateSnapshot": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
+			var req proto1.CreateSnapshotRequest
+			if err := unmarshal(&req); err != nil {
+				return nil, err
+			}
+			return svc.CreateSnapshot(ctx, &req)
+		},
+		"Offload": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
+			var req proto1.OffloadRequest
+			if err := unmarshal(&req); err != nil {
+				return nil, err
+			}
+			return svc.Offload(ctx, &req)
+		},
 	})
 }
 
@@ -261,4 +288,28 @@
 		return nil, err
 	}
 	return &resp, nil
+}
+
+func (c *firecrackerClient) LoadSnapshot(ctx context.Context, req *proto1.LoadSnapshotRequest) (*proto1.LoadResponse, error) {
+	var resp proto1.LoadResponse
+	if err := c.client.Call(ctx, "Firecracker", "LoadSnapshot", req, &resp); err != nil {
+		return nil, err
+	}
+	return &resp, nil
+}
+
+func (c *firecrackerClient) CreateSnapshot(ctx context.Context, req *proto1.CreateSnapshotRequest) (*empty.Empty, error) {
+	var resp empty.Empty
+	if err := c.client.Call(ctx, "Firecracker", "CreateSnapshot", req, &resp); err != nil {
+		return nil, err
+	}
+	return &resp, nil
+}
+
+func (c *firecrackerClient) Offload(ctx context.Context, req *proto1.OffloadRequest) (*empty.Empty, error) {
+	var resp empty.Empty
+	if err := c.client.Call(ctx, "Firecracker", "Offload", req, &resp); err != nil {
+		return nil, err
+	}
+	return &resp, nil
 }
diff -ur ./README.md /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/README.md
--- ./README.md	2022-02-11 11:21:52.609311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/README.md	2022-02-25 13:37:31.095472996 +0800
@@ -1,7 +1,9 @@
 # firecracker-containerd
 
-[![BuildKite](https://badge.buildkite.com/aab4ae547d5e5079a5915522e8cdb18492349aef67aae5a8c5.svg?branch=main)](https://buildkite.com/firecracker-microvm/firecracker-containerd)
-[![GitHub Actions](https://github.com/firecracker-microvm/firecracker-containerd/actions/workflows/build.yaml/badge.svg)](https://github.com/firecracker-microvm/firecracker-containerd/actions)
+| Automation | Status |
+|------------|--------|
+| Tests      | [![Build status](https://badge.buildkite.com/aab4ae547d5e5079a5915522e8cdb18492349aef67aae5a8c5.svg?branch=main)](https://buildkite.com/firecracker-microvm/firecracker-containerd)
+| Lint       | [![Build Status](https://travis-ci.org/firecracker-microvm/firecracker-containerd.svg?branch=main)](https://travis-ci.org/firecracker-microvm/firecracker-containerd)
 
 This repository enables the use of a container runtime,
 [containerd](https://containerd.io), to manage
@@ -20,7 +22,7 @@
   the overhead of Firecracker is low, the achievable container
   density per host should be comparable to
   running containers using kernel-based container runtimes,
-  without the isolation compromise of such solutions.  Multi-tenant
+  without the isolation compromise of such solutions.  Multi-tentant
   hosts would particularly benefit from this use case.
 
 To maintain compatibility with the container ecosystem, where possible, we use
diff -ur ./runtime/integ_test.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/runtime/integ_test.go
--- ./runtime/integ_test.go	2022-02-11 11:21:52.617311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/runtime/integ_test.go	2022-02-25 13:37:31.111472997 +0800
@@ -36,8 +36,9 @@
 var defaultRuntimeConfig = config.Config{
 	FirecrackerBinaryPath: "/usr/local/bin/firecracker",
 	KernelImagePath:       "/var/lib/firecracker-containerd/runtime/default-vmlinux.bin",
-	KernelArgs:            "ro console=ttyS0 noapic reboot=k panic=1 pci=off nomodules systemd.unified_cgroup_hierarchy=0 systemd.journald.forward_to_console systemd.log_color=false systemd.unit=firecracker.target init=/sbin/overlay-init",
+	KernelArgs:            "ro console=ttyS0 noapic reboot=k panic=1 pci=off nomodules systemd.journald.forward_to_console systemd.log_color=false systemd.unit=firecracker.target init=/sbin/overlay-init",
 	RootDrive:             "/var/lib/firecracker-containerd/runtime/default-rootfs.img",
+	CPUTemplate:           "T2",
 	LogLevels:             []string{"debug"},
 	ShimBaseDir:           shimBaseDir(),
 	JailerConfig: config.JailerConfig{
@@ -46,17 +47,6 @@
 	},
 }
 
-func init() {
-	flag, err := internal.SupportCPUTemplate()
-	if err != nil {
-		panic(err)
-	}
-
-	if flag {
-		defaultRuntimeConfig.CPUTemplate = "T2"
-	}
-}
-
 func shimBaseDir() string {
 	if v := os.Getenv(shimBaseDirEnvVar); v != "" {
 		return v
diff -ur ./runtime/jailer_integ_test.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/runtime/jailer_integ_test.go
--- ./runtime/jailer_integ_test.go	2022-02-11 11:21:52.617311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/runtime/jailer_integ_test.go	2022-02-25 13:37:31.111472997 +0800
@@ -35,11 +35,6 @@
 	"github.com/firecracker-microvm/firecracker-containerd/runtime/firecrackeroci"
 )
 
-const (
-	jailerUID = 300001
-	jailerGID = 300001
-)
-
 func TestJailer_Isolated(t *testing.T) {
 	prepareIntegTest(t)
 	t.Run("Without Jailer", func(t *testing.T) {
@@ -49,38 +44,15 @@
 	t.Run("With Jailer", func(t *testing.T) {
 		t.Parallel()
 		testJailer(t, &proto.JailerConfig{
-			UID: jailerUID,
-			GID: jailerGID,
+			UID: 300001,
+			GID: 300001,
 		})
 	})
 	t.Run("With Jailer and bind-mount", func(t *testing.T) {
 		t.Parallel()
 		testJailer(t, &proto.JailerConfig{
-			UID:               jailerUID,
-			GID:               jailerGID,
-			DriveExposePolicy: proto.DriveExposePolicy_BIND,
-		})
-	})
-}
-
-func TestAttachBlockDevice_Isolated(t *testing.T) {
-	prepareIntegTest(t)
-	t.Run("Without Jailer", func(t *testing.T) {
-		t.Parallel()
-		testAttachBlockDevice(t, nil)
-	})
-	t.Run("With Jailer", func(t *testing.T) {
-		t.Parallel()
-		testAttachBlockDevice(t, &proto.JailerConfig{
-			UID: jailerUID,
-			GID: jailerGID,
-		})
-	})
-	t.Run("With Jailer and bind-mount", func(t *testing.T) {
-		t.Parallel()
-		testAttachBlockDevice(t, &proto.JailerConfig{
-			UID:               jailerUID,
-			GID:               jailerGID,
+			UID:               300001,
+			GID:               300001,
 			DriveExposePolicy: proto.DriveExposePolicy_BIND,
 		})
 	})
@@ -166,7 +138,7 @@
 	stdout := startAndWaitTask(ctx, t, c)
 	require.Equal("hello\nadditional drive\n", stdout)
 
-	stat, err := os.Stat(filepath.Join(shimBaseDir(), "default#"+vmID))
+	stat, err := os.Stat(filepath.Join(shimBaseDir(), "default", vmID))
 	require.NoError(err)
 	assert.True(t, stat.IsDir())
 
@@ -176,13 +148,9 @@
 	_, err = fcClient.StopVM(ctx, &proto.StopVMRequest{VMID: vmID})
 	require.NoError(err)
 
-	_, err = os.Stat(filepath.Join(shimBaseDir(), "default#"+vmID))
+	_, err = os.Stat(filepath.Join(shimBaseDir(), "default", vmID))
 	assert.Error(t, err)
 	assert.True(t, os.IsNotExist(err))
-
-	shimContents, err := ioutil.ReadDir(shimBaseDir())
-	require.NoError(err)
-	assert.Len(t, shimContents, 0)
 }
 
 func TestJailerCPUSet_Isolated(t *testing.T) {
@@ -198,100 +166,3 @@
 	}
 	testJailer(t, config)
 }
-
-func testAttachBlockDevice(t *testing.T, jailerConfig *proto.JailerConfig) {
-	require := require.New(t)
-	client, err := containerd.New(containerdSockPath, containerd.WithDefaultRuntime(firecrackerRuntime))
-	require.NoError(err, "unable to create client to containerd service at %s, is containerd running?", containerdSockPath)
-	defer client.Close()
-
-	ctx := namespaces.WithNamespace(context.Background(), "default")
-
-	image, err := alpineImage(ctx, client, defaultSnapshotterName)
-	require.NoError(err, "failed to get alpine image")
-
-	fcClient, err := newFCControlClient(containerdSockPath)
-	require.NoError(err)
-
-	vmID := testNameToVMID(t.Name())
-
-	device, cleanup := internal.CreateBlockDevice(ctx, t)
-	defer cleanup()
-
-	if jailerConfig != nil {
-		err := os.Chown(device, int(jailerConfig.UID), int(jailerConfig.GID))
-		require.NoError(err)
-	}
-
-	request := proto.CreateVMRequest{
-		VMID:         vmID,
-		JailerConfig: jailerConfig,
-		DriveMounts: []*proto.FirecrackerDriveMount{
-			{HostPath: device, VMPath: "/home/driveMount", FilesystemType: "ext4"},
-		},
-	}
-
-	// If the drive files are bind-mounted, the files must be readable from the jailer's user.
-	if jailerConfig != nil && jailerConfig.DriveExposePolicy == proto.DriveExposePolicy_BIND {
-		f, err := ioutil.TempFile("", fsSafeTestName(t)+"_rootfs")
-		require.NoError(err)
-		defer f.Close()
-
-		dst := f.Name()
-
-		// Copy the root drive before chown, since the file is used by other tests.
-		err = copyFile(defaultRuntimeConfig.RootDrive, dst, 0400)
-		require.NoErrorf(err, "failed to copy a rootfs as %q", dst)
-
-		err = os.Chown(dst, int(jailerConfig.UID), int(jailerConfig.GID))
-		require.NoError(err, "failed to chown %q", dst)
-
-		request.RootDrive = &proto.FirecrackerRootDrive{HostPath: dst}
-
-		err = os.Chown(device, int(jailerConfig.UID), int(jailerConfig.GID))
-		require.NoError(err, "failed to chown %q", device)
-	}
-
-	_, err = fcClient.CreateVM(ctx, &request)
-	require.NoError(err)
-
-	// create a container to test bind mount block device into the container
-	c, err := client.NewContainer(ctx,
-		vmID+"-container",
-		containerd.WithSnapshotter(defaultSnapshotterName),
-		containerd.WithNewSnapshot(vmID+"-snapshot", image),
-		containerd.WithNewSpec(
-			oci.WithProcessArgs(
-				"/bin/sh", "-c", "echo heyhey && cd /mnt/blockDeviceTest",
-			),
-			firecrackeroci.WithVMID(vmID),
-			oci.WithMounts([]specs.Mount{{
-				Source:      "/home/driveMount",
-				Destination: "/mnt/blockDeviceTest",
-				Options:     []string{"bind"},
-			}}),
-		),
-	)
-	require.NoError(err)
-
-	stdout := startAndWaitTask(ctx, t, c)
-	require.Equal("heyhey\n", stdout)
-
-	stat, err := os.Stat(filepath.Join(shimBaseDir(), "default#"+vmID))
-	require.NoError(err)
-	assert.True(t, stat.IsDir())
-
-	err = c.Delete(ctx, containerd.WithSnapshotCleanup)
-	require.NoError(err, "failed to delete a container-block-device")
-
-	_, err = fcClient.StopVM(ctx, &proto.StopVMRequest{VMID: vmID})
-	require.NoError(err)
-
-	_, err = os.Stat(filepath.Join(shimBaseDir(), "default#"+vmID))
-	assert.Error(t, err)
-	assert.True(t, os.IsNotExist(err))
-
-	shimContents, err := ioutil.ReadDir(shimBaseDir())
-	require.NoError(err)
-	assert.Len(t, shimContents, 0)
-}
diff -ur ./runtime/README.md /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/runtime/README.md
--- ./runtime/README.md	2022-02-11 11:21:52.617311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/runtime/README.md	2022-02-25 13:37:31.107472996 +0800
@@ -48,6 +48,8 @@
 * `root_drive` (optional) - A path where the root drive image file is located. A
   fully-qualified path is recommended.  If left undefined, the runtime looks for
   a file named `/var/lib/firecracker-containerd/runtime/default-rootfs.img`.
+* `cpu_count` (optional) - The number of vCPUs to make available to a microVM.
+  If left undefined, the default is 1.
 * `cpu_template` (required) - The Firecracker CPU emulation template.  Supported
   values are "C3" and "T2".
 * `additional_drives` (unused)
@@ -59,5 +61,5 @@
 * `debug` (optional) - Enable debug-level logging from the runtime.
 
 ## Usage
-See our [Getting Started Guide](../docs/getting-started.md) for details on how to use
+See our [Getting Started Guide](../docs/getting-started.md) for details on how to use 
 the aws.firecracker runtime.
diff -ur ./runtime/runc_jailer.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/runtime/runc_jailer.go
--- ./runtime/runc_jailer.go	2022-02-11 11:21:52.617311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/runtime/runc_jailer.go	2022-02-25 13:37:31.111472997 +0800
@@ -138,18 +138,10 @@
 
 func (j *runcJailer) prepareBindMounts(mounts []*proto.FirecrackerDriveMount) error {
 	for _, m := range mounts {
-		stat := syscall.Stat_t{}
-		if err := syscall.Stat(m.HostPath, &stat); err != nil {
+		err := j.bindMountFileToJail(m.HostPath, filepath.Join(j.RootPath(), m.HostPath))
+		if err != nil {
 			return err
 		}
-		// Only bindMount regular file.
-		// To avoid duplicate files, for block device, we will use system call to create device file for it.
-		if stat.Mode&syscall.S_IFMT == syscall.S_IFREG {
-			err := j.bindMountFileToJail(m.HostPath, filepath.Join(j.RootPath(), m.HostPath))
-			if err != nil {
-				return err
-			}
-		}
 	}
 	return nil
 }
diff -ur ./runtime/service.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/runtime/service.go
--- ./runtime/service.go	2022-02-11 11:21:52.617311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/runtime/service.go	2022-02-25 13:37:31.111472997 +0800
@@ -14,12 +14,15 @@
 package main
 
 import (
+	"bytes"
 	"context"
 	"encoding/json"
 	"fmt"
 	"math"
 	"net"
+	"net/http"
 	"os"
+	"os/exec"
 	"runtime/debug"
 	"strconv"
 	"strings"
@@ -64,6 +67,7 @@
 	drivemount "github.com/firecracker-microvm/firecracker-containerd/proto/service/drivemount/ttrpc"
 	fccontrolTtrpc "github.com/firecracker-microvm/firecracker-containerd/proto/service/fccontrol/ttrpc"
 	ioproxy "github.com/firecracker-microvm/firecracker-containerd/proto/service/ioproxy/ttrpc"
+	"github.com/tv42/httpunix"
 )
 
 func init() {
@@ -102,6 +106,13 @@
 	_ shim.Init           = NewService
 )
 
+type loadSnapReq struct {
+	SnapshotPath         string `json:"snapshot_path"`
+	MemFilePath          string `json:"mem_file_path"`
+	SendSockAddr         string `json:"sock_file_path"`
+	EnableUserPageFaults bool   `json:"enable_user_page_faults"`
+}
+
 // implements shimapi
 type service struct {
 	taskManager   vm.TaskManager
@@ -157,6 +168,11 @@
 	// fifos have stdio FIFOs containerd passed to the shim. The key is [taskID][execID].
 	fifos   map[string]map[string]cio.Config
 	fifosMu sync.Mutex
+
+	// httpControlClient is to send pause/resume/snapshot commands to the microVM
+	httpControlClient   *http.Client
+	firecrackerPid      int
+	taskDrivePathOnHost string
 }
 
 func shimOpts(shimCtx context.Context) (*shim.Opts, error) {
@@ -494,7 +510,11 @@
 		s.logger.WithError(err).Error("failed to publish start VM event")
 	}
 
-	go s.monitorVMExit()
+	// Commented out because its execution cancels the shim, and
+	// it would get executed on Offload if we leave it, killing the shim,
+	// and making snapshots impossible.
+	//go s.monitorVMExit()
+
 	// let all the other methods know that the VM is ready for tasks
 	close(s.vmReady)
 
@@ -502,6 +522,8 @@
 	resp.MetricsFifoPath = s.machineConfig.MetricsFifo
 	resp.LogFifoPath = s.machineConfig.LogFifo
 	resp.SocketPath = s.shimDir.FirecrackerSockPath()
+	resp.FirecrackerPID = strconv.Itoa(s.firecrackerPid)
+	resp.UPFSockPath = s.shimDir.FirecrackerUPFSockPath()
 	if c, ok := s.jailer.(cgroupPather); ok {
 		resp.CgroupPath = c.CgroupPath()
 	}
@@ -620,7 +642,18 @@
 		return err
 	}
 
+	s.createHTTPControlClient()
+
+	pid, err := s.machine.PID()
+	if err != nil {
+		s.logger.WithError(err).Error("Failed to get PID of firecracker process")
+		return err
+	}
+
+	s.firecrackerPid = pid
+
 	s.logger.Info("successfully started the VM")
+
 	return nil
 }
 
@@ -636,8 +669,7 @@
 
 // StopVM will shutdown the VMM. Unlike Shutdown, this method is exposed to containerd clients.
 // If the VM has not been created yet and the timeout is hit waiting for it to exist, an error will be returned
-// but the shim will continue to shutdown. Similarly if we detect that the VM is in pause state, then
-// we are unable to communicate to the in-VM agent. In this case, we do a forceful shutdown.
+// but the shim will continue to shutdown.
 func (s *service) StopVM(requestCtx context.Context, request *proto.StopVMRequest) (_ *empty.Empty, err error) {
 	defer logPanicAndDie(s.logger)
 	s.logger.WithFields(logrus.Fields{"timeout_seconds": request.TimeoutSeconds}).Debug("StopVM")
@@ -647,20 +679,6 @@
 		timeout = time.Duration(request.TimeoutSeconds) * time.Second
 	}
 
-	info, err := s.machine.DescribeInstanceInfo(requestCtx)
-	if err != nil {
-		return nil, errors.Wrapf(err, "failed to get instance info %v", info)
-	}
-
-	if *info.State == models.InstanceInfoStatePaused {
-		s.logger.Debug("Instance is in Paused state, force shutdown in progress")
-		err = s.jailer.Stop(true)
-		if err != nil {
-			return nil, errors.Wrap(err, "failed to stop VM in paused State")
-		}
-		return &empty.Empty{}, nil
-	}
-
 	err = s.waitVMReady()
 	if err != nil {
 		return nil, err
@@ -672,42 +690,6 @@
 	return &empty.Empty{}, nil
 }
 
-// ResumeVM resumes a VM
-func (s *service) ResumeVM(ctx context.Context, req *proto.ResumeVMRequest) (*empty.Empty, error) {
-	defer logPanicAndDie(s.logger)
-
-	err := s.waitVMReady()
-	if err != nil {
-		s.logger.WithError(err).Error()
-		return nil, err
-	}
-
-	if err := s.machine.ResumeVM(ctx); err != nil {
-		s.logger.WithError(err).Error()
-		return nil, err
-	}
-
-	return &empty.Empty{}, nil
-}
-
-// PauseVM pauses a VM
-func (s *service) PauseVM(ctx context.Context, req *proto.PauseVMRequest) (*empty.Empty, error) {
-	defer logPanicAndDie(s.logger)
-
-	err := s.waitVMReady()
-	if err != nil {
-		s.logger.WithError(err).Error()
-		return nil, err
-	}
-
-	if err := s.machine.PauseVM(ctx); err != nil {
-		s.logger.WithError(err).Error()
-		return nil, err
-	}
-
-	return &empty.Empty{}, nil
-}
-
 // GetVMInfo returns metadata for the VM being managed by this shim. If the VM has not been created yet, this
 // method will wait for up to a hardcoded timeout for it to exist, returning an error if the timeout is reached.
 func (s *service) GetVMInfo(requestCtx context.Context, request *proto.GetVMInfoRequest) (*proto.GetVMInfoResponse, error) {
@@ -967,14 +949,6 @@
 		VMID:       s.vmID,
 	}
 
-	flag, err := internal.SupportCPUTemplate()
-	if err != nil {
-		return nil, err
-	}
-	if !flag {
-		cfg.MachineCfg.CPUTemplate = ""
-	}
-
 	logPath := s.shimDir.FirecrackerLogFifoPath()
 	if req.LogFifoPath != "" {
 		logPath = req.LogFifoPath
@@ -1193,6 +1167,8 @@
 	}
 	rootfsMnt := request.Rootfs[0]
 
+	s.taskDrivePathOnHost = rootfsMnt.Source
+
 	err = s.containerStubHandler.Reserve(requestCtx, request.ID,
 		rootfsMnt.Source, vmBundleDir.RootfsPath(), "ext4", nil, s.driveMountClient, s.machine)
 	if err != nil {
@@ -1725,6 +1701,8 @@
 }
 
 // monitorVMExit watches the VM and cleanup resources when it terminates.
+// Comment out because unused
+/*
 func (s *service) monitorVMExit() {
 	// Block until the VM exits
 	if err := s.machine.Wait(s.shimCtx); err != nil && err != context.Canceled {
@@ -1735,3 +1713,315 @@
 		s.logger.WithError(err).Error("failed to clean up the VM")
 	}
 }
+*/
+
+func (s *service) createHTTPControlClient() {
+	u := &httpunix.Transport{
+		DialTimeout:           100 * time.Millisecond,
+		RequestTimeout:        10 * time.Second,
+		ResponseHeaderTimeout: 10 * time.Second,
+	}
+	u.RegisterLocation("firecracker", s.shimDir.FirecrackerSockPath())
+
+	t := &http.Transport{}
+	t.RegisterProtocol(httpunix.Scheme, u)
+
+	var client = http.Client{
+		Transport: t,
+	}
+
+	s.httpControlClient = &client
+}
+
+func formResumeReq() (*http.Request, error) {
+	var req *http.Request
+
+	data := map[string]string{
+		"state": "Resumed",
+	}
+	json, err := json.Marshal(data)
+	if err != nil {
+		logrus.WithError(err).Error("Failed to marshal json data")
+		return nil, err
+	}
+
+	req, err = http.NewRequest("PATCH", "http+unix://firecracker/vm", bytes.NewBuffer(json))
+	if err != nil {
+		logrus.WithError(err).Error("Failed to create new HTTP request in formResumeReq")
+		return nil, err
+	}
+	req.Header.Add("accept", "application/json")
+	req.Header.Add("Content-Type", "application/json")
+
+	return req, nil
+}
+
+func formPauseReq() (*http.Request, error) {
+	var req *http.Request
+
+	data := map[string]string{
+		"state": "Paused",
+	}
+	json, err := json.Marshal(data)
+	if err != nil {
+		logrus.WithError(err).Error("Failed to marshal json data")
+		return nil, err
+	}
+
+	req, err = http.NewRequest("PATCH", "http+unix://firecracker/vm", bytes.NewBuffer(json))
+	if err != nil {
+		logrus.WithError(err).Error("Failed to create new HTTP request in formPauseReq")
+		return nil, err
+	}
+	req.Header.Add("accept", "application/json")
+	req.Header.Add("Content-Type", "application/json")
+
+	return req, nil
+}
+
+func formLoadSnapReq(snapshotPath, memPath, sendSockAddr string, isUpf bool) (*http.Request, error) {
+	var req *http.Request
+
+	data := loadSnapReq{
+		SnapshotPath:         snapshotPath,
+		MemFilePath:          memPath,
+		SendSockAddr:         sendSockAddr,
+		EnableUserPageFaults: isUpf,
+	}
+
+	json, err := json.Marshal(data)
+	if err != nil {
+		logrus.WithError(err).Error("Failed to marshal json data")
+		return nil, err
+	}
+
+	req, err = http.NewRequest("PUT", "http+unix://firecracker/snapshot/load", bytes.NewBuffer(json))
+	if err != nil {
+		logrus.WithError(err).Error("Failed to create new HTTP request in formLoadSnapReq")
+		return nil, err
+	}
+	req.Header.Add("accept", "application/json")
+	req.Header.Add("Content-Type", "application/json")
+
+	return req, nil
+}
+
+func formCreateSnapReq(snapshotPath, memPath string) (*http.Request, error) {
+	var req *http.Request
+
+	data := map[string]string{
+		"snapshot_type": "Full",
+		"snapshot_path": snapshotPath,
+		"mem_file_path": memPath,
+	}
+	json, err := json.Marshal(data)
+	if err != nil {
+		logrus.WithError(err).Error("Failed to marshal json data")
+		return nil, err
+	}
+
+	req, err = http.NewRequest("PUT", "http+unix://firecracker/snapshot/create", bytes.NewBuffer(json))
+	if err != nil {
+		logrus.WithError(err).Error("Failed to create new HTTP request in formCreateSnapReq")
+		return nil, err
+	}
+	req.Header.Add("accept", "application/json")
+	req.Header.Add("Content-Type", "application/json")
+
+	return req, nil
+}
+
+func (s *service) startFirecrackerProcess() error {
+	firecPath, err := exec.LookPath("firecracker")
+	if err != nil {
+		logrus.WithError(err).Error("failed to look up firecracker binary")
+		return err
+	}
+
+	// TODO: Remove hardcoding and make a parameter
+	logFilePath := fmt.Sprintf("/tmp/log_%s_after.logs", s.vmID)
+	if err := os.RemoveAll(logFilePath); err != nil {
+		s.logger.WithError(err).Errorf("Failed to delete %s", logFilePath)
+		return err
+	}
+	if _, err := os.OpenFile(logFilePath, os.O_RDONLY|os.O_CREATE, 0600); err != nil {
+		s.logger.WithError(err).Errorf("Failed to create %s", logFilePath)
+		return err
+	}
+
+	args := []string{
+		"--api-sock", s.shimDir.FirecrackerSockPath(),
+		"--log-path", logFilePath,
+		"--level", s.config.DebugHelper.GetFirecrackerLogLevel(),
+		"--show-level",
+		"--show-log-origin",
+	}
+
+	firecrackerCmd := exec.Command(firecPath, args...)
+	firecrackerCmd.Dir = s.shimDir.RootPath()
+
+	if err := firecrackerCmd.Start(); err != nil {
+		logrus.WithError(err).Error("Failed to start firecracker process")
+	}
+
+	go firecrackerCmd.Wait()
+
+	s.firecrackerPid = firecrackerCmd.Process.Pid
+
+	return nil
+}
+
+func (s *service) dialFirecrackerSocket() error {
+	for {
+		var d net.Dialer
+		ctx, cancel := context.WithTimeout(context.Background(), 50*time.Millisecond)
+		defer cancel()
+
+		c, err := d.DialContext(ctx, "unix", s.shimDir.FirecrackerSockPath())
+		if err != nil {
+			if ctx.Err() != nil {
+				s.logger.WithError(ctx.Err()).Error("timed out while waiting for firecracker socket")
+				return ctx.Err()
+			}
+
+			time.Sleep(1 * time.Millisecond)
+			continue
+		}
+
+		c.Close()
+
+		break
+	}
+
+	return nil
+}
+
+// PauseVM Pauses a VM
+func (s *service) PauseVM(ctx context.Context, req *proto.PauseVMRequest) (*empty.Empty, error) {
+	pauseReq, err := formPauseReq()
+	if err != nil {
+		s.logger.WithError(err).Error("Failed to create pause vm request")
+		return nil, err
+	}
+
+	err = s.waitVMReady()
+	if err != nil {
+		return nil, err
+	}
+
+	resp, err := s.httpControlClient.Do(pauseReq)
+	if err != nil {
+		s.logger.WithError(err).Error("Failed to send pause VM request")
+		return nil, err
+	}
+	if !strings.Contains(resp.Status, "204") {
+		s.logger.WithError(err).Error("Failed to pause VM")
+		return nil, errors.New("Failed to pause VM")
+	}
+
+	return &empty.Empty{}, nil
+}
+
+// ResumeVM Resumes a VM
+func (s *service) ResumeVM(ctx context.Context, req *proto.ResumeVMRequest) (*empty.Empty, error) {
+	resumeReq, err := formResumeReq()
+	if err != nil {
+		s.logger.WithError(err).Error("Failed to create resume vm request")
+		return nil, err
+	}
+
+	resp, err := s.httpControlClient.Do(resumeReq)
+	if err != nil {
+		s.logger.WithError(err).Error("Failed to send resume VM request")
+		return nil, err
+	}
+	if !strings.Contains(resp.Status, "204") {
+		s.logger.WithError(err).Error("Failed to resume VM")
+		return nil, errors.New("Failed to resume VM")
+	}
+	return &empty.Empty{}, nil
+}
+
+// LoadSnapshot Loads a VM from a snapshot
+func (s *service) LoadSnapshot(ctx context.Context, req *proto.LoadSnapshotRequest) (*proto.LoadResponse, error) {
+	if err := s.startFirecrackerProcess(); err != nil {
+		s.logger.WithError(err).Error("startFirecrackerProcess returned an error")
+		return nil, err
+	}
+
+	if err := s.dialFirecrackerSocket(); err != nil {
+		s.logger.WithError(err).Error("Failed to wait for firecracker socket")
+	}
+	s.createHTTPControlClient()
+
+	sendSockAddr := s.shimDir.FirecrackerUPFSockPath()
+	if !req.EnableUserPF {
+		sendSockAddr = "dummy"
+	}
+
+	loadSnapReq, err := formLoadSnapReq(req.SnapshotFilePath, req.MemFilePath, sendSockAddr, req.EnableUserPF)
+	if err != nil {
+		s.logger.WithError(err).Error("Failed to create load snapshot request")
+		return nil, err
+	}
+
+	resp, err := s.httpControlClient.Do(loadSnapReq)
+	if err != nil {
+		s.logger.WithError(err).Error("Failed to send load snapshot request")
+		return nil, err
+	}
+	if !strings.Contains(resp.Status, "204") {
+		s.logger.WithError(err).Error("Failed to load VM from snapshot")
+		s.logger.WithError(err).Errorf("Status of request: %s", resp.Status)
+		return nil, errors.New("Failed to load VM from snapshot")
+	}
+
+	return &proto.LoadResponse{FirecrackerPID: strconv.Itoa(s.firecrackerPid)}, nil
+}
+
+// CreateSnapshot Creates a snapshot of a VM
+func (s *service) CreateSnapshot(ctx context.Context, req *proto.CreateSnapshotRequest) (*empty.Empty, error) {
+	createSnapReq, err := formCreateSnapReq(req.SnapshotFilePath, req.MemFilePath)
+	if err != nil {
+		s.logger.WithError(err).Error("Failed to create make snapshot request")
+		return nil, err
+	}
+
+	resp, err := s.httpControlClient.Do(createSnapReq)
+	if err != nil {
+		s.logger.WithError(err).Error("Failed to send make snapshot request")
+		return nil, err
+	}
+	if !strings.Contains(resp.Status, "204") {
+		s.logger.WithError(err).Error("Failed to make snapshot of VM")
+		return nil, errors.New("Failed to make snapshot of VM")
+	}
+
+	return &empty.Empty{}, nil
+}
+
+// Offload Shuts down a VM and deletes the corresponding firecracker socket
+// and vsock. All of the other resources will persist
+func (s *service) Offload(ctx context.Context, req *proto.OffloadRequest) (*empty.Empty, error) {
+	if err := syscall.Kill(s.firecrackerPid, 9); err != nil {
+		s.logger.WithError(err).Error("Failed to kill firecracker process")
+		return nil, err
+	}
+
+	if err := os.RemoveAll(s.shimDir.FirecrackerSockPath()); err != nil {
+		s.logger.WithError(err).Error("Failed to delete firecracker socket")
+		return nil, err
+	}
+
+	if err := os.RemoveAll(s.shimDir.FirecrackerVSockPath()); err != nil {
+		s.logger.WithError(err).Error("Failed to delete firecracker vsock")
+		return nil, err
+	}
+
+	if err := os.RemoveAll(s.shimDir.FirecrackerUPFSockPath()); err != nil {
+		s.logger.WithError(err).Error("Failed to delete firecracker UPF socket")
+		return nil, err
+	}
+
+	return &empty.Empty{}, nil
+}
diff -ur ./runtime/service_integ_test.go /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/runtime/service_integ_test.go
--- ./runtime/service_integ_test.go	2022-02-11 11:21:52.617311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/runtime/service_integ_test.go	2022-02-25 13:37:31.111472997 +0800
@@ -191,9 +191,10 @@
 
 		cfg, err := config.LoadConfig("")
 		require.NoError(t, err, "failed to load config")
-		varRunFCContents, err := ioutil.ReadDir(cfg.ShimBaseDir)
-		require.NoError(t, err, `failed to list directory "%s"`, cfg.ShimBaseDir)
-		require.Len(t, varRunFCContents, 0, "expect %s to be empty", cfg.ShimBaseDir)
+		namespaceShimBaseDir := filepath.Join(cfg.ShimBaseDir, namespaces.Default)
+		varRunFCContents, err := ioutil.ReadDir(namespaceShimBaseDir)
+		require.NoError(t, err, `failed to list directory "%s"`, namespaceShimBaseDir)
+		require.Len(t, varRunFCContents, 0, "expect %s to be cleared after shims shutdown", namespaceShimBaseDir)
 	case err = <-exitEventErrCh:
 		require.Fail(t, "unexpected error", "unexpectedly received on task exit error channel: %s", err.Error())
 	case <-testCtx.Done():
@@ -344,11 +345,9 @@
 				// which makes the agent resource-hoggy than its production build
 				// So the default VM size (128MB) is too small.
 				MachineCfg: &proto.FirecrackerMachineConfiguration{MemSizeMib: 1024},
-				// CreateVM's default timeout is 20 seconds and it cannot be
-				// disabled.
-				// However because this test starts multiple VMs in parallel,
-				// some of them may not start within the default timeout.
-				TimeoutSeconds: 300,
+				// Because this test starts multiple VMs in parallel, some of them may not start within
+				// the default timeout (20 seconds).
+				TimeoutSeconds: 60,
 			}
 
 			resp, err := fcClient.CreateVM(ctx, req)
@@ -380,12 +379,11 @@
 			require.NoError(t, err, "failed to get VM Info for VM %d", vmID)
 			require.Equal(t, vmInfoResp.VMID, strconv.Itoa(vmID))
 
-			nspVMid := defaultNamespace + "#" + strconv.Itoa(vmID)
 			cfg, err := config.LoadConfig("")
 			require.NoError(t, err, "failed to load config")
-			require.Equal(t, vmInfoResp.SocketPath, filepath.Join(cfg.ShimBaseDir, nspVMid, "firecracker.sock"))
-			require.Equal(t, vmInfoResp.LogFifoPath, filepath.Join(cfg.ShimBaseDir, nspVMid, "fc-logs.fifo"))
-			require.Equal(t, vmInfoResp.MetricsFifoPath, filepath.Join(cfg.ShimBaseDir, nspVMid, "fc-metrics.fifo"))
+			require.Equal(t, vmInfoResp.SocketPath, filepath.Join(cfg.ShimBaseDir, defaultNamespace, strconv.Itoa(vmID), "firecracker.sock"))
+			require.Equal(t, vmInfoResp.LogFifoPath, filepath.Join(cfg.ShimBaseDir, defaultNamespace, strconv.Itoa(vmID), "fc-logs.fifo"))
+			require.Equal(t, vmInfoResp.MetricsFifoPath, filepath.Join(cfg.ShimBaseDir, defaultNamespace, strconv.Itoa(vmID), "fc-metrics.fifo"))
 			require.Equal(t, resp.CgroupPath, vmInfoResp.CgroupPath)
 
 			// just verify that updating the metadata doesn't return an error, a separate test case is needed
@@ -869,7 +867,7 @@
 	require.NoError(t, err, "failed to load config")
 
 	if len(vmID) != 0 {
-		shimPath := fmt.Sprintf("%s/default#%s/%s/%s", cfg.ShimBaseDir, vmID, vmID, containerName)
+		shimPath := fmt.Sprintf("%s/default/%s/%s", cfg.ShimBaseDir, vmID, containerName)
 		_, err = os.Stat(shimPath)
 		require.True(t, os.IsNotExist(err))
 	}
@@ -891,7 +889,7 @@
 	require.True(t, os.IsNotExist(err))
 
 	if len(vmID) != 0 {
-		shimPath := fmt.Sprintf("%s/default#%s/%s/%s", cfg.ShimBaseDir, vmID, vmID, containerName)
+		shimPath := fmt.Sprintf("%s/default/%s/%s", cfg.ShimBaseDir, vmID, containerName)
 		_, err = os.Stat(shimPath)
 		require.True(t, os.IsNotExist(err))
 	}
@@ -1009,7 +1007,7 @@
 		},
 		{
 			VMPath:         "/mnt",
-			FilesystemType: "ext4",
+			FilesystemType: "ext3",
 			// don't specify "ro" to validate it's automatically set via "IsWritable: false"
 			VMMountOptions: []string{"relatime"},
 			ContainerPath:  "/bar",
@@ -1539,7 +1537,6 @@
 		stopFunc        func(ctx context.Context, fcClient fccontrol.FirecrackerService, req proto.CreateVMRequest)
 		withStopVM      bool
 	}{
-
 		{
 			name:       "Successful",
 			withStopVM: true,
@@ -1629,22 +1626,6 @@
 				}
 			},
 		},
-
-		// Test that StopVM returns success if the VM is in paused state, instead of hanging forever.
-		// VM is force shutdown in this case, so we expect no Error or hang.
-		{
-			name:       "PauseStop",
-			withStopVM: true,
-
-			createVMRequest: proto.CreateVMRequest{},
-			stopFunc: func(ctx context.Context, fcClient fccontrol.FirecrackerService, req proto.CreateVMRequest) {
-				_, err = fcClient.PauseVM(ctx, &proto.PauseVMRequest{VMID: req.VMID})
-				require.Equal(status.Code(err), codes.OK)
-
-				_, err = fcClient.StopVM(ctx, &proto.StopVMRequest{VMID: req.VMID})
-				require.NoError(err)
-			},
-		},
 	}
 
 	fcClient, err := newFCControlClient(containerdSockPath)
@@ -2241,6 +2222,10 @@
 		// Ensure the response fields are populated correctly
 		assert.Equal(t, request.VMID, resp.VMID)
 
+		// Currently StopVM doesn't work when the VM is paused, since StopVM calls its in-VM agent.
+		_, err = fcClient.ResumeVM(ctx, &proto.ResumeVMRequest{VMID: request.VMID})
+		require.Equal(t, status.Code(err), codes.OK)
+
 		_, err = fcClient.StopVM(ctx, &proto.StopVMRequest{VMID: request.VMID})
 		require.Equal(t, status.Code(err), codes.OK)
 	}
Only in .: snapshot.diff
Only in .: snapshot_origin.diff
Only in .: _submodules
Only in /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/tools/docker: Dockerfile.firecracker-builder
diff -ur ./tools/docker/entrypoint.sh /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/tools/docker/entrypoint.sh
--- ./tools/docker/entrypoint.sh	2022-02-11 11:21:52.617311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/tools/docker/entrypoint.sh	2022-02-25 13:37:31.111472997 +0800
@@ -12,9 +12,8 @@
 fi
 
 cat > /etc/containerd/snapshotter/devmapper.toml <<EOF
-version = 2
 [plugins]
-  [plugins."io.containerd.snapshotter.v1.devmapper"]
+  [plugins.devmapper]
     pool_name = "${pool_name}"
     base_image_size = "1024MB"
 EOF
Only in ./tools/image-builder: builder_stamp
Only in ./tools/image-builder: debootstrap_stamp
Only in ./tools/image-builder: files_common_stamp
Only in ./tools/image-builder/files_debootstrap/etc: resolv.conf
Only in ./tools/image-builder/files_debootstrap/etc/systemd/system: apt-daily.timer
Only in ./tools/image-builder/files_debootstrap/etc/systemd/system: apt-daily-upgrade.timer
Only in ./tools/image-builder/files_debootstrap/etc/systemd/system: firecracker.target.wants
Only in ./tools/image-builder/files_debootstrap/etc/systemd/system: getty-static.service
Only in ./tools/image-builder/files_debootstrap/etc/systemd/system: rom-dev.mount
Only in ./tools/image-builder/files_debootstrap/etc/systemd/system: rom.mount
Only in ./tools/image-builder/files_debootstrap/etc/systemd/system: rom-overlay.mount
Only in ./tools/image-builder/files_debootstrap/etc/systemd/system: systemd-timesyncd.service
Only in ./tools/image-builder: files_debootstrap_stamp
Only in ./tools/image-builder: files_ephemeral
Only in ./tools/image-builder: files_ephemeral_stamp
diff -ur ./tools/image-builder/Makefile /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/tools/image-builder/Makefile
--- ./tools/image-builder/Makefile	2022-02-11 11:21:52.617311692 +0800
+++ /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4/tools/image-builder/Makefile	2022-02-25 13:37:31.111472997 +0800
@@ -17,8 +17,6 @@
 IMAGE_DIRS := /dev /bin /etc /etc/init.d /tmp /var /run /proc /sys /container/rootfs /agent /rom /overlay
 DIRS       := $(foreach dir,$(IMAGE_DIRS),"$(WORKDIR)$(dir)")
 DEBMIRROR  ?= http://deb.debian.org/debian
-ROOTFS_CACHE_VOLUME_NAME ?= rootfscache
-
 
 export DOCKER_IMAGE_TAG?=latest
 
@@ -58,7 +56,7 @@
 	debootstrap \
 		--variant=minbase \
 		--include=udev,systemd,systemd-sysv,procps,libseccomp2,haveged \
-		bookworm \
+		buster \
 		"$(WORKDIR)" $(DEBMIRROR)
 	rm -rf "$(WORKDIR)/var/cache/apt/archives" \
 	       "$(WORKDIR)/usr/share/doc" \
@@ -105,7 +103,7 @@
 	docker run --rm \
 		--security-opt=apparmor=unconfined \
 		--volume $(CURDIR):/src \
-		--volume $(ROOTFS_CACHE_VOLUME_NAME):/src/tmp \
+		--volume /src/tmp \
 		--cap-add=sys_admin \
 		--cap-add=sys_chroot \
 		--env=DEBMIRROR \
Only in ./tools/image-builder: rootfs.img
Only in ./tools/image-builder: rootfs-no-agent.img
Only in ./tools/image-builder: rootfs-slow-boot.img
Only in ./tools/image-builder: rootfs-slow-reboot.img
Only in ./tools/image-builder: tmp
Only in ./tools: runc-builder-stamp
Only in /home/daisy/go/pkg/mod/github.com/ease-lab/firecracker-containerd@v0.0.0-20210618165033-6af02db30bc4: .travis.yml
